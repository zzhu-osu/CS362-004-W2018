Testing: whoseTurn()

numPlayers = 2, i = 0:	PASSED
numPlayers = 2, i = 1:	PASSED
numPlayers = 3, i = 0:	PASSED
numPlayers = 3, i = 1:	PASSED
numPlayers = 3, i = 2:	PASSED
numPlayers = 4, i = 0:	PASSED
numPlayers = 4, i = 1:	PASSED
numPlayers = 4, i = 2:	PASSED
numPlayers = 4, i = 3:	PASSED
Total Number of Failures: 0

Function 'updateCoins'
Lines executed:81.82% of 11
Branches executed:100.00% of 8
Taken at least once:75.00% of 8
No calls

Function 'gainCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 1

Function 'discardCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'cardEffect'
Lines executed:0.00% of 206
Branches executed:0.00% of 179
Taken at least once:0.00% of 179
Calls executed:0.00% of 58

Function 'smithy_card'
Lines executed:0.00% of 6
Branches executed:0.00% of 2
Taken at least once:0.00% of 2
Calls executed:0.00% of 3

Function 'adventurer_card'
Lines executed:0.00% of 18
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
Calls executed:0.00% of 3

Function 'council_room_card'
Lines executed:0.00% of 9
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 4

Function 'village_card'
Lines executed:0.00% of 6
No branches
Calls executed:0.00% of 3

Function 'great_hall_card'
Lines executed:0.00% of 6
No branches
Calls executed:0.00% of 3

Function 'getCost'
Lines executed:0.00% of 30
Branches executed:0.00% of 28
Taken at least once:0.00% of 28
No calls

Function 'drawCard'
Lines executed:36.36% of 22
Branches executed:33.33% of 6
Taken at least once:16.67% of 6
Calls executed:0.00% of 1

Function 'getWinners'
Lines executed:0.00% of 24
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
Calls executed:0.00% of 2

Function 'scoreFor'
Lines executed:0.00% of 42
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
Calls executed:0.00% of 3

Function 'isGameOver'
Lines executed:0.00% of 10
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'endTurn'
Lines executed:0.00% of 20
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'whoseTurn'
Lines executed:100.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 9
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'supplyCount'
Lines executed:0.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 3
No branches
Calls executed:0.00% of 1

Function 'numHandCards'
Lines executed:0.00% of 2
No branches
Calls executed:0.00% of 1

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 4

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
Calls executed:0.00% of 3

Function 'shuffle'
Lines executed:93.75% of 16
Branches executed:100.00% of 8
Taken at least once:87.50% of 8
Calls executed:100.00% of 2

Function 'initializeGame'
Lines executed:95.16% of 62
Branches executed:100.00% of 46
Taken at least once:91.30% of 46
Calls executed:100.00% of 5

Function 'kingdomCards'
Lines executed:0.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:0.00% of 3
No branches
No calls

Function 'compare'
Lines executed:83.33% of 6
Branches executed:100.00% of 4
Taken at least once:75.00% of 4
No calls

File 'dominion.c'
Lines executed:16.87% of 581
Branches executed:16.31% of 417
Taken at least once:14.15% of 417
Calls executed:7.00% of 100
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h> 
        -:    5:#include <math.h> 
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 135 returned 100% blocks executed 83%
      135:    8:int compare(const void * a,
        -:    9:  const void * b) {
      135:   10:  if ( * (int * ) a > * (int * ) b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   11:    return 1;
      135:   12:  if ( * (int * ) a < * (int * ) b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
       36:   13:    return -1;
       99:   14:  return 0;
        -:   15:}
        -:   16:
function newGame called 0 returned 0% blocks executed 0%
    #####:   17:struct gameState * newGame() {
    #####:   18:  struct gameState * g = malloc(sizeof(struct gameState));
    #####:   19:  return g;
        -:   20:}
        -:   21:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   22:int * kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   23:  int k8, int k9, int k10) {
    #####:   24:  int * k = malloc(10 * sizeof(int));
    #####:   25:  k[0] = k1;
    #####:   26:  k[1] = k2;
    #####:   27:  k[2] = k3;
    #####:   28:  k[3] = k4;
    #####:   29:  k[4] = k5;
    #####:   30:  k[5] = k6;
    #####:   31:  k[6] = k7;
    #####:   32:  k[7] = k8;
    #####:   33:  k[8] = k9;
    #####:   34:  k[9] = k10;
    #####:   35:  return k;
        -:   36:}
        -:   37:
function initializeGame called 3 returned 100% blocks executed 95%
        3:   38:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   39:  struct gameState * state) {
        -:   40:
        -:   41:  int i;
        -:   42:  int j;
        -:   43:  int it;
        -:   44:    //set up random number generator
        3:   45:  SelectStream(1);
call    0 returned 100%
        3:   46:  PutSeed((long) randomSeed);
call    0 returned 100%
        -:   47:
        -:   48:    //check number of players
        3:   49:  if (numPlayers > MAX_PLAYERS || numPlayers < 2) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:   50:    return -1;
        -:   51:  }
        -:   52:
        -:   53:    //set number of players
        3:   54:  state -> numPlayers = numPlayers;
        -:   55:
        -:   56:    //check selected kingdom cards are different
       33:   57:  for (i = 0; i < 10; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      330:   58:    for (j = 0; j < 10; j++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      300:   59:      if (j != i && kingdomCards[j] == kingdomCards[i]) {
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:   60:        return -1;
        -:   61:      }
        -:   62:    }
        -:   63:  }
        -:   64:
        -:   65:    //initialize supply
        -:   66:    ///////////////////////////////
        -:   67:
        -:   68:    //set number of Curse cards
        3:   69:  if (numPlayers == 2) {
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        1:   70:    state -> supplyCount[curse] = 10;
        2:   71:  } else if (numPlayers == 3) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        1:   72:    state -> supplyCount[curse] = 20;
        -:   73:  } else {
        1:   74:    state -> supplyCount[curse] = 30;
        -:   75:  }
        -:   76:
        -:   77:    //set number of Victory cards
        3:   78:  if (numPlayers == 2) {
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        1:   79:    state -> supplyCount[estate] = 8;
        1:   80:    state -> supplyCount[duchy] = 8;
        1:   81:    state -> supplyCount[province] = 8;
        -:   82:  } else {
        2:   83:    state -> supplyCount[estate] = 12;
        2:   84:    state -> supplyCount[duchy] = 12;
        2:   85:    state -> supplyCount[province] = 12;
        -:   86:  }
        -:   87:
        -:   88:    //set number of Treasure cards
        3:   89:  state -> supplyCount[copper] = 60 - (7 * numPlayers);
        3:   90:  state -> supplyCount[silver] = 40;
        3:   91:  state -> supplyCount[gold] = 30;
        -:   92:
        -:   93:    //set number of Kingdom cards
       63:   94:    for (i = adventurer; i <= treasure_map; i++) //loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:   95:    {
      495:   96:        for (j = 0; j < 10; j++) //loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:   97:        {
      465:   98:          if (kingdomCards[j] == i) {
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:   99:                //check if card is a 'Victory' Kingdom card
       30:  100:            if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens) {
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
       12:  101:              if (numPlayers == 2) {
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        2:  102:                state -> supplyCount[i] = 8;
        -:  103:              } else {
        4:  104:                state -> supplyCount[i] = 12;
        -:  105:              }
        -:  106:            } else {
       24:  107:              state -> supplyCount[i] = 10;
        -:  108:            }
       30:  109:            break;
        -:  110:            } else //card is not in the set choosen for the game
        -:  111:            {
      435:  112:              state -> supplyCount[i] = -1;
        -:  113:            }
        -:  114:          }
        -:  115:
        -:  116:        }
        -:  117:
        -:  118:    ////////////////////////
        -:  119:    //supply intilization complete
        -:  120:
        -:  121:    //set player decks
       12:  122:        for (i = 0; i < numPlayers; i++) {
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        9:  123:          state -> deckCount[i] = 0;
       36:  124:          for (j = 0; j < 3; j++) {
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
       27:  125:            state -> deck[i][j] = estate;
       27:  126:            state -> deckCount[i]++;
        -:  127:          }
       72:  128:          for (j = 3; j < 10; j++) {
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
       63:  129:            state -> deck[i][j] = copper;
       63:  130:            state -> deckCount[i]++;
        -:  131:          }
        -:  132:        }
        -:  133:
        -:  134:    //shuffle player decks
       12:  135:        for (i = 0; i < numPlayers; i++) {
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        9:  136:          if (shuffle(i, state) < 0) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  137:            return -1;
        -:  138:          }
        -:  139:        }
        -:  140:
        -:  141:    //draw player hands
       12:  142:        for (i = 0; i < numPlayers; i++) {
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  143:        //initialize hand size to zero
        9:  144:          state -> handCount[i] = 0;
        9:  145:          state -> discardCount[i] = 0;
        -:  146:        //draw 5 cards
        -:  147:        // for (j = 0; j < 5; j++)
        -:  148:        //  {
        -:  149:        //    drawCard(i, state);
        -:  150:        //  }
        -:  151:        }
        -:  152:
        -:  153:    //set embargo tokens to 0 for all supply piles
       84:  154:        for (i = 0; i <= treasure_map; i++) {
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
       81:  155:          state -> embargoTokens[i] = 0;
        -:  156:        }
        -:  157:
        -:  158:    //initialize first player's turn
        3:  159:        state -> outpostPlayed = 0;
        3:  160:        state -> phase = 0;
        3:  161:        state -> numActions = 1;
        3:  162:        state -> numBuys = 1;
        3:  163:        state -> playedCardCount = 0;
        3:  164:        state -> whoseTurn = 0;
        3:  165:        state -> handCount[state -> whoseTurn] = 0;
        -:  166:    //int it; move to top
        -:  167:
        -:  168:    //Moved draw cards to here, only drawing at the start of a turn
       18:  169:        for (it = 0; it < 5; it++) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       15:  170:          drawCard(state -> whoseTurn, state);
call    0 returned 100%
        -:  171:        }
        -:  172:
        3:  173:        updateCoins(state -> whoseTurn, state, 0);
call    0 returned 100%
        -:  174:
        3:  175:        return 0;
        -:  176:      }
        -:  177:
function shuffle called 9 returned 100% blocks executed 94%
        9:  178:      int shuffle(int player, struct gameState * state) {
        -:  179:
        -:  180:        int newDeck[MAX_DECK];
        9:  181:        int newDeckPos = 0;
        -:  182:        int card;
        -:  183:        int i;
        -:  184:
        9:  185:        if (state -> deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  186:          return -1;
        9:  187:        qsort((void * )(state -> deck[player]), state -> deckCount[player], sizeof(int), compare);
call    0 returned 100%
        -:  188:    /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  189:
      108:  190:        while (state -> deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       90:  191:          card = floor(Random() * state -> deckCount[player]);
call    0 returned 100%
       90:  192:          newDeck[newDeckPos] = state -> deck[player][card];
       90:  193:          newDeckPos++;
      300:  194:          for (i = card; i < state -> deckCount[player] - 1; i++) {
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
      210:  195:            state -> deck[player][i] = state -> deck[player][i + 1];
        -:  196:          }
       90:  197:          state -> deckCount[player]--;
        -:  198:        }
       99:  199:        for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       90:  200:          state -> deck[player][i] = newDeck[i];
       90:  201:          state -> deckCount[player]++;
        -:  202:        }
        -:  203:
        9:  204:        return 0;
        -:  205:      }
        -:  206:
function playCard called 0 returned 0% blocks executed 0%
    #####:  207:      int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState * state) {
        -:  208:        int card;
    #####:  209:    int coin_bonus = 0; //tracks coins gain from actions
        -:  210:
        -:  211:    //check if it is the right phase
    #####:  212:    if (state -> phase != 0) {
branch  0 never executed
branch  1 never executed
    #####:  213:      return -1;
        -:  214:    }
        -:  215:
        -:  216:    //check if player has enough actions
    #####:  217:    if (state -> numActions < 1) {
branch  0 never executed
branch  1 never executed
    #####:  218:      return -1;
        -:  219:    }
        -:  220:
        -:  221:    //get card played
    #####:  222:    card = handCard(handPos, state);
call    0 never executed
        -:  223:
        -:  224:    //check if selected card is an action
    #####:  225:    if (card < adventurer || card > treasure_map) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  226:      return -1;
        -:  227:    }
        -:  228:
        -:  229:    //play card
    #####:  230:    if (cardEffect(card, choice1, choice2, choice3, state, handPos, & coin_bonus) < 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  231:      return -1;
        -:  232:    }
        -:  233:
        -:  234:    //reduce number of actions
    #####:  235:    state -> numActions--;
        -:  236:
        -:  237:    //update coins (Treasure cards may be added with card draws)
    #####:  238:    updateCoins(state -> whoseTurn, state, coin_bonus);
call    0 never executed
        -:  239:
    #####:  240:    return 0;
        -:  241:  }
        -:  242:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  243:  int buyCard(int supplyPos, struct gameState * state) {
        -:  244:    int who;
        -:  245:    if (DEBUG) {
        -:  246:      printf("Entering buyCard...\n");
        -:  247:    }
        -:  248:
        -:  249:    // I don't know what to do about the phase thing.
        -:  250:
    #####:  251:    who = state -> whoseTurn;
        -:  252:
    #####:  253:    if (state -> numBuys < 1) {
branch  0 never executed
branch  1 never executed
        -:  254:      if (DEBUG)
        -:  255:        printf("You do not have any buys left\n");
    #####:  256:      return -1;
    #####:  257:    } else if (supplyCount(supplyPos, state) < 1) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  258:      if (DEBUG)
        -:  259:        printf("There are not any of that type of card left\n");
    #####:  260:      return -1;
    #####:  261:    } else if (state -> coins < getCost(supplyPos)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  262:      if (DEBUG)
        -:  263:        printf("You do not have enough money to buy that. You have %d coins.\n", state -> coins);
    #####:  264:      return -1;
        -:  265:    } else {
    #####:  266:      state -> phase = 1;
        -:  267:        //state->supplyCount[supplyPos]--;
    #####:  268:        gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  269:
    #####:  270:        state -> coins = (state -> coins) - (getCost(supplyPos));
call    0 never executed
    #####:  271:        state -> numBuys--;
        -:  272:        if (DEBUG)
        -:  273:          printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state -> numBuys, state -> coins);
        -:  274:      }
        -:  275:
        -:  276:    //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  277:    //state->discardCount[who]++;
        -:  278:
    #####:  279:      return 0;
        -:  280:    }
        -:  281:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  282:    int numHandCards(struct gameState * state) 
        -:  283:    {
    #####:  284:      return state -> handCount[whoseTurn(state)];
call    0 never executed
        -:  285:    }
        -:  286:
function handCard called 0 returned 0% blocks executed 0%
    #####:  287:    int handCard(int handPos, struct gameState * state) 
        -:  288:    {
    #####:  289:      int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  290:      return state -> hand[currentPlayer][handPos];
        -:  291:    }
        -:  292:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  293:    int supplyCount(int card, struct gameState * state) 
        -:  294:    {
    #####:  295:      return state -> supplyCount[card];
        -:  296:    }
        -:  297:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  298:    int fullDeckCount(int player, int card, struct gameState * state) 
        -:  299:    {
        -:  300:      int i;
    #####:  301:      int count = 0;
        -:  302:
    #####:  303:      for (i = 0; i < state -> deckCount[player]; i++) 
branch  0 never executed
branch  1 never executed
        -:  304:      {
    #####:  305:        if (state -> deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  306:      }
        -:  307:
    #####:  308:      for (i = 0; i < state -> handCount[player]; i++) 
branch  0 never executed
branch  1 never executed
        -:  309:      {
    #####:  310:        if (state -> hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  311:      }
        -:  312:
    #####:  313:      for (i = 0; i < state -> discardCount[player]; i++) 
branch  0 never executed
branch  1 never executed
        -:  314:      {
    #####:  315:        if (state -> discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  316:      }
        -:  317:
    #####:  318:      return count;
        -:  319:    }
        -:  320:
function whoseTurn called 9 returned 100% blocks executed 100%
        9:  321:    int whoseTurn(struct gameState * state) 
        -:  322:    {
        9:  323:      return state -> whoseTurn;
        -:  324:    }
        -:  325:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  326:    int endTurn(struct gameState * state) 
        -:  327:    {
        -:  328:      int k;
        -:  329:      int i;
    #####:  330:      int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  331:
        -:  332:    //Discard hand
    #####:  333:      for (i = 0; i < state -> handCount[currentPlayer]; i++) 
branch  0 never executed
branch  1 never executed
        -:  334:      {
    #####:  335:        state -> discard[currentPlayer][state -> discardCount[currentPlayer]++] = state -> hand[currentPlayer][i]; //Discard
    #####:  336:        state -> hand[currentPlayer][i] = -1; //Set card to -1
        -:  337:      }
    #####:  338:    state -> handCount[currentPlayer] = 0; //Reset hand count
        -:  339:
        -:  340:    //Code for determining the player
    #####:  341:    if (currentPlayer < (state -> numPlayers - 1)) 
branch  0 never executed
branch  1 never executed
        -:  342:    {
    #####:  343:        state -> whoseTurn = currentPlayer + 1; //Still safe to increment
        -:  344:      } 
        -:  345:      else 
        -:  346:      {
    #####:  347:        state -> whoseTurn = 0; //Max player has been reached, loop back around to player 1
        -:  348:      }
        -:  349:
    #####:  350:      state -> outpostPlayed = 0;
    #####:  351:      state -> phase = 0;
    #####:  352:      state -> numActions = 1;
    #####:  353:      state -> coins = 0;
    #####:  354:      state -> numBuys = 1;
    #####:  355:      state -> playedCardCount = 0;
    #####:  356:      state -> handCount[state -> whoseTurn] = 0;
        -:  357:
        -:  358:    //int k; move to top
        -:  359:    //Next player draws hand
    #####:  360:      for (k = 0; k < 5; k++) 
branch  0 never executed
branch  1 never executed
        -:  361:      {
    #####:  362:        drawCard(state -> whoseTurn, state); //Draw a card
call    0 never executed
        -:  363:      }
        -:  364:
        -:  365:    //Update money
    #####:  366:      updateCoins(state -> whoseTurn, state, 0);
call    0 never executed
        -:  367:
    #####:  368:      return 0;
        -:  369:    }
        -:  370:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  371:    int isGameOver(struct gameState * state) 
        -:  372:    {
        -:  373:      int i;
        -:  374:      int j;
        -:  375:
        -:  376:    //if stack of Province cards is empty, the game ends
    #####:  377:      if (state -> supplyCount[province] == 0) 
branch  0 never executed
branch  1 never executed
        -:  378:      {
    #####:  379:        return 1;
        -:  380:      }
        -:  381:
        -:  382:    //if three supply pile are at 0, the game ends
    #####:  383:      j = 0;
    #####:  384:      for (i = 0; i < 25; i++) 
branch  0 never executed
branch  1 never executed
        -:  385:      {
    #####:  386:        if (state -> supplyCount[i] == 0) 
branch  0 never executed
branch  1 never executed
        -:  387:        {
    #####:  388:          j++;
        -:  389:        }
        -:  390:      }
    #####:  391:      if (j >= 3) 
branch  0 never executed
branch  1 never executed
        -:  392:      {
    #####:  393:        return 1;
        -:  394:      }
        -:  395:
    #####:  396:      return 0;
        -:  397:    }
        -:  398:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  399:    int scoreFor(int player, struct gameState * state) 
        -:  400:    {
        -:  401:      int i;
    #####:  402:      int score = 0;
        -:  403:    //score from hand
    #####:  404:      for (i = 0; i < state -> handCount[player]; i++) 
branch  0 never executed
branch  1 never executed
        -:  405:      {
    #####:  406:        if (state -> hand[player][i] == curse) 
branch  0 never executed
branch  1 never executed
        -:  407:        {
    #####:  408:          score = score - 1;
        -:  409:        };
    #####:  410:        if (state -> hand[player][i] == estate) 
branch  0 never executed
branch  1 never executed
        -:  411:        {
    #####:  412:          score = score + 1;
        -:  413:        };
    #####:  414:        if (state -> hand[player][i] == duchy) 
branch  0 never executed
branch  1 never executed
        -:  415:        {
    #####:  416:          score = score + 3;
        -:  417:        };
    #####:  418:        if (state -> hand[player][i] == province) 
branch  0 never executed
branch  1 never executed
        -:  419:        {
    #####:  420:          score = score + 6;
        -:  421:        };
    #####:  422:        if (state -> hand[player][i] == great_hall) 
branch  0 never executed
branch  1 never executed
        -:  423:        {
    #####:  424:          score = score + 1;
        -:  425:        };
    #####:  426:        if (state -> hand[player][i] == gardens) 
branch  0 never executed
branch  1 never executed
        -:  427:        {
    #####:  428:          score = score + (fullDeckCount(player, 0, state) / 10);
call    0 never executed
        -:  429:        };
        -:  430:      }
        -:  431:
        -:  432:    //score from discard
    #####:  433:      for (i = 0; i < state -> discardCount[player]; i++) 
branch  0 never executed
branch  1 never executed
        -:  434:      {
    #####:  435:        if (state -> discard[player][i] == curse) 
branch  0 never executed
branch  1 never executed
        -:  436:        {
    #####:  437:          score = score - 1;
        -:  438:        };
    #####:  439:        if (state -> discard[player][i] == estate) 
branch  0 never executed
branch  1 never executed
        -:  440:        {
    #####:  441:          score = score + 1;
        -:  442:        };
    #####:  443:        if (state -> discard[player][i] == duchy) 
branch  0 never executed
branch  1 never executed
        -:  444:        {
    #####:  445:          score = score + 3;
        -:  446:        };
    #####:  447:        if (state -> discard[player][i] == province) 
branch  0 never executed
branch  1 never executed
        -:  448:        {
    #####:  449:          score = score + 6;
        -:  450:        };
    #####:  451:        if (state -> discard[player][i] == great_hall) 
branch  0 never executed
branch  1 never executed
        -:  452:        {
    #####:  453:          score = score + 1;
        -:  454:        };
    #####:  455:        if (state -> discard[player][i] == gardens) 
branch  0 never executed
branch  1 never executed
        -:  456:        {
    #####:  457:          score = score + (fullDeckCount(player, 0, state) / 10);
call    0 never executed
        -:  458:        };
        -:  459:      }
        -:  460:
        -:  461:    //score from deck
    #####:  462:      for (i = 0; i < state -> discardCount[player]; i++) 
branch  0 never executed
branch  1 never executed
        -:  463:      {
    #####:  464:        if (state -> deck[player][i] == curse) 
branch  0 never executed
branch  1 never executed
        -:  465:        {
    #####:  466:          score = score - 1;
        -:  467:        };
    #####:  468:        if (state -> deck[player][i] == estate) 
branch  0 never executed
branch  1 never executed
        -:  469:        {
    #####:  470:          score = score + 1;
        -:  471:        };
    #####:  472:        if (state -> deck[player][i] == duchy) 
branch  0 never executed
branch  1 never executed
        -:  473:        {
    #####:  474:          score = score + 3;
        -:  475:        };
    #####:  476:        if (state -> deck[player][i] == province) 
branch  0 never executed
branch  1 never executed
        -:  477:        {
    #####:  478:          score = score + 6;
        -:  479:        };
    #####:  480:        if (state -> deck[player][i] == great_hall) 
branch  0 never executed
branch  1 never executed
        -:  481:        {
    #####:  482:          score = score + 1;
        -:  483:        };
    #####:  484:        if (state -> deck[player][i] == gardens) 
branch  0 never executed
branch  1 never executed
        -:  485:        {
    #####:  486:          score = score + (fullDeckCount(player, 0, state) / 10);
call    0 never executed
        -:  487:        };
        -:  488:      }
        -:  489:
    #####:  490:      return score;
        -:  491:    }
        -:  492:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  493:    int getWinners(int players[MAX_PLAYERS], struct gameState * state) 
        -:  494:    {
        -:  495:      int i;
        -:  496:      int j;
        -:  497:      int highScore;
        -:  498:      int currentPlayer;
        -:  499:
        -:  500:    //get score for each player
    #####:  501:      for (i = 0; i < MAX_PLAYERS; i++) 
branch  0 never executed
branch  1 never executed
        -:  502:      {
        -:  503:        //set unused player scores to -9999
    #####:  504:        if (i >= state -> numPlayers) 
branch  0 never executed
branch  1 never executed
        -:  505:        {
    #####:  506:          players[i] = -9999;
        -:  507:        } else {
    #####:  508:          players[i] = scoreFor(i, state);
call    0 never executed
        -:  509:        }
        -:  510:      }
        -:  511:
        -:  512:    //find highest score
    #####:  513:      j = 0;
    #####:  514:      for (i = 0; i < MAX_PLAYERS; i++) 
branch  0 never executed
branch  1 never executed
        -:  515:      {
    #####:  516:        if (players[i] > players[j]) 
branch  0 never executed
branch  1 never executed
        -:  517:        {
    #####:  518:          j = i;
        -:  519:        }
        -:  520:      }
    #####:  521:      highScore = players[j];
        -:  522:
        -:  523:    //add 1 to players who had less turns
    #####:  524:      currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  525:      for (i = 0; i < MAX_PLAYERS; i++) 
branch  0 never executed
branch  1 never executed
        -:  526:      {
    #####:  527:        if (players[i] == highScore && i > currentPlayer) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  528:        {
    #####:  529:          players[i]++;
        -:  530:        }
        -:  531:      }
        -:  532:
        -:  533:    //find new highest score
    #####:  534:      j = 0;
    #####:  535:      for (i = 0; i < MAX_PLAYERS; i++) 
branch  0 never executed
branch  1 never executed
        -:  536:      {
    #####:  537:        if (players[i] > players[j]) 
branch  0 never executed
branch  1 never executed
        -:  538:        {
    #####:  539:          j = i;
        -:  540:        }
        -:  541:      }
    #####:  542:      highScore = players[j];
        -:  543:
        -:  544:    //set winners in array to 1 and rest to 0
    #####:  545:      for (i = 0; i < MAX_PLAYERS; i++) 
branch  0 never executed
branch  1 never executed
        -:  546:      {
    #####:  547:        if (players[i] == highScore) 
branch  0 never executed
branch  1 never executed
        -:  548:        {
    #####:  549:          players[i] = 1;
        -:  550:        } else {
    #####:  551:          players[i] = 0;
        -:  552:        }
        -:  553:      }
        -:  554:
    #####:  555:      return 0;
        -:  556:    }
        -:  557:
function drawCard called 15 returned 100% blocks executed 38%
       15:  558:    int drawCard(int player, struct gameState * state) 
        -:  559:    {
        -:  560:      int count;
        -:  561:      int deckCounter;
       15:  562:    if (state -> deckCount[player] <= 0) { //Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  563:
        -:  564:        //Step 1 Shuffle the discard pile back into a deck
        -:  565:      int i;
        -:  566:        //Move discard to deck
    #####:  567:      for (i = 0; i < state -> discardCount[player]; i++) 
branch  0 never executed
branch  1 never executed
        -:  568:      {
    #####:  569:        state -> deck[player][i] = state -> discard[player][i];
    #####:  570:        state -> discard[player][i] = -1;
        -:  571:      }
        -:  572:
    #####:  573:      state -> deckCount[player] = state -> discardCount[player];
    #####:  574:        state -> discardCount[player] = 0; //Reset discard
        -:  575:
        -:  576:        //Shufffle the deck
    #####:  577:        shuffle(player, state); //Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  578:
        -:  579:        if (DEBUG) 
        -:  580:        { //Debug statements
        -:  581:          printf("Deck count now: %d\n", state -> deckCount[player]);
        -:  582:        }
        -:  583:
    #####:  584:        state -> discardCount[player] = 0;
        -:  585:
        -:  586:        //Step 2 Draw Card
    #####:  587:        count = state -> handCount[player]; //Get current player's hand count
        -:  588:
        -:  589:        if (DEBUG) 
        -:  590:        { //Debug statements
        -:  591:          printf("Current hand count: %d\n", count);
        -:  592:        }
        -:  593:
    #####:  594:        deckCounter = state -> deckCount[player]; //Create a holder for the deck count
        -:  595:
    #####:  596:        if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  597:          return -1;
        -:  598:
    #####:  599:        state -> hand[player][count] = state -> deck[player][deckCounter - 1]; //Add card to hand
    #####:  600:        state -> deckCount[player]--;
    #####:  601:        state -> handCount[player]++; //Increment hand count
        -:  602:      } 
        -:  603:      else 
        -:  604:      {
       15:  605:        int count = state -> handCount[player]; //Get current hand count for player
        -:  606:        int deckCounter;
        -:  607:        if (DEBUG) 
        -:  608:        { //Debug statements
        -:  609:          printf("Current hand count: %d\n", count);
        -:  610:        }
        -:  611:
       15:  612:        deckCounter = state -> deckCount[player]; //Create holder for the deck count
       15:  613:        state -> hand[player][count] = state -> deck[player][deckCounter - 1]; //Add card to the hand
       15:  614:        state -> deckCount[player]--;
       15:  615:        state -> handCount[player]++; //Increment hand count
        -:  616:      }
       15:  617:      return 0;
        -:  618:    }
        -:  619:
function getCost called 0 returned 0% blocks executed 0%
    #####:  620:    int getCost(int cardNumber) 
        -:  621:    {
    #####:  622:      switch (cardNumber) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  623:      {
        -:  624:        case curse:
    #####:  625:        return 0;
        -:  626:        case estate:
    #####:  627:        return 2;
        -:  628:        case duchy:
    #####:  629:        return 5;
        -:  630:        case province:
    #####:  631:        return 8;
        -:  632:        case copper:
    #####:  633:        return 0;
        -:  634:        case silver:
    #####:  635:        return 3;
        -:  636:        case gold:
    #####:  637:        return 6;
        -:  638:        case adventurer:
    #####:  639:        return 6;
        -:  640:        case council_room:
    #####:  641:        return 5;
        -:  642:        case feast:
    #####:  643:        return 4;
        -:  644:        case gardens:
    #####:  645:        return 4;
        -:  646:        case mine:
    #####:  647:        return 5;
        -:  648:        case remodel:
    #####:  649:        return 4;
        -:  650:        case smithy:
    #####:  651:        return 4;
        -:  652:        case village:
    #####:  653:        return 3;
        -:  654:        case baron:
    #####:  655:        return 4;
        -:  656:        case great_hall:
    #####:  657:        return 3;
        -:  658:        case minion:
    #####:  659:        return 5;
        -:  660:        case steward:
    #####:  661:        return 3;
        -:  662:        case tribute:
    #####:  663:        return 5;
        -:  664:        case ambassador:
    #####:  665:        return 3;
        -:  666:        case cutpurse:
    #####:  667:        return 4;
        -:  668:        case embargo:
    #####:  669:        return 2;
        -:  670:        case outpost:
    #####:  671:        return 5;
        -:  672:        case salvager:
    #####:  673:        return 4;
        -:  674:        case sea_hag:
    #####:  675:        return 4;
        -:  676:        case treasure_map:
    #####:  677:        return 4;
        -:  678:      }
        -:  679:
    #####:  680:      return -1;
        -:  681:    }
        -:  682:
        -:  683://A2 Refactor CLEAN CARD | NO BUGS
function great_hall_card called 0 returned 0% blocks executed 0%
    #####:  684:    int great_hall_card(int handPos, struct gameState * state) 
        -:  685:    {
    #####:  686:      int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  687:
    #####:  688:      drawCard(currentPlayer, state);
call    0 never executed
        -:  689:
        -:  690:    // provides another action turn
    #####:  691:      state -> numActions++;
        -:  692:
        -:  693:    // played card to discard pile
    #####:  694:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  695:      return 0;
        -:  696:    }
        -:  697:
        -:  698://A2 Refactor
function village_card called 0 returned 0% blocks executed 0%
    #####:  699:    int village_card(int handPos, struct gameState * state) 
        -:  700:    {
    #####:  701:      int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  702:
    #####:  703:      drawCard(currentPlayer, state);
call    0 never executed
        -:  704:
        -:  705:    //BUG: Should only provide 2 action turns
    #####:  706:      state -> numActions = state -> numActions + 4;
        -:  707:
        -:  708:    // played card to discard pile
    #####:  709:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  710:      return 0;
        -:  711:    }
        -:  712:
        -:  713://A2 Refactor
function council_room_card called 0 returned 0% blocks executed 0%
    #####:  714:    int council_room_card(int handPos, struct gameState * state) 
        -:  715:    {
        -:  716:      int i;
    #####:  717:      int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  718:
        -:  719:    // draw 4 cards
    #####:  720:      for (i = 0; i < 4; i++) {
branch  0 never executed
branch  1 never executed
    #####:  721:        drawCard(currentPlayer, state);
call    0 never executed
        -:  722:      }
        -:  723:
        -:  724:    //BUG: Card provides another buy turn 
        -:  725:    //state->numBuys++;      
        -:  726:
        -:  727:    // all other players draw a card
    #####:  728:      for (i = 0; i < state -> numPlayers; i++) 
branch  0 never executed
branch  1 never executed
        -:  729:      {
    #####:  730:        if (i != currentPlayer) 
branch  0 never executed
branch  1 never executed
        -:  731:        {
    #####:  732:          drawCard(i, state);
call    0 never executed
        -:  733:        }
        -:  734:      }
        -:  735:    // played card to discard pile
    #####:  736:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  737:      return 0;
        -:  738:    }
        -:  739:
        -:  740://A2 Refactor
function adventurer_card called 0 returned 0% blocks executed 0%
    #####:  741:    int adventurer_card(struct gameState * state) 
        -:  742:    {
    #####:  743:      int z = 0;
        -:  744:      int cardDrawn;
    #####:  745:      int drawntreasure = 0;
    #####:  746:      int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  747:      int temphand[MAX_HAND];
        -:  748:
    #####:  749:    while (drawntreasure < 2) 
branch  0 never executed
branch  1 never executed
        -:  750:    { // when the deck is empty, reshuffle the discard and make it the deck
    #####:  751:      if (state -> deckCount[currentPlayer] < 1) 
branch  0 never executed
branch  1 never executed
        -:  752:      {
    #####:  753:        shuffle(currentPlayer, state);
call    0 never executed
        -:  754:      }
    #####:  755:      drawCard(currentPlayer, state);
call    0 never executed
        -:  756:        // defines the drawn card as the top card
    #####:  757:      cardDrawn = state -> hand[currentPlayer][state -> handCount[currentPlayer] - 1];
    #####:  758:      if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  759:        //drawntreasure++;
        -:  760:        //BUG: increments by 4. Should increment by 1
    #####:  761:        drawntreasure += 4;
        -:  762:      else 
        -:  763:      {
    #####:  764:        temphand[z] = cardDrawn;
        -:  765:            // removes the most recently drawn (top) card
    #####:  766:        state -> handCount[currentPlayer]--;
    #####:  767:        z++;
        -:  768:      }
        -:  769:    }
    #####:  770:    while (z - 1 >= 0) 
branch  0 never executed
branch  1 never executed
        -:  771:    {
        -:  772:        // discard all cards in play that have been drawn
    #####:  773:      state -> discard[currentPlayer][state -> discardCount[currentPlayer]++] = temphand[z - 1];
    #####:  774:      z = z - 1;
        -:  775:    }
    #####:  776:    return 0;
        -:  777:  }
        -:  778:
        -:  779://A2 Refactor
function smithy_card called 0 returned 0% blocks executed 0%
    #####:  780:  int smithy_card(int handPos, struct gameState * state) 
        -:  781:  {
        -:  782:    int i;
    #####:  783:    int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  784:    //BUG: Should only draw 3 cards  
    #####:  785:    for (i = 0; i < 4; i++) 
branch  0 never executed
branch  1 never executed
        -:  786:    {
    #####:  787:      drawCard(currentPlayer, state);
call    0 never executed
        -:  788:    }
        -:  789:    //discard card from hand
    #####:  790:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  791:    return 0;
        -:  792:  }
        -:  793:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  794:  int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState * state, int handPos, int * bonus) {
        -:  795:    int i;
        -:  796:    int j;
        -:  797:    int k;
        -:  798:    int x;
        -:  799:    int index;
    #####:  800:    int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  801:    int nextPlayer = currentPlayer + 1;
        -:  802:
    #####:  803:    int tributeRevealedCards[2] = 
        -:  804:    {
        -:  805:      -1, -1
        -:  806:    };
        -:  807:    int temphand[MAX_HAND]; // moved above the if statement
        -:  808:    //int drawntreasure=0; // commented out as part of A2 Refactor
        -:  809:    //int cardDrawn; // commented out as part of A2 Refactor
        -:  810:    //int z = 0;// this is the counter for the temp hand // commented out as part of A2 Refactor
    #####:  811:    if (nextPlayer > (state -> numPlayers - 1)) 
branch  0 never executed
branch  1 never executed
        -:  812:    {
    #####:  813:      nextPlayer = 0;
        -:  814:    }
        -:  815:
        -:  816:    //uses switch to select card and perform actions
    #####:  817:    switch (card) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  818:    {
        -:  819:        // A2 Refactor  
        -:  820:      case adventurer:
    #####:  821:      return adventurer_card(state);
call    0 never executed
        -:  822:
        -:  823:        // A2 Refactor    
        -:  824:      case council_room:
    #####:  825:      return council_room_card(handPos, state);
call    0 never executed
        -:  826:
        -:  827:        // A2 Refactor  
        -:  828:      case smithy:
    #####:  829:      return smithy_card(handPos, state);
call    0 never executed
        -:  830:
        -:  831:        // A2 Refactor  
        -:  832:      case village:
    #####:  833:      return village_card(handPos, state);
call    0 never executed
        -:  834:
        -:  835:        // A2 Refactor
        -:  836:      case great_hall:
    #####:  837:      return great_hall_card(handPos, state);
call    0 never executed
        -:  838:
        -:  839:      case feast:
        -:  840:        //gain card with cost up to 5
        -:  841:        //Backup hand
    #####:  842:      for (i = 0; i <= state -> handCount[currentPlayer]; i++) 
branch  0 never executed
branch  1 never executed
        -:  843:      {
    #####:  844:            temphand[i] = state -> hand[currentPlayer][i]; //Backup card
    #####:  845:            state -> hand[currentPlayer][i] = -1; //Set to nothing
        -:  846:          }
        -:  847:        //Backup hand
        -:  848:
        -:  849:        //Update Coins for Buy
    #####:  850:          updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  851:        x = 1; //Condition to loop on
    #####:  852:        while (x == 1) 
branch  0 never executed
branch  1 never executed
        -:  853:        { //Buy one card
    #####:  854:          if (supplyCount(choice1, state) <= 0) 
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  855:          {
        -:  856:            if (DEBUG)
        -:  857:              printf("None of that card left, sorry!\n");
        -:  858:
        -:  859:            if (DEBUG) 
        -:  860:            {
        -:  861:              printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  862:            }
        -:  863:          } 
    #####:  864:          else if (state -> coins < getCost(choice1)) 
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  865:          {
    #####:  866:            printf("That card is too expensive!\n");
call    0 never executed
        -:  867:
        -:  868:            if (DEBUG) 
        -:  869:            {
        -:  870:              printf("Coins: %d < %d\n", state -> coins, getCost(choice1));
        -:  871:            }
        -:  872:          } 
        -:  873:          else 
        -:  874:          {
        -:  875:            if (DEBUG) 
        -:  876:            {
        -:  877:              printf("Deck Count: %d\n", state -> handCount[currentPlayer] + state -> deckCount[currentPlayer] + state -> discardCount[currentPlayer]);
        -:  878:            }
        -:  879:
    #####:  880:                gainCard(choice1, state, 0, currentPlayer); //Gain the card
call    0 never executed
    #####:  881:                x = 0; //No more buying cards
        -:  882:
        -:  883:                if (DEBUG) 
        -:  884:                {
        -:  885:                  printf("Deck Count: %d\n", state -> handCount[currentPlayer] + state -> deckCount[currentPlayer] + state -> discardCount[currentPlayer]);
        -:  886:                }
        -:  887:
        -:  888:              }
        -:  889:            }
        -:  890:
        -:  891:        //Reset Hand
    #####:  892:            for (i = 0; i <= state -> handCount[currentPlayer]; i++) 
branch  0 never executed
branch  1 never executed
        -:  893:            {
    #####:  894:              state -> hand[currentPlayer][i] = temphand[i];
    #####:  895:              temphand[i] = -1;
        -:  896:            }
        -:  897:        //Reset Hand
        -:  898:
    #####:  899:            return 0;
        -:  900:
        -:  901:            case gardens:
    #####:  902:            return -1;
        -:  903:
        -:  904:            case mine:
    #####:  905:        j = state -> hand[currentPlayer][choice1]; //store card we will trash
        -:  906:
    #####:  907:        if (state -> hand[currentPlayer][choice1] < copper || state -> hand[currentPlayer][choice1] > gold) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  908:        {
    #####:  909:          return -1;
        -:  910:        }
        -:  911:
    #####:  912:        if (choice2 > treasure_map || choice2 < curse) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  913:        {
    #####:  914:          return -1;
        -:  915:        }
        -:  916:
    #####:  917:        if ((getCost(state -> hand[currentPlayer][choice1]) + 3) > getCost(choice2)) 
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  918:        {
    #####:  919:          return -1;
        -:  920:        }
        -:  921:
    #####:  922:        gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  923:
        -:  924:        //discard card from hand
    #####:  925:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  926:
        -:  927:        //discard trashed card
    #####:  928:        for (i = 0; i < state -> handCount[currentPlayer]; i++) 
branch  0 never executed
branch  1 never executed
        -:  929:        {
    #####:  930:          if (state -> hand[currentPlayer][i] == j) 
branch  0 never executed
branch  1 never executed
        -:  931:          {
    #####:  932:            discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  933:            break;
        -:  934:          }
        -:  935:        }
        -:  936:
    #####:  937:        return 0;
        -:  938:
        -:  939:        case remodel:
    #####:  940:        j = state -> hand[currentPlayer][choice1]; //store card we will trash
        -:  941:
    #####:  942:        if ((getCost(state -> hand[currentPlayer][choice1]) + 2) > getCost(choice2)) 
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  943:        {
    #####:  944:          return -1;
        -:  945:        }
        -:  946:
    #####:  947:        gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  948:
        -:  949:        //discard card from hand
    #####:  950:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  951:
        -:  952:        //discard trashed card
    #####:  953:        for (i = 0; i < state -> handCount[currentPlayer]; i++) 
branch  0 never executed
branch  1 never executed
        -:  954:        {
    #####:  955:          if (state -> hand[currentPlayer][i] == j) 
branch  0 never executed
branch  1 never executed
        -:  956:          {
    #####:  957:            discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  958:            break;
        -:  959:          }
        -:  960:        }
    #####:  961:        return 0;
        -:  962:
        -:  963:        case baron:
    #####:  964:        state -> numBuys++; //Increase buys by 1!
    #####:  965:        if (choice1 > 0) 
branch  0 never executed
branch  1 never executed
        -:  966:        { //Boolean true or going to discard an estate
    #####:  967:            int p = 0; //Iterator for hand!
    #####:  968:            int card_not_discarded = 1; //Flag for discard set!
    #####:  969:            while (card_not_discarded) 
branch  0 never executed
branch  1 never executed
        -:  970:            {
    #####:  971:                if (state -> hand[currentPlayer][p] == estate) 
branch  0 never executed
branch  1 never executed
        -:  972:                { //Found an estate card!
    #####:  973:                    state -> coins += 4; //Add 4 coins to the amount of coins
    #####:  974:                    state -> discard[currentPlayer][state -> discardCount[currentPlayer]] = state -> hand[currentPlayer][p];
    #####:  975:                    state -> discardCount[currentPlayer]++;
    #####:  976:                    for (; p < state -> handCount[currentPlayer]; p++) 
branch  0 never executed
branch  1 never executed
        -:  977:                    {
    #####:  978:                      state -> hand[currentPlayer][p] = state -> hand[currentPlayer][p + 1];
        -:  979:                    }
    #####:  980:                    state -> hand[currentPlayer][state -> handCount[currentPlayer]] = -1;
    #####:  981:                    state -> handCount[currentPlayer]--;
    #####:  982:                    card_not_discarded = 0; //Exit the loop
        -:  983:                  } 
    #####:  984:                  else if (p > state -> handCount[currentPlayer]) 
branch  0 never executed
branch  1 never executed
        -:  985:                  {
        -:  986:                    if (DEBUG) 
        -:  987:                    {
        -:  988:                      printf("No estate cards in your hand, invalid choice\n");
        -:  989:                      printf("Must gain an estate if there are any\n");
        -:  990:                    }
    #####:  991:                    if (supplyCount(estate, state) > 0) 
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  992:                    {
    #####:  993:                      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  994:                        state -> supplyCount[estate]--; //Decrement estates
    #####:  995:                        if (supplyCount(estate, state) == 0) 
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  996:                        {
    #####:  997:                          isGameOver(state);
call    0 never executed
        -:  998:                        }
        -:  999:                      }
    #####: 1000:                    card_not_discarded = 0; //Exit the loop
        -: 1001:                  } 
        -: 1002:                  else 
        -: 1003:                  {
    #####: 1004:                    p++; //Next card
        -: 1005:                  }
        -: 1006:                }
        -: 1007:              } 
        -: 1008:              else 
        -: 1009:              {
    #####: 1010:                if (supplyCount(estate, state) > 0) 
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1011:                {
    #####: 1012:                gainCard(estate, state, 0, currentPlayer); //Gain an estate
call    0 never executed
    #####: 1013:                state -> supplyCount[estate]--; //Decrement Estates
    #####: 1014:                if (supplyCount(estate, state) == 0) 
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1015:                {
    #####: 1016:                  isGameOver(state);
call    0 never executed
        -: 1017:                }
        -: 1018:              }
        -: 1019:            }
    #####: 1020:            return 0;
        -: 1021:
        -: 1022:            case minion:
        -: 1023:        //+1 action
    #####: 1024:            state -> numActions++;
        -: 1025:
        -: 1026:        //discard card from hand
    #####: 1027:            discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1028:
    #####: 1029:        if (choice1) //+2 coins
branch  0 never executed
branch  1 never executed
        -: 1030:        {
    #####: 1031:          state -> coins = state -> coins + 2;
    #####: 1032:        } else if (choice2) //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -: 1033:        {
        -: 1034:            //discard hand
    #####: 1035:          while (numHandCards(state) > 0) 
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1036:          {
    #####: 1037:            discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1038:          }
        -: 1039:
        -: 1040:            //draw 4
    #####: 1041:          for (i = 0; i < 4; i++) 
branch  0 never executed
branch  1 never executed
        -: 1042:          {
    #####: 1043:            drawCard(currentPlayer, state);
call    0 never executed
        -: 1044:          }
        -: 1045:
        -: 1046:            //other players discard hand and redraw if hand size > 4
    #####: 1047:          for (i = 0; i < state -> numPlayers; i++) 
branch  0 never executed
branch  1 never executed
        -: 1048:          {
    #####: 1049:            if (i != currentPlayer) 
branch  0 never executed
branch  1 never executed
        -: 1050:            {
    #####: 1051:              if (state -> handCount[i] > 4) 
branch  0 never executed
branch  1 never executed
        -: 1052:              {
        -: 1053:                        //discard hand
    #####: 1054:                while (state -> handCount[i] > 0) 
branch  0 never executed
branch  1 never executed
        -: 1055:                {
    #####: 1056:                  discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1057:                }
        -: 1058:                        //draw 4
    #####: 1059:                for (j = 0; j < 4; j++) 
branch  0 never executed
branch  1 never executed
        -: 1060:                {
    #####: 1061:                  drawCard(i, state);
call    0 never executed
        -: 1062:                }
        -: 1063:              }
        -: 1064:            }
        -: 1065:          }
        -: 1066:        }
    #####: 1067:        return 0;
        -: 1068:
        -: 1069:        case steward:
    #####: 1070:        if (choice1 == 1) 
branch  0 never executed
branch  1 never executed
        -: 1071:        {
        -: 1072:          //+2 cards
    #####: 1073:          drawCard(currentPlayer, state);
call    0 never executed
    #####: 1074:          drawCard(currentPlayer, state);
call    0 never executed
        -: 1075:        } 
    #####: 1076:        else if (choice1 == 2) 
branch  0 never executed
branch  1 never executed
        -: 1077:        {
        -: 1078:          //+2 coins
    #####: 1079:          state -> coins = state -> coins + 2;
        -: 1080:        } 
        -: 1081:        else 
        -: 1082:        {
        -: 1083:          //trash 2 cards in hand
    #####: 1084:          discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1085:          discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1086:        }
        -: 1087:
        -: 1088:        //discard card from hand
    #####: 1089:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1090:        return 0;
        -: 1091:
        -: 1092:        case tribute:
    #####: 1093:        if ((state -> discardCount[nextPlayer] + state -> deckCount[nextPlayer]) <= 1) 
branch  0 never executed
branch  1 never executed
        -: 1094:        {
    #####: 1095:          if (state -> deckCount[nextPlayer] > 0) 
branch  0 never executed
branch  1 never executed
        -: 1096:          {
    #####: 1097:            tributeRevealedCards[0] = state -> deck[nextPlayer][state -> deckCount[nextPlayer] - 1];
    #####: 1098:            state -> deckCount[nextPlayer]--;
        -: 1099:          } 
    #####: 1100:          else if (state -> discardCount[nextPlayer] > 0) 
branch  0 never executed
branch  1 never executed
        -: 1101:          {
    #####: 1102:            tributeRevealedCards[0] = state -> discard[nextPlayer][state -> discardCount[nextPlayer] - 1];
    #####: 1103:            state -> discardCount[nextPlayer]--;
        -: 1104:          } 
        -: 1105:          else 
        -: 1106:          {
        -: 1107:                //No Card to Reveal
        -: 1108:            if (DEBUG) 
        -: 1109:            {
        -: 1110:              printf("No cards to reveal\n");
        -: 1111:            }
        -: 1112:          }
        -: 1113:        } 
        -: 1114:        else 
        -: 1115:        {
    #####: 1116:          if (state -> deckCount[nextPlayer] == 0) 
branch  0 never executed
branch  1 never executed
        -: 1117:          {
    #####: 1118:            for (i = 0; i < state -> discardCount[nextPlayer]; i++) 
branch  0 never executed
branch  1 never executed
        -: 1119:            {
    #####: 1120:                    state -> deck[nextPlayer][i] = state -> discard[nextPlayer][i]; //Move to deck
    #####: 1121:                    state -> deckCount[nextPlayer]++;
    #####: 1122:                    state -> discard[nextPlayer][i] = -1;
    #####: 1123:                    state -> discardCount[nextPlayer]--;
        -: 1124:                  }
        -: 1125:
    #####: 1126:                shuffle(nextPlayer, state); //Shuffle the deck
call    0 never executed
        -: 1127:              }
    #####: 1128:              tributeRevealedCards[0] = state -> deck[nextPlayer][state -> deckCount[nextPlayer] - 1];
    #####: 1129:              state -> deck[nextPlayer][state -> deckCount[nextPlayer]--] = -1;
    #####: 1130:              state -> deckCount[nextPlayer]--;
    #####: 1131:              tributeRevealedCards[1] = state -> deck[nextPlayer][state -> deckCount[nextPlayer] - 1];
    #####: 1132:              state -> deck[nextPlayer][state -> deckCount[nextPlayer]--] = -1;
    #####: 1133:              state -> deckCount[nextPlayer]--;
        -: 1134:            }
        -: 1135:
    #####: 1136:        if (tributeRevealedCards[0] == tributeRevealedCards[1]) 
branch  0 never executed
branch  1 never executed
        -: 1137:        { //If we have a duplicate card, just drop one 
    #####: 1138:          state -> playedCards[state -> playedCardCount] = tributeRevealedCards[1];
    #####: 1139:          state -> playedCardCount++;
    #####: 1140:          tributeRevealedCards[1] = -1;
        -: 1141:        }
        -: 1142:
    #####: 1143:        for (i = 0; i <= 2; i++) 
branch  0 never executed
branch  1 never executed
        -: 1144:        {
    #####: 1145:            if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1146:            { //Treasure cards
    #####: 1147:              state -> coins += 2;
        -: 1148:            } 
    #####: 1149:            else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
        -: 1150:            { //Victory Card Found
    #####: 1151:              drawCard(currentPlayer, state);
call    0 never executed
    #####: 1152:              drawCard(currentPlayer, state);
call    0 never executed
        -: 1153:            } 
        -: 1154:            else 
        -: 1155:            { //Action Card
    #####: 1156:              state -> numActions = state -> numActions + 2;
        -: 1157:            }
        -: 1158:          }
        -: 1159:
    #####: 1160:          return 0;
        -: 1161:
        -: 1162:          case ambassador:
    #####: 1163:        j = 0; //used to check if player has enough cards to discard
        -: 1164:
    #####: 1165:        if (choice2 > 2 || choice2 < 0) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1166:        {
    #####: 1167:          return -1;
        -: 1168:        }
        -: 1169:
    #####: 1170:        if (choice1 == handPos) 
branch  0 never executed
branch  1 never executed
        -: 1171:        {
    #####: 1172:          return -1;
        -: 1173:        }
        -: 1174:
    #####: 1175:        for (i = 0; i < state -> handCount[currentPlayer]; i++) 
branch  0 never executed
branch  1 never executed
        -: 1176:        {
    #####: 1177:          if (i != handPos && i == state -> hand[currentPlayer][choice1] && i != choice1) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1178:          {
    #####: 1179:            j++;
        -: 1180:          }
        -: 1181:        }
    #####: 1182:        if (j < choice2) 
branch  0 never executed
branch  1 never executed
        -: 1183:        {
    #####: 1184:          return -1;
        -: 1185:        }
        -: 1186:
        -: 1187:        if (DEBUG)
        -: 1188:          printf("Player %d reveals card number: %d\n", currentPlayer, state -> hand[currentPlayer][choice1]);
        -: 1189:
        -: 1190:        //increase supply count for choosen card by amount being discarded
    #####: 1191:        state -> supplyCount[state -> hand[currentPlayer][choice1]] += choice2;
        -: 1192:
        -: 1193:        //each other player gains a copy of revealed card
    #####: 1194:        for (i = 0; i < state -> numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1195:          if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####: 1196:            gainCard(state -> hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1197:          }
        -: 1198:        }
        -: 1199:
        -: 1200:        //discard played card from hand
    #####: 1201:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1202:
        -: 1203:        //trash copies of cards returned to supply
    #####: 1204:        for (j = 0; j < choice2; j++) {
branch  0 never executed
branch  1 never executed
    #####: 1205:          for (i = 0; i < state -> handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1206:            if (state -> hand[currentPlayer][i] == state -> hand[currentPlayer][choice1]) {
branch  0 never executed
branch  1 never executed
    #####: 1207:              discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1208:              break;
        -: 1209:            }
        -: 1210:          }
        -: 1211:        }
        -: 1212:
    #####: 1213:        return 0;
        -: 1214:
        -: 1215:        case cutpurse:
        -: 1216:
    #####: 1217:        updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1218:        for (i = 0; i < state -> numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1219:          if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####: 1220:            for (j = 0; j < state -> handCount[i]; j++) {
branch  0 never executed
branch  1 never executed
    #####: 1221:              if (state -> hand[i][j] == copper) {
branch  0 never executed
branch  1 never executed
    #####: 1222:                discardCard(j, i, state, 0);
call    0 never executed
    #####: 1223:                break;
        -: 1224:              }
    #####: 1225:              if (j == state -> handCount[i]) {
branch  0 never executed
branch  1 never executed
    #####: 1226:                for (k = 0; k < state -> handCount[i]; k++) {
branch  0 never executed
branch  1 never executed
        -: 1227:                  if (DEBUG)
        -: 1228:                    printf("Player %d reveals card number %d\n", i, state -> hand[i][k]);
        -: 1229:                }
    #####: 1230:                break;
        -: 1231:              }
        -: 1232:            }
        -: 1233:
        -: 1234:          }
        -: 1235:
        -: 1236:        }
        -: 1237:
        -: 1238:        //discard played card from hand
    #####: 1239:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1240:
    #####: 1241:        return 0;
        -: 1242:
        -: 1243:        case embargo:
        -: 1244:        //+2 Coins
    #####: 1245:        state -> coins = state -> coins + 2;
        -: 1246:
        -: 1247:        //see if selected pile is in play
    #####: 1248:        if (state -> supplyCount[choice1] == -1) {
branch  0 never executed
branch  1 never executed
    #####: 1249:          return -1;
        -: 1250:        }
        -: 1251:
        -: 1252:        //add embargo token to selected supply pile
    #####: 1253:        state -> embargoTokens[choice1]++;
        -: 1254:
        -: 1255:        //trash card
    #####: 1256:        discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1257:        return 0;
        -: 1258:
        -: 1259:        case outpost:
        -: 1260:        //set outpost flag
    #####: 1261:        state -> outpostPlayed++;
        -: 1262:
        -: 1263:        //discard card
    #####: 1264:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1265:        return 0;
        -: 1266:
        -: 1267:        case salvager:
        -: 1268:        //+1 buy
    #####: 1269:        state -> numBuys++;
        -: 1270:
    #####: 1271:        if (choice1) {
branch  0 never executed
branch  1 never executed
        -: 1272:            //gain coins equal to trashed card
    #####: 1273:          state -> coins = state -> coins + getCost(handCard(choice1, state));
call    0 never executed
call    1 never executed
        -: 1274:            //trash card
    #####: 1275:          discardCard(choice1, currentPlayer, state, 1);
call    0 never executed
        -: 1276:        }
        -: 1277:
        -: 1278:        //discard card
    #####: 1279:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1280:        return 0;
        -: 1281:
        -: 1282:        case sea_hag:
    #####: 1283:        for (i = 0; i < state -> numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1284:          if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####: 1285:            state -> discard[i][state -> discardCount[i]] = state -> deck[i][state -> deckCount[i]--];
    #####: 1286:            state -> deckCount[i]--;
    #####: 1287:            state -> discardCount[i]++;
    #####: 1288:                state -> deck[i][state -> deckCount[i]--] = curse; //Top card now a curse
        -: 1289:              }
        -: 1290:            }
    #####: 1291:            return 0;
        -: 1292:
        -: 1293:            case treasure_map:
        -: 1294:        //search hand for another treasure_map
    #####: 1295:            index = -1;
    #####: 1296:            for (i = 0; i < state -> handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1297:              if (state -> hand[currentPlayer][i] == treasure_map && i != handPos) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1298:                index = i;
    #####: 1299:                break;
        -: 1300:              }
        -: 1301:            }
    #####: 1302:            if (index > -1) {
branch  0 never executed
branch  1 never executed
        -: 1303:            //trash both treasure cards
    #####: 1304:              discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1305:              discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1306:
        -: 1307:            //gain 4 Gold cards
    #####: 1308:              for (i = 0; i < 4; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1309:                gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1310:              }
        -: 1311:
        -: 1312:            //return success
    #####: 1313:              return 1;
        -: 1314:            }
        -: 1315:
        -: 1316:        //no second treasure_map found in hand
    #####: 1317:            return -1;
        -: 1318:          }
        -: 1319:
    #####: 1320:          return -1;
        -: 1321:        }
        -: 1322:
function discardCard called 0 returned 0% blocks executed 0%
    #####: 1323:        int discardCard(int handPos, int currentPlayer, struct gameState * state, int trashFlag) {
        -: 1324:
        -: 1325:    //if card is not trashed, added to Played pile 
    #####: 1326:          if (trashFlag < 1) {
branch  0 never executed
branch  1 never executed
        -: 1327:        //add card to played pile
    #####: 1328:            state -> playedCards[state -> playedCardCount] = state -> hand[currentPlayer][handPos];
    #####: 1329:            state -> playedCardCount++;
        -: 1330:          }
        -: 1331:
        -: 1332:    //set played card to -1
    #####: 1333:          state -> hand[currentPlayer][handPos] = -1;
        -: 1334:
        -: 1335:    //remove card from player's hand
    #####: 1336:    if (handPos == (state -> handCount[currentPlayer] - 1)) //last card in hand array is played
branch  0 never executed
branch  1 never executed
        -: 1337:    {
        -: 1338:        //reduce number of cards in hand
    #####: 1339:      state -> handCount[currentPlayer]--;
    #####: 1340:    } else if (state -> handCount[currentPlayer] == 1) //only one card in hand
branch  0 never executed
branch  1 never executed
        -: 1341:    {
        -: 1342:        //reduce number of cards in hand
    #####: 1343:      state -> handCount[currentPlayer]--;
        -: 1344:    } else {
        -: 1345:        //replace discarded card with last card in hand
    #####: 1346:      state -> hand[currentPlayer][handPos] = state -> hand[currentPlayer][(state -> handCount[currentPlayer] - 1)];
        -: 1347:        //set last card to -1
    #####: 1348:      state -> hand[currentPlayer][state -> handCount[currentPlayer] - 1] = -1;
        -: 1349:        //reduce number of cards in hand
    #####: 1350:      state -> handCount[currentPlayer]--;
        -: 1351:    }
        -: 1352:
    #####: 1353:    return 0;
        -: 1354:  }
        -: 1355:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1356:  int gainCard(int supplyPos, struct gameState * state, int toFlag, int player) {
        -: 1357:    //Note: supplyPos is enum of choosen card
        -: 1358:
        -: 1359:    //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1360:    if (supplyCount(supplyPos, state) < 1) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1361:      return -1;
        -: 1362:    }
        -: 1363:
        -: 1364:    //added card for [whoseTurn] current player:
        -: 1365:    // toFlag = 0 : add to discard
        -: 1366:    // toFlag = 1 : add to deck
        -: 1367:    // toFlag = 2 : add to hand
        -: 1368:
    #####: 1369:    if (toFlag == 1) {
branch  0 never executed
branch  1 never executed
    #####: 1370:      state -> deck[player][state -> deckCount[player]] = supplyPos;
    #####: 1371:      state -> deckCount[player]++;
    #####: 1372:    } else if (toFlag == 2) {
branch  0 never executed
branch  1 never executed
    #####: 1373:      state -> hand[player][state -> handCount[player]] = supplyPos;
    #####: 1374:      state -> handCount[player]++;
        -: 1375:    } else {
    #####: 1376:      state -> discard[player][state -> discardCount[player]] = supplyPos;
    #####: 1377:      state -> discardCount[player]++;
        -: 1378:    }
        -: 1379:
        -: 1380:    //decrease number in supply pile
    #####: 1381:    state -> supplyCount[supplyPos]--;
        -: 1382:
    #####: 1383:    return 0;
        -: 1384:  }
        -: 1385:
function updateCoins called 3 returned 100% blocks executed 82%
        3: 1386:  int updateCoins(int player, struct gameState * state, int bonus) {
        -: 1387:    int i;
        -: 1388:
        -: 1389:    //reset coin count
        3: 1390:    state -> coins = 0;
        -: 1391:
        -: 1392:    //add coins for each Treasure card in player's hand
       18: 1393:    for (i = 0; i < state -> handCount[player]; i++) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       15: 1394:      if (state -> hand[player][i] == copper) {
branch  0 taken 40% (fallthrough)
branch  1 taken 60%
        6: 1395:        state -> coins += 1;
        9: 1396:      } else if (state -> hand[player][i] == silver) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1397:        state -> coins += 2;
        9: 1398:      } else if (state -> hand[player][i] == gold) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1399:        state -> coins += 3;
        -: 1400:      }
        -: 1401:    }
        -: 1402:
        -: 1403:    //add bonus
        3: 1404:    state -> coins += bonus;
        -: 1405:
        3: 1406:    return 0;
        -: 1407:  }
        -: 1408:
        -: 1409://end of dominion.c

Testing: getCost()

curse: PASSED
estate: PASSED
duchy: PASSED
province: PASSED
copper: PASSED
silver: PASSED
gold: PASSED
adventurer: PASSED
council_room: PASSED
feast: PASSED
gardens: PASSED
mine: PASSED
remodel: PASSED
smithy: PASSED
village: PASSED
baron: PASSED
Total Number of Failures: 0

Function 'updateCoins'
Lines executed:0.00% of 11
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'gainCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 1

Function 'discardCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'cardEffect'
Lines executed:0.00% of 206
Branches executed:0.00% of 179
Taken at least once:0.00% of 179
Calls executed:0.00% of 58

Function 'smithy_card'
Lines executed:0.00% of 6
Branches executed:0.00% of 2
Taken at least once:0.00% of 2
Calls executed:0.00% of 3

Function 'adventurer_card'
Lines executed:0.00% of 18
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
Calls executed:0.00% of 3

Function 'council_room_card'
Lines executed:0.00% of 9
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 4

Function 'village_card'
Lines executed:0.00% of 6
No branches
Calls executed:0.00% of 3

Function 'great_hall_card'
Lines executed:0.00% of 6
No branches
Calls executed:0.00% of 3

Function 'getCost'
Lines executed:60.00% of 30
Branches executed:100.00% of 28
Taken at least once:57.14% of 28
No calls

Function 'drawCard'
Lines executed:0.00% of 22
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 1

Function 'getWinners'
Lines executed:0.00% of 24
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
Calls executed:0.00% of 2

Function 'scoreFor'
Lines executed:0.00% of 42
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
Calls executed:0.00% of 3

Function 'isGameOver'
Lines executed:0.00% of 10
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'endTurn'
Lines executed:0.00% of 20
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'whoseTurn'
Lines executed:0.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 9
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'supplyCount'
Lines executed:0.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 3
No branches
Calls executed:0.00% of 1

Function 'numHandCards'
Lines executed:0.00% of 2
No branches
Calls executed:0.00% of 1

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 4

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
Calls executed:0.00% of 3

Function 'shuffle'
Lines executed:0.00% of 16
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
Calls executed:0.00% of 2

Function 'initializeGame'
Lines executed:0.00% of 62
Branches executed:0.00% of 46
Taken at least once:0.00% of 46
Calls executed:0.00% of 5

Function 'kingdomCards'
Lines executed:0.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:0.00% of 3
No branches
No calls

Function 'compare'
Lines executed:0.00% of 6
Branches executed:0.00% of 4
Taken at least once:0.00% of 4
No calls

File 'dominion.c'
Lines executed:3.10% of 581
Branches executed:6.71% of 417
Taken at least once:3.84% of 417
Calls executed:0.00% of 100
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h> 
        -:    5:#include <math.h> 
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 0 returned 0% blocks executed 0%
    #####:    8:int compare(const void * a,
        -:    9:  const void * b) {
    #####:   10:  if ( * (int * ) a > * (int * ) b)
branch  0 never executed
branch  1 never executed
    #####:   11:    return 1;
    #####:   12:  if ( * (int * ) a < * (int * ) b)
branch  0 never executed
branch  1 never executed
    #####:   13:    return -1;
    #####:   14:  return 0;
        -:   15:}
        -:   16:
function newGame called 0 returned 0% blocks executed 0%
    #####:   17:struct gameState * newGame() {
    #####:   18:  struct gameState * g = malloc(sizeof(struct gameState));
    #####:   19:  return g;
        -:   20:}
        -:   21:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   22:int * kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   23:  int k8, int k9, int k10) {
    #####:   24:  int * k = malloc(10 * sizeof(int));
    #####:   25:  k[0] = k1;
    #####:   26:  k[1] = k2;
    #####:   27:  k[2] = k3;
    #####:   28:  k[3] = k4;
    #####:   29:  k[4] = k5;
    #####:   30:  k[5] = k6;
    #####:   31:  k[6] = k7;
    #####:   32:  k[7] = k8;
    #####:   33:  k[8] = k9;
    #####:   34:  k[9] = k10;
    #####:   35:  return k;
        -:   36:}
        -:   37:
function initializeGame called 0 returned 0% blocks executed 0%
    #####:   38:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   39:  struct gameState * state) {
        -:   40:
        -:   41:  int i;
        -:   42:  int j;
        -:   43:  int it;
        -:   44:    //set up random number generator
    #####:   45:  SelectStream(1);
call    0 never executed
    #####:   46:  PutSeed((long) randomSeed);
call    0 never executed
        -:   47:
        -:   48:    //check number of players
    #####:   49:  if (numPlayers > MAX_PLAYERS || numPlayers < 2) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   50:    return -1;
        -:   51:  }
        -:   52:
        -:   53:    //set number of players
    #####:   54:  state -> numPlayers = numPlayers;
        -:   55:
        -:   56:    //check selected kingdom cards are different
    #####:   57:  for (i = 0; i < 10; i++) {
branch  0 never executed
branch  1 never executed
    #####:   58:    for (j = 0; j < 10; j++) {
branch  0 never executed
branch  1 never executed
    #####:   59:      if (j != i && kingdomCards[j] == kingdomCards[i]) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   60:        return -1;
        -:   61:      }
        -:   62:    }
        -:   63:  }
        -:   64:
        -:   65:    //initialize supply
        -:   66:    ///////////////////////////////
        -:   67:
        -:   68:    //set number of Curse cards
    #####:   69:  if (numPlayers == 2) {
branch  0 never executed
branch  1 never executed
    #####:   70:    state -> supplyCount[curse] = 10;
    #####:   71:  } else if (numPlayers == 3) {
branch  0 never executed
branch  1 never executed
    #####:   72:    state -> supplyCount[curse] = 20;
        -:   73:  } else {
    #####:   74:    state -> supplyCount[curse] = 30;
        -:   75:  }
        -:   76:
        -:   77:    //set number of Victory cards
    #####:   78:  if (numPlayers == 2) {
branch  0 never executed
branch  1 never executed
    #####:   79:    state -> supplyCount[estate] = 8;
    #####:   80:    state -> supplyCount[duchy] = 8;
    #####:   81:    state -> supplyCount[province] = 8;
        -:   82:  } else {
    #####:   83:    state -> supplyCount[estate] = 12;
    #####:   84:    state -> supplyCount[duchy] = 12;
    #####:   85:    state -> supplyCount[province] = 12;
        -:   86:  }
        -:   87:
        -:   88:    //set number of Treasure cards
    #####:   89:  state -> supplyCount[copper] = 60 - (7 * numPlayers);
    #####:   90:  state -> supplyCount[silver] = 40;
    #####:   91:  state -> supplyCount[gold] = 30;
        -:   92:
        -:   93:    //set number of Kingdom cards
    #####:   94:    for (i = adventurer; i <= treasure_map; i++) //loop all cards
branch  0 never executed
branch  1 never executed
        -:   95:    {
    #####:   96:        for (j = 0; j < 10; j++) //loop chosen cards
branch  0 never executed
branch  1 never executed
        -:   97:        {
    #####:   98:          if (kingdomCards[j] == i) {
branch  0 never executed
branch  1 never executed
        -:   99:                //check if card is a 'Victory' Kingdom card
    #####:  100:            if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  101:              if (numPlayers == 2) {
branch  0 never executed
branch  1 never executed
    #####:  102:                state -> supplyCount[i] = 8;
        -:  103:              } else {
    #####:  104:                state -> supplyCount[i] = 12;
        -:  105:              }
        -:  106:            } else {
    #####:  107:              state -> supplyCount[i] = 10;
        -:  108:            }
    #####:  109:            break;
        -:  110:            } else //card is not in the set choosen for the game
        -:  111:            {
    #####:  112:              state -> supplyCount[i] = -1;
        -:  113:            }
        -:  114:          }
        -:  115:
        -:  116:        }
        -:  117:
        -:  118:    ////////////////////////
        -:  119:    //supply intilization complete
        -:  120:
        -:  121:    //set player decks
    #####:  122:        for (i = 0; i < numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####:  123:          state -> deckCount[i] = 0;
    #####:  124:          for (j = 0; j < 3; j++) {
branch  0 never executed
branch  1 never executed
    #####:  125:            state -> deck[i][j] = estate;
    #####:  126:            state -> deckCount[i]++;
        -:  127:          }
    #####:  128:          for (j = 3; j < 10; j++) {
branch  0 never executed
branch  1 never executed
    #####:  129:            state -> deck[i][j] = copper;
    #####:  130:            state -> deckCount[i]++;
        -:  131:          }
        -:  132:        }
        -:  133:
        -:  134:    //shuffle player decks
    #####:  135:        for (i = 0; i < numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####:  136:          if (shuffle(i, state) < 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  137:            return -1;
        -:  138:          }
        -:  139:        }
        -:  140:
        -:  141:    //draw player hands
    #####:  142:        for (i = 0; i < numPlayers; i++) {
branch  0 never executed
branch  1 never executed
        -:  143:        //initialize hand size to zero
    #####:  144:          state -> handCount[i] = 0;
    #####:  145:          state -> discardCount[i] = 0;
        -:  146:        //draw 5 cards
        -:  147:        // for (j = 0; j < 5; j++)
        -:  148:        //  {
        -:  149:        //    drawCard(i, state);
        -:  150:        //  }
        -:  151:        }
        -:  152:
        -:  153:    //set embargo tokens to 0 for all supply piles
    #####:  154:        for (i = 0; i <= treasure_map; i++) {
branch  0 never executed
branch  1 never executed
    #####:  155:          state -> embargoTokens[i] = 0;
        -:  156:        }
        -:  157:
        -:  158:    //initialize first player's turn
    #####:  159:        state -> outpostPlayed = 0;
    #####:  160:        state -> phase = 0;
    #####:  161:        state -> numActions = 1;
    #####:  162:        state -> numBuys = 1;
    #####:  163:        state -> playedCardCount = 0;
    #####:  164:        state -> whoseTurn = 0;
    #####:  165:        state -> handCount[state -> whoseTurn] = 0;
        -:  166:    //int it; move to top
        -:  167:
        -:  168:    //Moved draw cards to here, only drawing at the start of a turn
    #####:  169:        for (it = 0; it < 5; it++) {
branch  0 never executed
branch  1 never executed
    #####:  170:          drawCard(state -> whoseTurn, state);
call    0 never executed
        -:  171:        }
        -:  172:
    #####:  173:        updateCoins(state -> whoseTurn, state, 0);
call    0 never executed
        -:  174:
    #####:  175:        return 0;
        -:  176:      }
        -:  177:
function shuffle called 0 returned 0% blocks executed 0%
    #####:  178:      int shuffle(int player, struct gameState * state) {
        -:  179:
        -:  180:        int newDeck[MAX_DECK];
    #####:  181:        int newDeckPos = 0;
        -:  182:        int card;
        -:  183:        int i;
        -:  184:
    #####:  185:        if (state -> deckCount[player] < 1)
branch  0 never executed
branch  1 never executed
    #####:  186:          return -1;
    #####:  187:        qsort((void * )(state -> deck[player]), state -> deckCount[player], sizeof(int), compare);
call    0 never executed
        -:  188:    /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  189:
    #####:  190:        while (state -> deckCount[player] > 0) {
branch  0 never executed
branch  1 never executed
    #####:  191:          card = floor(Random() * state -> deckCount[player]);
call    0 never executed
    #####:  192:          newDeck[newDeckPos] = state -> deck[player][card];
    #####:  193:          newDeckPos++;
    #####:  194:          for (i = card; i < state -> deckCount[player] - 1; i++) {
branch  0 never executed
branch  1 never executed
    #####:  195:            state -> deck[player][i] = state -> deck[player][i + 1];
        -:  196:          }
    #####:  197:          state -> deckCount[player]--;
        -:  198:        }
    #####:  199:        for (i = 0; i < newDeckPos; i++) {
branch  0 never executed
branch  1 never executed
    #####:  200:          state -> deck[player][i] = newDeck[i];
    #####:  201:          state -> deckCount[player]++;
        -:  202:        }
        -:  203:
    #####:  204:        return 0;
        -:  205:      }
        -:  206:
function playCard called 0 returned 0% blocks executed 0%
    #####:  207:      int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState * state) {
        -:  208:        int card;
    #####:  209:    int coin_bonus = 0; //tracks coins gain from actions
        -:  210:
        -:  211:    //check if it is the right phase
    #####:  212:    if (state -> phase != 0) {
branch  0 never executed
branch  1 never executed
    #####:  213:      return -1;
        -:  214:    }
        -:  215:
        -:  216:    //check if player has enough actions
    #####:  217:    if (state -> numActions < 1) {
branch  0 never executed
branch  1 never executed
    #####:  218:      return -1;
        -:  219:    }
        -:  220:
        -:  221:    //get card played
    #####:  222:    card = handCard(handPos, state);
call    0 never executed
        -:  223:
        -:  224:    //check if selected card is an action
    #####:  225:    if (card < adventurer || card > treasure_map) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  226:      return -1;
        -:  227:    }
        -:  228:
        -:  229:    //play card
    #####:  230:    if (cardEffect(card, choice1, choice2, choice3, state, handPos, & coin_bonus) < 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  231:      return -1;
        -:  232:    }
        -:  233:
        -:  234:    //reduce number of actions
    #####:  235:    state -> numActions--;
        -:  236:
        -:  237:    //update coins (Treasure cards may be added with card draws)
    #####:  238:    updateCoins(state -> whoseTurn, state, coin_bonus);
call    0 never executed
        -:  239:
    #####:  240:    return 0;
        -:  241:  }
        -:  242:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  243:  int buyCard(int supplyPos, struct gameState * state) {
        -:  244:    int who;
        -:  245:    if (DEBUG) {
        -:  246:      printf("Entering buyCard...\n");
        -:  247:    }
        -:  248:
        -:  249:    // I don't know what to do about the phase thing.
        -:  250:
    #####:  251:    who = state -> whoseTurn;
        -:  252:
    #####:  253:    if (state -> numBuys < 1) {
branch  0 never executed
branch  1 never executed
        -:  254:      if (DEBUG)
        -:  255:        printf("You do not have any buys left\n");
    #####:  256:      return -1;
    #####:  257:    } else if (supplyCount(supplyPos, state) < 1) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  258:      if (DEBUG)
        -:  259:        printf("There are not any of that type of card left\n");
    #####:  260:      return -1;
    #####:  261:    } else if (state -> coins < getCost(supplyPos)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  262:      if (DEBUG)
        -:  263:        printf("You do not have enough money to buy that. You have %d coins.\n", state -> coins);
    #####:  264:      return -1;
        -:  265:    } else {
    #####:  266:      state -> phase = 1;
        -:  267:        //state->supplyCount[supplyPos]--;
    #####:  268:        gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  269:
    #####:  270:        state -> coins = (state -> coins) - (getCost(supplyPos));
call    0 never executed
    #####:  271:        state -> numBuys--;
        -:  272:        if (DEBUG)
        -:  273:          printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state -> numBuys, state -> coins);
        -:  274:      }
        -:  275:
        -:  276:    //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  277:    //state->discardCount[who]++;
        -:  278:
    #####:  279:      return 0;
        -:  280:    }
        -:  281:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  282:    int numHandCards(struct gameState * state) 
        -:  283:    {
    #####:  284:      return state -> handCount[whoseTurn(state)];
call    0 never executed
        -:  285:    }
        -:  286:
function handCard called 0 returned 0% blocks executed 0%
    #####:  287:    int handCard(int handPos, struct gameState * state) 
        -:  288:    {
    #####:  289:      int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  290:      return state -> hand[currentPlayer][handPos];
        -:  291:    }
        -:  292:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  293:    int supplyCount(int card, struct gameState * state) 
        -:  294:    {
    #####:  295:      return state -> supplyCount[card];
        -:  296:    }
        -:  297:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  298:    int fullDeckCount(int player, int card, struct gameState * state) 
        -:  299:    {
        -:  300:      int i;
    #####:  301:      int count = 0;
        -:  302:
    #####:  303:      for (i = 0; i < state -> deckCount[player]; i++) 
branch  0 never executed
branch  1 never executed
        -:  304:      {
    #####:  305:        if (state -> deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  306:      }
        -:  307:
    #####:  308:      for (i = 0; i < state -> handCount[player]; i++) 
branch  0 never executed
branch  1 never executed
        -:  309:      {
    #####:  310:        if (state -> hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  311:      }
        -:  312:
    #####:  313:      for (i = 0; i < state -> discardCount[player]; i++) 
branch  0 never executed
branch  1 never executed
        -:  314:      {
    #####:  315:        if (state -> discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  316:      }
        -:  317:
    #####:  318:      return count;
        -:  319:    }
        -:  320:
function whoseTurn called 0 returned 0% blocks executed 0%
    #####:  321:    int whoseTurn(struct gameState * state) 
        -:  322:    {
    #####:  323:      return state -> whoseTurn;
        -:  324:    }
        -:  325:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  326:    int endTurn(struct gameState * state) 
        -:  327:    {
        -:  328:      int k;
        -:  329:      int i;
    #####:  330:      int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  331:
        -:  332:    //Discard hand
    #####:  333:      for (i = 0; i < state -> handCount[currentPlayer]; i++) 
branch  0 never executed
branch  1 never executed
        -:  334:      {
    #####:  335:        state -> discard[currentPlayer][state -> discardCount[currentPlayer]++] = state -> hand[currentPlayer][i]; //Discard
    #####:  336:        state -> hand[currentPlayer][i] = -1; //Set card to -1
        -:  337:      }
    #####:  338:    state -> handCount[currentPlayer] = 0; //Reset hand count
        -:  339:
        -:  340:    //Code for determining the player
    #####:  341:    if (currentPlayer < (state -> numPlayers - 1)) 
branch  0 never executed
branch  1 never executed
        -:  342:    {
    #####:  343:        state -> whoseTurn = currentPlayer + 1; //Still safe to increment
        -:  344:      } 
        -:  345:      else 
        -:  346:      {
    #####:  347:        state -> whoseTurn = 0; //Max player has been reached, loop back around to player 1
        -:  348:      }
        -:  349:
    #####:  350:      state -> outpostPlayed = 0;
    #####:  351:      state -> phase = 0;
    #####:  352:      state -> numActions = 1;
    #####:  353:      state -> coins = 0;
    #####:  354:      state -> numBuys = 1;
    #####:  355:      state -> playedCardCount = 0;
    #####:  356:      state -> handCount[state -> whoseTurn] = 0;
        -:  357:
        -:  358:    //int k; move to top
        -:  359:    //Next player draws hand
    #####:  360:      for (k = 0; k < 5; k++) 
branch  0 never executed
branch  1 never executed
        -:  361:      {
    #####:  362:        drawCard(state -> whoseTurn, state); //Draw a card
call    0 never executed
        -:  363:      }
        -:  364:
        -:  365:    //Update money
    #####:  366:      updateCoins(state -> whoseTurn, state, 0);
call    0 never executed
        -:  367:
    #####:  368:      return 0;
        -:  369:    }
        -:  370:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  371:    int isGameOver(struct gameState * state) 
        -:  372:    {
        -:  373:      int i;
        -:  374:      int j;
        -:  375:
        -:  376:    //if stack of Province cards is empty, the game ends
    #####:  377:      if (state -> supplyCount[province] == 0) 
branch  0 never executed
branch  1 never executed
        -:  378:      {
    #####:  379:        return 1;
        -:  380:      }
        -:  381:
        -:  382:    //if three supply pile are at 0, the game ends
    #####:  383:      j = 0;
    #####:  384:      for (i = 0; i < 25; i++) 
branch  0 never executed
branch  1 never executed
        -:  385:      {
    #####:  386:        if (state -> supplyCount[i] == 0) 
branch  0 never executed
branch  1 never executed
        -:  387:        {
    #####:  388:          j++;
        -:  389:        }
        -:  390:      }
    #####:  391:      if (j >= 3) 
branch  0 never executed
branch  1 never executed
        -:  392:      {
    #####:  393:        return 1;
        -:  394:      }
        -:  395:
    #####:  396:      return 0;
        -:  397:    }
        -:  398:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  399:    int scoreFor(int player, struct gameState * state) 
        -:  400:    {
        -:  401:      int i;
    #####:  402:      int score = 0;
        -:  403:    //score from hand
    #####:  404:      for (i = 0; i < state -> handCount[player]; i++) 
branch  0 never executed
branch  1 never executed
        -:  405:      {
    #####:  406:        if (state -> hand[player][i] == curse) 
branch  0 never executed
branch  1 never executed
        -:  407:        {
    #####:  408:          score = score - 1;
        -:  409:        };
    #####:  410:        if (state -> hand[player][i] == estate) 
branch  0 never executed
branch  1 never executed
        -:  411:        {
    #####:  412:          score = score + 1;
        -:  413:        };
    #####:  414:        if (state -> hand[player][i] == duchy) 
branch  0 never executed
branch  1 never executed
        -:  415:        {
    #####:  416:          score = score + 3;
        -:  417:        };
    #####:  418:        if (state -> hand[player][i] == province) 
branch  0 never executed
branch  1 never executed
        -:  419:        {
    #####:  420:          score = score + 6;
        -:  421:        };
    #####:  422:        if (state -> hand[player][i] == great_hall) 
branch  0 never executed
branch  1 never executed
        -:  423:        {
    #####:  424:          score = score + 1;
        -:  425:        };
    #####:  426:        if (state -> hand[player][i] == gardens) 
branch  0 never executed
branch  1 never executed
        -:  427:        {
    #####:  428:          score = score + (fullDeckCount(player, 0, state) / 10);
call    0 never executed
        -:  429:        };
        -:  430:      }
        -:  431:
        -:  432:    //score from discard
    #####:  433:      for (i = 0; i < state -> discardCount[player]; i++) 
branch  0 never executed
branch  1 never executed
        -:  434:      {
    #####:  435:        if (state -> discard[player][i] == curse) 
branch  0 never executed
branch  1 never executed
        -:  436:        {
    #####:  437:          score = score - 1;
        -:  438:        };
    #####:  439:        if (state -> discard[player][i] == estate) 
branch  0 never executed
branch  1 never executed
        -:  440:        {
    #####:  441:          score = score + 1;
        -:  442:        };
    #####:  443:        if (state -> discard[player][i] == duchy) 
branch  0 never executed
branch  1 never executed
        -:  444:        {
    #####:  445:          score = score + 3;
        -:  446:        };
    #####:  447:        if (state -> discard[player][i] == province) 
branch  0 never executed
branch  1 never executed
        -:  448:        {
    #####:  449:          score = score + 6;
        -:  450:        };
    #####:  451:        if (state -> discard[player][i] == great_hall) 
branch  0 never executed
branch  1 never executed
        -:  452:        {
    #####:  453:          score = score + 1;
        -:  454:        };
    #####:  455:        if (state -> discard[player][i] == gardens) 
branch  0 never executed
branch  1 never executed
        -:  456:        {
    #####:  457:          score = score + (fullDeckCount(player, 0, state) / 10);
call    0 never executed
        -:  458:        };
        -:  459:      }
        -:  460:
        -:  461:    //score from deck
    #####:  462:      for (i = 0; i < state -> discardCount[player]; i++) 
branch  0 never executed
branch  1 never executed
        -:  463:      {
    #####:  464:        if (state -> deck[player][i] == curse) 
branch  0 never executed
branch  1 never executed
        -:  465:        {
    #####:  466:          score = score - 1;
        -:  467:        };
    #####:  468:        if (state -> deck[player][i] == estate) 
branch  0 never executed
branch  1 never executed
        -:  469:        {
    #####:  470:          score = score + 1;
        -:  471:        };
    #####:  472:        if (state -> deck[player][i] == duchy) 
branch  0 never executed
branch  1 never executed
        -:  473:        {
    #####:  474:          score = score + 3;
        -:  475:        };
    #####:  476:        if (state -> deck[player][i] == province) 
branch  0 never executed
branch  1 never executed
        -:  477:        {
    #####:  478:          score = score + 6;
        -:  479:        };
    #####:  480:        if (state -> deck[player][i] == great_hall) 
branch  0 never executed
branch  1 never executed
        -:  481:        {
    #####:  482:          score = score + 1;
        -:  483:        };
    #####:  484:        if (state -> deck[player][i] == gardens) 
branch  0 never executed
branch  1 never executed
        -:  485:        {
    #####:  486:          score = score + (fullDeckCount(player, 0, state) / 10);
call    0 never executed
        -:  487:        };
        -:  488:      }
        -:  489:
    #####:  490:      return score;
        -:  491:    }
        -:  492:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  493:    int getWinners(int players[MAX_PLAYERS], struct gameState * state) 
        -:  494:    {
        -:  495:      int i;
        -:  496:      int j;
        -:  497:      int highScore;
        -:  498:      int currentPlayer;
        -:  499:
        -:  500:    //get score for each player
    #####:  501:      for (i = 0; i < MAX_PLAYERS; i++) 
branch  0 never executed
branch  1 never executed
        -:  502:      {
        -:  503:        //set unused player scores to -9999
    #####:  504:        if (i >= state -> numPlayers) 
branch  0 never executed
branch  1 never executed
        -:  505:        {
    #####:  506:          players[i] = -9999;
        -:  507:        } else {
    #####:  508:          players[i] = scoreFor(i, state);
call    0 never executed
        -:  509:        }
        -:  510:      }
        -:  511:
        -:  512:    //find highest score
    #####:  513:      j = 0;
    #####:  514:      for (i = 0; i < MAX_PLAYERS; i++) 
branch  0 never executed
branch  1 never executed
        -:  515:      {
    #####:  516:        if (players[i] > players[j]) 
branch  0 never executed
branch  1 never executed
        -:  517:        {
    #####:  518:          j = i;
        -:  519:        }
        -:  520:      }
    #####:  521:      highScore = players[j];
        -:  522:
        -:  523:    //add 1 to players who had less turns
    #####:  524:      currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  525:      for (i = 0; i < MAX_PLAYERS; i++) 
branch  0 never executed
branch  1 never executed
        -:  526:      {
    #####:  527:        if (players[i] == highScore && i > currentPlayer) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  528:        {
    #####:  529:          players[i]++;
        -:  530:        }
        -:  531:      }
        -:  532:
        -:  533:    //find new highest score
    #####:  534:      j = 0;
    #####:  535:      for (i = 0; i < MAX_PLAYERS; i++) 
branch  0 never executed
branch  1 never executed
        -:  536:      {
    #####:  537:        if (players[i] > players[j]) 
branch  0 never executed
branch  1 never executed
        -:  538:        {
    #####:  539:          j = i;
        -:  540:        }
        -:  541:      }
    #####:  542:      highScore = players[j];
        -:  543:
        -:  544:    //set winners in array to 1 and rest to 0
    #####:  545:      for (i = 0; i < MAX_PLAYERS; i++) 
branch  0 never executed
branch  1 never executed
        -:  546:      {
    #####:  547:        if (players[i] == highScore) 
branch  0 never executed
branch  1 never executed
        -:  548:        {
    #####:  549:          players[i] = 1;
        -:  550:        } else {
    #####:  551:          players[i] = 0;
        -:  552:        }
        -:  553:      }
        -:  554:
    #####:  555:      return 0;
        -:  556:    }
        -:  557:
function drawCard called 0 returned 0% blocks executed 0%
    #####:  558:    int drawCard(int player, struct gameState * state) 
        -:  559:    {
        -:  560:      int count;
        -:  561:      int deckCounter;
    #####:  562:    if (state -> deckCount[player] <= 0) { //Deck is empty
branch  0 never executed
branch  1 never executed
        -:  563:
        -:  564:        //Step 1 Shuffle the discard pile back into a deck
        -:  565:      int i;
        -:  566:        //Move discard to deck
    #####:  567:      for (i = 0; i < state -> discardCount[player]; i++) 
branch  0 never executed
branch  1 never executed
        -:  568:      {
    #####:  569:        state -> deck[player][i] = state -> discard[player][i];
    #####:  570:        state -> discard[player][i] = -1;
        -:  571:      }
        -:  572:
    #####:  573:      state -> deckCount[player] = state -> discardCount[player];
    #####:  574:        state -> discardCount[player] = 0; //Reset discard
        -:  575:
        -:  576:        //Shufffle the deck
    #####:  577:        shuffle(player, state); //Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  578:
        -:  579:        if (DEBUG) 
        -:  580:        { //Debug statements
        -:  581:          printf("Deck count now: %d\n", state -> deckCount[player]);
        -:  582:        }
        -:  583:
    #####:  584:        state -> discardCount[player] = 0;
        -:  585:
        -:  586:        //Step 2 Draw Card
    #####:  587:        count = state -> handCount[player]; //Get current player's hand count
        -:  588:
        -:  589:        if (DEBUG) 
        -:  590:        { //Debug statements
        -:  591:          printf("Current hand count: %d\n", count);
        -:  592:        }
        -:  593:
    #####:  594:        deckCounter = state -> deckCount[player]; //Create a holder for the deck count
        -:  595:
    #####:  596:        if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  597:          return -1;
        -:  598:
    #####:  599:        state -> hand[player][count] = state -> deck[player][deckCounter - 1]; //Add card to hand
    #####:  600:        state -> deckCount[player]--;
    #####:  601:        state -> handCount[player]++; //Increment hand count
        -:  602:      } 
        -:  603:      else 
        -:  604:      {
    #####:  605:        int count = state -> handCount[player]; //Get current hand count for player
        -:  606:        int deckCounter;
        -:  607:        if (DEBUG) 
        -:  608:        { //Debug statements
        -:  609:          printf("Current hand count: %d\n", count);
        -:  610:        }
        -:  611:
    #####:  612:        deckCounter = state -> deckCount[player]; //Create holder for the deck count
    #####:  613:        state -> hand[player][count] = state -> deck[player][deckCounter - 1]; //Add card to the hand
    #####:  614:        state -> deckCount[player]--;
    #####:  615:        state -> handCount[player]++; //Increment hand count
        -:  616:      }
    #####:  617:      return 0;
        -:  618:    }
        -:  619:
function getCost called 16 returned 100% blocks executed 60%
       16:  620:    int getCost(int cardNumber) 
        -:  621:    {
       16:  622:      switch (cardNumber) 
branch  0 taken 6%
branch  1 taken 6%
branch  2 taken 6%
branch  3 taken 6%
branch  4 taken 6%
branch  5 taken 6%
branch  6 taken 6%
branch  7 taken 6%
branch  8 taken 6%
branch  9 taken 6%
branch 10 taken 6%
branch 11 taken 6%
branch 12 taken 6%
branch 13 taken 6%
branch 14 taken 6%
branch 15 taken 6%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  623:      {
        -:  624:        case curse:
        1:  625:        return 0;
        -:  626:        case estate:
        1:  627:        return 2;
        -:  628:        case duchy:
        1:  629:        return 5;
        -:  630:        case province:
        1:  631:        return 8;
        -:  632:        case copper:
        1:  633:        return 0;
        -:  634:        case silver:
        1:  635:        return 3;
        -:  636:        case gold:
        1:  637:        return 6;
        -:  638:        case adventurer:
        1:  639:        return 6;
        -:  640:        case council_room:
        1:  641:        return 5;
        -:  642:        case feast:
        1:  643:        return 4;
        -:  644:        case gardens:
        1:  645:        return 4;
        -:  646:        case mine:
        1:  647:        return 5;
        -:  648:        case remodel:
        1:  649:        return 4;
        -:  650:        case smithy:
        1:  651:        return 4;
        -:  652:        case village:
        1:  653:        return 3;
        -:  654:        case baron:
        1:  655:        return 4;
        -:  656:        case great_hall:
    #####:  657:        return 3;
        -:  658:        case minion:
    #####:  659:        return 5;
        -:  660:        case steward:
    #####:  661:        return 3;
        -:  662:        case tribute:
    #####:  663:        return 5;
        -:  664:        case ambassador:
    #####:  665:        return 3;
        -:  666:        case cutpurse:
    #####:  667:        return 4;
        -:  668:        case embargo:
    #####:  669:        return 2;
        -:  670:        case outpost:
    #####:  671:        return 5;
        -:  672:        case salvager:
    #####:  673:        return 4;
        -:  674:        case sea_hag:
    #####:  675:        return 4;
        -:  676:        case treasure_map:
    #####:  677:        return 4;
        -:  678:      }
        -:  679:
    #####:  680:      return -1;
        -:  681:    }
        -:  682:
        -:  683://A2 Refactor CLEAN CARD | NO BUGS
function great_hall_card called 0 returned 0% blocks executed 0%
    #####:  684:    int great_hall_card(int handPos, struct gameState * state) 
        -:  685:    {
    #####:  686:      int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  687:
    #####:  688:      drawCard(currentPlayer, state);
call    0 never executed
        -:  689:
        -:  690:    // provides another action turn
    #####:  691:      state -> numActions++;
        -:  692:
        -:  693:    // played card to discard pile
    #####:  694:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  695:      return 0;
        -:  696:    }
        -:  697:
        -:  698://A2 Refactor
function village_card called 0 returned 0% blocks executed 0%
    #####:  699:    int village_card(int handPos, struct gameState * state) 
        -:  700:    {
    #####:  701:      int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  702:
    #####:  703:      drawCard(currentPlayer, state);
call    0 never executed
        -:  704:
        -:  705:    //BUG: Should only provide 2 action turns
    #####:  706:      state -> numActions = state -> numActions + 4;
        -:  707:
        -:  708:    // played card to discard pile
    #####:  709:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  710:      return 0;
        -:  711:    }
        -:  712:
        -:  713://A2 Refactor
function council_room_card called 0 returned 0% blocks executed 0%
    #####:  714:    int council_room_card(int handPos, struct gameState * state) 
        -:  715:    {
        -:  716:      int i;
    #####:  717:      int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  718:
        -:  719:    // draw 4 cards
    #####:  720:      for (i = 0; i < 4; i++) {
branch  0 never executed
branch  1 never executed
    #####:  721:        drawCard(currentPlayer, state);
call    0 never executed
        -:  722:      }
        -:  723:
        -:  724:    //BUG: Card provides another buy turn 
        -:  725:    //state->numBuys++;      
        -:  726:
        -:  727:    // all other players draw a card
    #####:  728:      for (i = 0; i < state -> numPlayers; i++) 
branch  0 never executed
branch  1 never executed
        -:  729:      {
    #####:  730:        if (i != currentPlayer) 
branch  0 never executed
branch  1 never executed
        -:  731:        {
    #####:  732:          drawCard(i, state);
call    0 never executed
        -:  733:        }
        -:  734:      }
        -:  735:    // played card to discard pile
    #####:  736:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  737:      return 0;
        -:  738:    }
        -:  739:
        -:  740://A2 Refactor
function adventurer_card called 0 returned 0% blocks executed 0%
    #####:  741:    int adventurer_card(struct gameState * state) 
        -:  742:    {
    #####:  743:      int z = 0;
        -:  744:      int cardDrawn;
    #####:  745:      int drawntreasure = 0;
    #####:  746:      int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  747:      int temphand[MAX_HAND];
        -:  748:
    #####:  749:    while (drawntreasure < 2) 
branch  0 never executed
branch  1 never executed
        -:  750:    { // when the deck is empty, reshuffle the discard and make it the deck
    #####:  751:      if (state -> deckCount[currentPlayer] < 1) 
branch  0 never executed
branch  1 never executed
        -:  752:      {
    #####:  753:        shuffle(currentPlayer, state);
call    0 never executed
        -:  754:      }
    #####:  755:      drawCard(currentPlayer, state);
call    0 never executed
        -:  756:        // defines the drawn card as the top card
    #####:  757:      cardDrawn = state -> hand[currentPlayer][state -> handCount[currentPlayer] - 1];
    #####:  758:      if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  759:        //drawntreasure++;
        -:  760:        //BUG: increments by 4. Should increment by 1
    #####:  761:        drawntreasure += 4;
        -:  762:      else 
        -:  763:      {
    #####:  764:        temphand[z] = cardDrawn;
        -:  765:            // removes the most recently drawn (top) card
    #####:  766:        state -> handCount[currentPlayer]--;
    #####:  767:        z++;
        -:  768:      }
        -:  769:    }
    #####:  770:    while (z - 1 >= 0) 
branch  0 never executed
branch  1 never executed
        -:  771:    {
        -:  772:        // discard all cards in play that have been drawn
    #####:  773:      state -> discard[currentPlayer][state -> discardCount[currentPlayer]++] = temphand[z - 1];
    #####:  774:      z = z - 1;
        -:  775:    }
    #####:  776:    return 0;
        -:  777:  }
        -:  778:
        -:  779://A2 Refactor
function smithy_card called 0 returned 0% blocks executed 0%
    #####:  780:  int smithy_card(int handPos, struct gameState * state) 
        -:  781:  {
        -:  782:    int i;
    #####:  783:    int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  784:    //BUG: Should only draw 3 cards  
    #####:  785:    for (i = 0; i < 4; i++) 
branch  0 never executed
branch  1 never executed
        -:  786:    {
    #####:  787:      drawCard(currentPlayer, state);
call    0 never executed
        -:  788:    }
        -:  789:    //discard card from hand
    #####:  790:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  791:    return 0;
        -:  792:  }
        -:  793:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  794:  int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState * state, int handPos, int * bonus) {
        -:  795:    int i;
        -:  796:    int j;
        -:  797:    int k;
        -:  798:    int x;
        -:  799:    int index;
    #####:  800:    int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  801:    int nextPlayer = currentPlayer + 1;
        -:  802:
    #####:  803:    int tributeRevealedCards[2] = 
        -:  804:    {
        -:  805:      -1, -1
        -:  806:    };
        -:  807:    int temphand[MAX_HAND]; // moved above the if statement
        -:  808:    //int drawntreasure=0; // commented out as part of A2 Refactor
        -:  809:    //int cardDrawn; // commented out as part of A2 Refactor
        -:  810:    //int z = 0;// this is the counter for the temp hand // commented out as part of A2 Refactor
    #####:  811:    if (nextPlayer > (state -> numPlayers - 1)) 
branch  0 never executed
branch  1 never executed
        -:  812:    {
    #####:  813:      nextPlayer = 0;
        -:  814:    }
        -:  815:
        -:  816:    //uses switch to select card and perform actions
    #####:  817:    switch (card) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  818:    {
        -:  819:        // A2 Refactor  
        -:  820:      case adventurer:
    #####:  821:      return adventurer_card(state);
call    0 never executed
        -:  822:
        -:  823:        // A2 Refactor    
        -:  824:      case council_room:
    #####:  825:      return council_room_card(handPos, state);
call    0 never executed
        -:  826:
        -:  827:        // A2 Refactor  
        -:  828:      case smithy:
    #####:  829:      return smithy_card(handPos, state);
call    0 never executed
        -:  830:
        -:  831:        // A2 Refactor  
        -:  832:      case village:
    #####:  833:      return village_card(handPos, state);
call    0 never executed
        -:  834:
        -:  835:        // A2 Refactor
        -:  836:      case great_hall:
    #####:  837:      return great_hall_card(handPos, state);
call    0 never executed
        -:  838:
        -:  839:      case feast:
        -:  840:        //gain card with cost up to 5
        -:  841:        //Backup hand
    #####:  842:      for (i = 0; i <= state -> handCount[currentPlayer]; i++) 
branch  0 never executed
branch  1 never executed
        -:  843:      {
    #####:  844:            temphand[i] = state -> hand[currentPlayer][i]; //Backup card
    #####:  845:            state -> hand[currentPlayer][i] = -1; //Set to nothing
        -:  846:          }
        -:  847:        //Backup hand
        -:  848:
        -:  849:        //Update Coins for Buy
    #####:  850:          updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  851:        x = 1; //Condition to loop on
    #####:  852:        while (x == 1) 
branch  0 never executed
branch  1 never executed
        -:  853:        { //Buy one card
    #####:  854:          if (supplyCount(choice1, state) <= 0) 
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  855:          {
        -:  856:            if (DEBUG)
        -:  857:              printf("None of that card left, sorry!\n");
        -:  858:
        -:  859:            if (DEBUG) 
        -:  860:            {
        -:  861:              printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  862:            }
        -:  863:          } 
    #####:  864:          else if (state -> coins < getCost(choice1)) 
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  865:          {
    #####:  866:            printf("That card is too expensive!\n");
call    0 never executed
        -:  867:
        -:  868:            if (DEBUG) 
        -:  869:            {
        -:  870:              printf("Coins: %d < %d\n", state -> coins, getCost(choice1));
        -:  871:            }
        -:  872:          } 
        -:  873:          else 
        -:  874:          {
        -:  875:            if (DEBUG) 
        -:  876:            {
        -:  877:              printf("Deck Count: %d\n", state -> handCount[currentPlayer] + state -> deckCount[currentPlayer] + state -> discardCount[currentPlayer]);
        -:  878:            }
        -:  879:
    #####:  880:                gainCard(choice1, state, 0, currentPlayer); //Gain the card
call    0 never executed
    #####:  881:                x = 0; //No more buying cards
        -:  882:
        -:  883:                if (DEBUG) 
        -:  884:                {
        -:  885:                  printf("Deck Count: %d\n", state -> handCount[currentPlayer] + state -> deckCount[currentPlayer] + state -> discardCount[currentPlayer]);
        -:  886:                }
        -:  887:
        -:  888:              }
        -:  889:            }
        -:  890:
        -:  891:        //Reset Hand
    #####:  892:            for (i = 0; i <= state -> handCount[currentPlayer]; i++) 
branch  0 never executed
branch  1 never executed
        -:  893:            {
    #####:  894:              state -> hand[currentPlayer][i] = temphand[i];
    #####:  895:              temphand[i] = -1;
        -:  896:            }
        -:  897:        //Reset Hand
        -:  898:
    #####:  899:            return 0;
        -:  900:
        -:  901:            case gardens:
    #####:  902:            return -1;
        -:  903:
        -:  904:            case mine:
    #####:  905:        j = state -> hand[currentPlayer][choice1]; //store card we will trash
        -:  906:
    #####:  907:        if (state -> hand[currentPlayer][choice1] < copper || state -> hand[currentPlayer][choice1] > gold) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  908:        {
    #####:  909:          return -1;
        -:  910:        }
        -:  911:
    #####:  912:        if (choice2 > treasure_map || choice2 < curse) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  913:        {
    #####:  914:          return -1;
        -:  915:        }
        -:  916:
    #####:  917:        if ((getCost(state -> hand[currentPlayer][choice1]) + 3) > getCost(choice2)) 
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  918:        {
    #####:  919:          return -1;
        -:  920:        }
        -:  921:
    #####:  922:        gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  923:
        -:  924:        //discard card from hand
    #####:  925:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  926:
        -:  927:        //discard trashed card
    #####:  928:        for (i = 0; i < state -> handCount[currentPlayer]; i++) 
branch  0 never executed
branch  1 never executed
        -:  929:        {
    #####:  930:          if (state -> hand[currentPlayer][i] == j) 
branch  0 never executed
branch  1 never executed
        -:  931:          {
    #####:  932:            discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  933:            break;
        -:  934:          }
        -:  935:        }
        -:  936:
    #####:  937:        return 0;
        -:  938:
        -:  939:        case remodel:
    #####:  940:        j = state -> hand[currentPlayer][choice1]; //store card we will trash
        -:  941:
    #####:  942:        if ((getCost(state -> hand[currentPlayer][choice1]) + 2) > getCost(choice2)) 
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  943:        {
    #####:  944:          return -1;
        -:  945:        }
        -:  946:
    #####:  947:        gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  948:
        -:  949:        //discard card from hand
    #####:  950:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  951:
        -:  952:        //discard trashed card
    #####:  953:        for (i = 0; i < state -> handCount[currentPlayer]; i++) 
branch  0 never executed
branch  1 never executed
        -:  954:        {
    #####:  955:          if (state -> hand[currentPlayer][i] == j) 
branch  0 never executed
branch  1 never executed
        -:  956:          {
    #####:  957:            discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  958:            break;
        -:  959:          }
        -:  960:        }
    #####:  961:        return 0;
        -:  962:
        -:  963:        case baron:
    #####:  964:        state -> numBuys++; //Increase buys by 1!
    #####:  965:        if (choice1 > 0) 
branch  0 never executed
branch  1 never executed
        -:  966:        { //Boolean true or going to discard an estate
    #####:  967:            int p = 0; //Iterator for hand!
    #####:  968:            int card_not_discarded = 1; //Flag for discard set!
    #####:  969:            while (card_not_discarded) 
branch  0 never executed
branch  1 never executed
        -:  970:            {
    #####:  971:                if (state -> hand[currentPlayer][p] == estate) 
branch  0 never executed
branch  1 never executed
        -:  972:                { //Found an estate card!
    #####:  973:                    state -> coins += 4; //Add 4 coins to the amount of coins
    #####:  974:                    state -> discard[currentPlayer][state -> discardCount[currentPlayer]] = state -> hand[currentPlayer][p];
    #####:  975:                    state -> discardCount[currentPlayer]++;
    #####:  976:                    for (; p < state -> handCount[currentPlayer]; p++) 
branch  0 never executed
branch  1 never executed
        -:  977:                    {
    #####:  978:                      state -> hand[currentPlayer][p] = state -> hand[currentPlayer][p + 1];
        -:  979:                    }
    #####:  980:                    state -> hand[currentPlayer][state -> handCount[currentPlayer]] = -1;
    #####:  981:                    state -> handCount[currentPlayer]--;
    #####:  982:                    card_not_discarded = 0; //Exit the loop
        -:  983:                  } 
    #####:  984:                  else if (p > state -> handCount[currentPlayer]) 
branch  0 never executed
branch  1 never executed
        -:  985:                  {
        -:  986:                    if (DEBUG) 
        -:  987:                    {
        -:  988:                      printf("No estate cards in your hand, invalid choice\n");
        -:  989:                      printf("Must gain an estate if there are any\n");
        -:  990:                    }
    #####:  991:                    if (supplyCount(estate, state) > 0) 
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  992:                    {
    #####:  993:                      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  994:                        state -> supplyCount[estate]--; //Decrement estates
    #####:  995:                        if (supplyCount(estate, state) == 0) 
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  996:                        {
    #####:  997:                          isGameOver(state);
call    0 never executed
        -:  998:                        }
        -:  999:                      }
    #####: 1000:                    card_not_discarded = 0; //Exit the loop
        -: 1001:                  } 
        -: 1002:                  else 
        -: 1003:                  {
    #####: 1004:                    p++; //Next card
        -: 1005:                  }
        -: 1006:                }
        -: 1007:              } 
        -: 1008:              else 
        -: 1009:              {
    #####: 1010:                if (supplyCount(estate, state) > 0) 
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1011:                {
    #####: 1012:                gainCard(estate, state, 0, currentPlayer); //Gain an estate
call    0 never executed
    #####: 1013:                state -> supplyCount[estate]--; //Decrement Estates
    #####: 1014:                if (supplyCount(estate, state) == 0) 
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1015:                {
    #####: 1016:                  isGameOver(state);
call    0 never executed
        -: 1017:                }
        -: 1018:              }
        -: 1019:            }
    #####: 1020:            return 0;
        -: 1021:
        -: 1022:            case minion:
        -: 1023:        //+1 action
    #####: 1024:            state -> numActions++;
        -: 1025:
        -: 1026:        //discard card from hand
    #####: 1027:            discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1028:
    #####: 1029:        if (choice1) //+2 coins
branch  0 never executed
branch  1 never executed
        -: 1030:        {
    #####: 1031:          state -> coins = state -> coins + 2;
    #####: 1032:        } else if (choice2) //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -: 1033:        {
        -: 1034:            //discard hand
    #####: 1035:          while (numHandCards(state) > 0) 
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1036:          {
    #####: 1037:            discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1038:          }
        -: 1039:
        -: 1040:            //draw 4
    #####: 1041:          for (i = 0; i < 4; i++) 
branch  0 never executed
branch  1 never executed
        -: 1042:          {
    #####: 1043:            drawCard(currentPlayer, state);
call    0 never executed
        -: 1044:          }
        -: 1045:
        -: 1046:            //other players discard hand and redraw if hand size > 4
    #####: 1047:          for (i = 0; i < state -> numPlayers; i++) 
branch  0 never executed
branch  1 never executed
        -: 1048:          {
    #####: 1049:            if (i != currentPlayer) 
branch  0 never executed
branch  1 never executed
        -: 1050:            {
    #####: 1051:              if (state -> handCount[i] > 4) 
branch  0 never executed
branch  1 never executed
        -: 1052:              {
        -: 1053:                        //discard hand
    #####: 1054:                while (state -> handCount[i] > 0) 
branch  0 never executed
branch  1 never executed
        -: 1055:                {
    #####: 1056:                  discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1057:                }
        -: 1058:                        //draw 4
    #####: 1059:                for (j = 0; j < 4; j++) 
branch  0 never executed
branch  1 never executed
        -: 1060:                {
    #####: 1061:                  drawCard(i, state);
call    0 never executed
        -: 1062:                }
        -: 1063:              }
        -: 1064:            }
        -: 1065:          }
        -: 1066:        }
    #####: 1067:        return 0;
        -: 1068:
        -: 1069:        case steward:
    #####: 1070:        if (choice1 == 1) 
branch  0 never executed
branch  1 never executed
        -: 1071:        {
        -: 1072:          //+2 cards
    #####: 1073:          drawCard(currentPlayer, state);
call    0 never executed
    #####: 1074:          drawCard(currentPlayer, state);
call    0 never executed
        -: 1075:        } 
    #####: 1076:        else if (choice1 == 2) 
branch  0 never executed
branch  1 never executed
        -: 1077:        {
        -: 1078:          //+2 coins
    #####: 1079:          state -> coins = state -> coins + 2;
        -: 1080:        } 
        -: 1081:        else 
        -: 1082:        {
        -: 1083:          //trash 2 cards in hand
    #####: 1084:          discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1085:          discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1086:        }
        -: 1087:
        -: 1088:        //discard card from hand
    #####: 1089:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1090:        return 0;
        -: 1091:
        -: 1092:        case tribute:
    #####: 1093:        if ((state -> discardCount[nextPlayer] + state -> deckCount[nextPlayer]) <= 1) 
branch  0 never executed
branch  1 never executed
        -: 1094:        {
    #####: 1095:          if (state -> deckCount[nextPlayer] > 0) 
branch  0 never executed
branch  1 never executed
        -: 1096:          {
    #####: 1097:            tributeRevealedCards[0] = state -> deck[nextPlayer][state -> deckCount[nextPlayer] - 1];
    #####: 1098:            state -> deckCount[nextPlayer]--;
        -: 1099:          } 
    #####: 1100:          else if (state -> discardCount[nextPlayer] > 0) 
branch  0 never executed
branch  1 never executed
        -: 1101:          {
    #####: 1102:            tributeRevealedCards[0] = state -> discard[nextPlayer][state -> discardCount[nextPlayer] - 1];
    #####: 1103:            state -> discardCount[nextPlayer]--;
        -: 1104:          } 
        -: 1105:          else 
        -: 1106:          {
        -: 1107:                //No Card to Reveal
        -: 1108:            if (DEBUG) 
        -: 1109:            {
        -: 1110:              printf("No cards to reveal\n");
        -: 1111:            }
        -: 1112:          }
        -: 1113:        } 
        -: 1114:        else 
        -: 1115:        {
    #####: 1116:          if (state -> deckCount[nextPlayer] == 0) 
branch  0 never executed
branch  1 never executed
        -: 1117:          {
    #####: 1118:            for (i = 0; i < state -> discardCount[nextPlayer]; i++) 
branch  0 never executed
branch  1 never executed
        -: 1119:            {
    #####: 1120:                    state -> deck[nextPlayer][i] = state -> discard[nextPlayer][i]; //Move to deck
    #####: 1121:                    state -> deckCount[nextPlayer]++;
    #####: 1122:                    state -> discard[nextPlayer][i] = -1;
    #####: 1123:                    state -> discardCount[nextPlayer]--;
        -: 1124:                  }
        -: 1125:
    #####: 1126:                shuffle(nextPlayer, state); //Shuffle the deck
call    0 never executed
        -: 1127:              }
    #####: 1128:              tributeRevealedCards[0] = state -> deck[nextPlayer][state -> deckCount[nextPlayer] - 1];
    #####: 1129:              state -> deck[nextPlayer][state -> deckCount[nextPlayer]--] = -1;
    #####: 1130:              state -> deckCount[nextPlayer]--;
    #####: 1131:              tributeRevealedCards[1] = state -> deck[nextPlayer][state -> deckCount[nextPlayer] - 1];
    #####: 1132:              state -> deck[nextPlayer][state -> deckCount[nextPlayer]--] = -1;
    #####: 1133:              state -> deckCount[nextPlayer]--;
        -: 1134:            }
        -: 1135:
    #####: 1136:        if (tributeRevealedCards[0] == tributeRevealedCards[1]) 
branch  0 never executed
branch  1 never executed
        -: 1137:        { //If we have a duplicate card, just drop one 
    #####: 1138:          state -> playedCards[state -> playedCardCount] = tributeRevealedCards[1];
    #####: 1139:          state -> playedCardCount++;
    #####: 1140:          tributeRevealedCards[1] = -1;
        -: 1141:        }
        -: 1142:
    #####: 1143:        for (i = 0; i <= 2; i++) 
branch  0 never executed
branch  1 never executed
        -: 1144:        {
    #####: 1145:            if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1146:            { //Treasure cards
    #####: 1147:              state -> coins += 2;
        -: 1148:            } 
    #####: 1149:            else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
        -: 1150:            { //Victory Card Found
    #####: 1151:              drawCard(currentPlayer, state);
call    0 never executed
    #####: 1152:              drawCard(currentPlayer, state);
call    0 never executed
        -: 1153:            } 
        -: 1154:            else 
        -: 1155:            { //Action Card
    #####: 1156:              state -> numActions = state -> numActions + 2;
        -: 1157:            }
        -: 1158:          }
        -: 1159:
    #####: 1160:          return 0;
        -: 1161:
        -: 1162:          case ambassador:
    #####: 1163:        j = 0; //used to check if player has enough cards to discard
        -: 1164:
    #####: 1165:        if (choice2 > 2 || choice2 < 0) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1166:        {
    #####: 1167:          return -1;
        -: 1168:        }
        -: 1169:
    #####: 1170:        if (choice1 == handPos) 
branch  0 never executed
branch  1 never executed
        -: 1171:        {
    #####: 1172:          return -1;
        -: 1173:        }
        -: 1174:
    #####: 1175:        for (i = 0; i < state -> handCount[currentPlayer]; i++) 
branch  0 never executed
branch  1 never executed
        -: 1176:        {
    #####: 1177:          if (i != handPos && i == state -> hand[currentPlayer][choice1] && i != choice1) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1178:          {
    #####: 1179:            j++;
        -: 1180:          }
        -: 1181:        }
    #####: 1182:        if (j < choice2) 
branch  0 never executed
branch  1 never executed
        -: 1183:        {
    #####: 1184:          return -1;
        -: 1185:        }
        -: 1186:
        -: 1187:        if (DEBUG)
        -: 1188:          printf("Player %d reveals card number: %d\n", currentPlayer, state -> hand[currentPlayer][choice1]);
        -: 1189:
        -: 1190:        //increase supply count for choosen card by amount being discarded
    #####: 1191:        state -> supplyCount[state -> hand[currentPlayer][choice1]] += choice2;
        -: 1192:
        -: 1193:        //each other player gains a copy of revealed card
    #####: 1194:        for (i = 0; i < state -> numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1195:          if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####: 1196:            gainCard(state -> hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1197:          }
        -: 1198:        }
        -: 1199:
        -: 1200:        //discard played card from hand
    #####: 1201:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1202:
        -: 1203:        //trash copies of cards returned to supply
    #####: 1204:        for (j = 0; j < choice2; j++) {
branch  0 never executed
branch  1 never executed
    #####: 1205:          for (i = 0; i < state -> handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1206:            if (state -> hand[currentPlayer][i] == state -> hand[currentPlayer][choice1]) {
branch  0 never executed
branch  1 never executed
    #####: 1207:              discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1208:              break;
        -: 1209:            }
        -: 1210:          }
        -: 1211:        }
        -: 1212:
    #####: 1213:        return 0;
        -: 1214:
        -: 1215:        case cutpurse:
        -: 1216:
    #####: 1217:        updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1218:        for (i = 0; i < state -> numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1219:          if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####: 1220:            for (j = 0; j < state -> handCount[i]; j++) {
branch  0 never executed
branch  1 never executed
    #####: 1221:              if (state -> hand[i][j] == copper) {
branch  0 never executed
branch  1 never executed
    #####: 1222:                discardCard(j, i, state, 0);
call    0 never executed
    #####: 1223:                break;
        -: 1224:              }
    #####: 1225:              if (j == state -> handCount[i]) {
branch  0 never executed
branch  1 never executed
    #####: 1226:                for (k = 0; k < state -> handCount[i]; k++) {
branch  0 never executed
branch  1 never executed
        -: 1227:                  if (DEBUG)
        -: 1228:                    printf("Player %d reveals card number %d\n", i, state -> hand[i][k]);
        -: 1229:                }
    #####: 1230:                break;
        -: 1231:              }
        -: 1232:            }
        -: 1233:
        -: 1234:          }
        -: 1235:
        -: 1236:        }
        -: 1237:
        -: 1238:        //discard played card from hand
    #####: 1239:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1240:
    #####: 1241:        return 0;
        -: 1242:
        -: 1243:        case embargo:
        -: 1244:        //+2 Coins
    #####: 1245:        state -> coins = state -> coins + 2;
        -: 1246:
        -: 1247:        //see if selected pile is in play
    #####: 1248:        if (state -> supplyCount[choice1] == -1) {
branch  0 never executed
branch  1 never executed
    #####: 1249:          return -1;
        -: 1250:        }
        -: 1251:
        -: 1252:        //add embargo token to selected supply pile
    #####: 1253:        state -> embargoTokens[choice1]++;
        -: 1254:
        -: 1255:        //trash card
    #####: 1256:        discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1257:        return 0;
        -: 1258:
        -: 1259:        case outpost:
        -: 1260:        //set outpost flag
    #####: 1261:        state -> outpostPlayed++;
        -: 1262:
        -: 1263:        //discard card
    #####: 1264:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1265:        return 0;
        -: 1266:
        -: 1267:        case salvager:
        -: 1268:        //+1 buy
    #####: 1269:        state -> numBuys++;
        -: 1270:
    #####: 1271:        if (choice1) {
branch  0 never executed
branch  1 never executed
        -: 1272:            //gain coins equal to trashed card
    #####: 1273:          state -> coins = state -> coins + getCost(handCard(choice1, state));
call    0 never executed
call    1 never executed
        -: 1274:            //trash card
    #####: 1275:          discardCard(choice1, currentPlayer, state, 1);
call    0 never executed
        -: 1276:        }
        -: 1277:
        -: 1278:        //discard card
    #####: 1279:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1280:        return 0;
        -: 1281:
        -: 1282:        case sea_hag:
    #####: 1283:        for (i = 0; i < state -> numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1284:          if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####: 1285:            state -> discard[i][state -> discardCount[i]] = state -> deck[i][state -> deckCount[i]--];
    #####: 1286:            state -> deckCount[i]--;
    #####: 1287:            state -> discardCount[i]++;
    #####: 1288:                state -> deck[i][state -> deckCount[i]--] = curse; //Top card now a curse
        -: 1289:              }
        -: 1290:            }
    #####: 1291:            return 0;
        -: 1292:
        -: 1293:            case treasure_map:
        -: 1294:        //search hand for another treasure_map
    #####: 1295:            index = -1;
    #####: 1296:            for (i = 0; i < state -> handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1297:              if (state -> hand[currentPlayer][i] == treasure_map && i != handPos) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1298:                index = i;
    #####: 1299:                break;
        -: 1300:              }
        -: 1301:            }
    #####: 1302:            if (index > -1) {
branch  0 never executed
branch  1 never executed
        -: 1303:            //trash both treasure cards
    #####: 1304:              discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1305:              discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1306:
        -: 1307:            //gain 4 Gold cards
    #####: 1308:              for (i = 0; i < 4; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1309:                gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1310:              }
        -: 1311:
        -: 1312:            //return success
    #####: 1313:              return 1;
        -: 1314:            }
        -: 1315:
        -: 1316:        //no second treasure_map found in hand
    #####: 1317:            return -1;
        -: 1318:          }
        -: 1319:
    #####: 1320:          return -1;
        -: 1321:        }
        -: 1322:
function discardCard called 0 returned 0% blocks executed 0%
    #####: 1323:        int discardCard(int handPos, int currentPlayer, struct gameState * state, int trashFlag) {
        -: 1324:
        -: 1325:    //if card is not trashed, added to Played pile 
    #####: 1326:          if (trashFlag < 1) {
branch  0 never executed
branch  1 never executed
        -: 1327:        //add card to played pile
    #####: 1328:            state -> playedCards[state -> playedCardCount] = state -> hand[currentPlayer][handPos];
    #####: 1329:            state -> playedCardCount++;
        -: 1330:          }
        -: 1331:
        -: 1332:    //set played card to -1
    #####: 1333:          state -> hand[currentPlayer][handPos] = -1;
        -: 1334:
        -: 1335:    //remove card from player's hand
    #####: 1336:    if (handPos == (state -> handCount[currentPlayer] - 1)) //last card in hand array is played
branch  0 never executed
branch  1 never executed
        -: 1337:    {
        -: 1338:        //reduce number of cards in hand
    #####: 1339:      state -> handCount[currentPlayer]--;
    #####: 1340:    } else if (state -> handCount[currentPlayer] == 1) //only one card in hand
branch  0 never executed
branch  1 never executed
        -: 1341:    {
        -: 1342:        //reduce number of cards in hand
    #####: 1343:      state -> handCount[currentPlayer]--;
        -: 1344:    } else {
        -: 1345:        //replace discarded card with last card in hand
    #####: 1346:      state -> hand[currentPlayer][handPos] = state -> hand[currentPlayer][(state -> handCount[currentPlayer] - 1)];
        -: 1347:        //set last card to -1
    #####: 1348:      state -> hand[currentPlayer][state -> handCount[currentPlayer] - 1] = -1;
        -: 1349:        //reduce number of cards in hand
    #####: 1350:      state -> handCount[currentPlayer]--;
        -: 1351:    }
        -: 1352:
    #####: 1353:    return 0;
        -: 1354:  }
        -: 1355:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1356:  int gainCard(int supplyPos, struct gameState * state, int toFlag, int player) {
        -: 1357:    //Note: supplyPos is enum of choosen card
        -: 1358:
        -: 1359:    //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1360:    if (supplyCount(supplyPos, state) < 1) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1361:      return -1;
        -: 1362:    }
        -: 1363:
        -: 1364:    //added card for [whoseTurn] current player:
        -: 1365:    // toFlag = 0 : add to discard
        -: 1366:    // toFlag = 1 : add to deck
        -: 1367:    // toFlag = 2 : add to hand
        -: 1368:
    #####: 1369:    if (toFlag == 1) {
branch  0 never executed
branch  1 never executed
    #####: 1370:      state -> deck[player][state -> deckCount[player]] = supplyPos;
    #####: 1371:      state -> deckCount[player]++;
    #####: 1372:    } else if (toFlag == 2) {
branch  0 never executed
branch  1 never executed
    #####: 1373:      state -> hand[player][state -> handCount[player]] = supplyPos;
    #####: 1374:      state -> handCount[player]++;
        -: 1375:    } else {
    #####: 1376:      state -> discard[player][state -> discardCount[player]] = supplyPos;
    #####: 1377:      state -> discardCount[player]++;
        -: 1378:    }
        -: 1379:
        -: 1380:    //decrease number in supply pile
    #####: 1381:    state -> supplyCount[supplyPos]--;
        -: 1382:
    #####: 1383:    return 0;
        -: 1384:  }
        -: 1385:
function updateCoins called 0 returned 0% blocks executed 0%
    #####: 1386:  int updateCoins(int player, struct gameState * state, int bonus) {
        -: 1387:    int i;
        -: 1388:
        -: 1389:    //reset coin count
    #####: 1390:    state -> coins = 0;
        -: 1391:
        -: 1392:    //add coins for each Treasure card in player's hand
    #####: 1393:    for (i = 0; i < state -> handCount[player]; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1394:      if (state -> hand[player][i] == copper) {
branch  0 never executed
branch  1 never executed
    #####: 1395:        state -> coins += 1;
    #####: 1396:      } else if (state -> hand[player][i] == silver) {
branch  0 never executed
branch  1 never executed
    #####: 1397:        state -> coins += 2;
    #####: 1398:      } else if (state -> hand[player][i] == gold) {
branch  0 never executed
branch  1 never executed
    #####: 1399:        state -> coins += 3;
        -: 1400:      }
        -: 1401:    }
        -: 1402:
        -: 1403:    //add bonus
    #####: 1404:    state -> coins += bonus;
        -: 1405:
    #####: 1406:    return 0;
        -: 1407:  }
        -: 1408:
        -: 1409://end of dominion.c

Testing: numHandCards()

numPlayers = 2, whoseTurn = 0:	PASSED
numPlayers = 2, whoseTurn = 1:	PASSED
numPlayers = 3, whoseTurn = 0:	PASSED
numPlayers = 3, whoseTurn = 1:	PASSED
numPlayers = 3, whoseTurn = 2:	PASSED
numPlayers = 4, whoseTurn = 0:	PASSED
numPlayers = 4, whoseTurn = 1:	PASSED
numPlayers = 4, whoseTurn = 2:	PASSED
numPlayers = 4, whoseTurn = 3:	PASSED
Total Number of Failures: 0

Function 'updateCoins'
Lines executed:81.82% of 11
Branches executed:100.00% of 8
Taken at least once:75.00% of 8
No calls

Function 'gainCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 1

Function 'discardCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'cardEffect'
Lines executed:0.00% of 206
Branches executed:0.00% of 179
Taken at least once:0.00% of 179
Calls executed:0.00% of 58

Function 'smithy_card'
Lines executed:0.00% of 6
Branches executed:0.00% of 2
Taken at least once:0.00% of 2
Calls executed:0.00% of 3

Function 'adventurer_card'
Lines executed:0.00% of 18
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
Calls executed:0.00% of 3

Function 'council_room_card'
Lines executed:0.00% of 9
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 4

Function 'village_card'
Lines executed:0.00% of 6
No branches
Calls executed:0.00% of 3

Function 'great_hall_card'
Lines executed:0.00% of 6
No branches
Calls executed:0.00% of 3

Function 'getCost'
Lines executed:0.00% of 30
Branches executed:0.00% of 28
Taken at least once:0.00% of 28
No calls

Function 'drawCard'
Lines executed:36.36% of 22
Branches executed:33.33% of 6
Taken at least once:16.67% of 6
Calls executed:0.00% of 1

Function 'getWinners'
Lines executed:0.00% of 24
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
Calls executed:0.00% of 2

Function 'scoreFor'
Lines executed:0.00% of 42
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
Calls executed:0.00% of 3

Function 'isGameOver'
Lines executed:0.00% of 10
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'endTurn'
Lines executed:0.00% of 20
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'whoseTurn'
Lines executed:100.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 9
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'supplyCount'
Lines executed:0.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 3
No branches
Calls executed:0.00% of 1

Function 'numHandCards'
Lines executed:100.00% of 2
No branches
Calls executed:100.00% of 1

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 4

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
Calls executed:0.00% of 3

Function 'shuffle'
Lines executed:93.75% of 16
Branches executed:100.00% of 8
Taken at least once:87.50% of 8
Calls executed:100.00% of 2

Function 'initializeGame'
Lines executed:95.16% of 62
Branches executed:100.00% of 46
Taken at least once:91.30% of 46
Calls executed:100.00% of 5

Function 'kingdomCards'
Lines executed:0.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:0.00% of 3
No branches
No calls

Function 'compare'
Lines executed:83.33% of 6
Branches executed:100.00% of 4
Taken at least once:75.00% of 4
No calls

File 'dominion.c'
Lines executed:17.21% of 581
Branches executed:16.31% of 417
Taken at least once:14.15% of 417
Calls executed:8.00% of 100
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h> 
        -:    5:#include <math.h> 
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 135 returned 100% blocks executed 83%
      135:    8:int compare(const void * a,
        -:    9:  const void * b) {
      135:   10:  if ( * (int * ) a > * (int * ) b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   11:    return 1;
      135:   12:  if ( * (int * ) a < * (int * ) b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
       36:   13:    return -1;
       99:   14:  return 0;
        -:   15:}
        -:   16:
function newGame called 0 returned 0% blocks executed 0%
    #####:   17:struct gameState * newGame() {
    #####:   18:  struct gameState * g = malloc(sizeof(struct gameState));
    #####:   19:  return g;
        -:   20:}
        -:   21:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   22:int * kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   23:  int k8, int k9, int k10) {
    #####:   24:  int * k = malloc(10 * sizeof(int));
    #####:   25:  k[0] = k1;
    #####:   26:  k[1] = k2;
    #####:   27:  k[2] = k3;
    #####:   28:  k[3] = k4;
    #####:   29:  k[4] = k5;
    #####:   30:  k[5] = k6;
    #####:   31:  k[6] = k7;
    #####:   32:  k[7] = k8;
    #####:   33:  k[8] = k9;
    #####:   34:  k[9] = k10;
    #####:   35:  return k;
        -:   36:}
        -:   37:
function initializeGame called 3 returned 100% blocks executed 95%
        3:   38:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   39:  struct gameState * state) {
        -:   40:
        -:   41:  int i;
        -:   42:  int j;
        -:   43:  int it;
        -:   44:    //set up random number generator
        3:   45:  SelectStream(1);
call    0 returned 100%
        3:   46:  PutSeed((long) randomSeed);
call    0 returned 100%
        -:   47:
        -:   48:    //check number of players
        3:   49:  if (numPlayers > MAX_PLAYERS || numPlayers < 2) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:   50:    return -1;
        -:   51:  }
        -:   52:
        -:   53:    //set number of players
        3:   54:  state -> numPlayers = numPlayers;
        -:   55:
        -:   56:    //check selected kingdom cards are different
       33:   57:  for (i = 0; i < 10; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      330:   58:    for (j = 0; j < 10; j++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      300:   59:      if (j != i && kingdomCards[j] == kingdomCards[i]) {
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:   60:        return -1;
        -:   61:      }
        -:   62:    }
        -:   63:  }
        -:   64:
        -:   65:    //initialize supply
        -:   66:    ///////////////////////////////
        -:   67:
        -:   68:    //set number of Curse cards
        3:   69:  if (numPlayers == 2) {
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        1:   70:    state -> supplyCount[curse] = 10;
        2:   71:  } else if (numPlayers == 3) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        1:   72:    state -> supplyCount[curse] = 20;
        -:   73:  } else {
        1:   74:    state -> supplyCount[curse] = 30;
        -:   75:  }
        -:   76:
        -:   77:    //set number of Victory cards
        3:   78:  if (numPlayers == 2) {
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        1:   79:    state -> supplyCount[estate] = 8;
        1:   80:    state -> supplyCount[duchy] = 8;
        1:   81:    state -> supplyCount[province] = 8;
        -:   82:  } else {
        2:   83:    state -> supplyCount[estate] = 12;
        2:   84:    state -> supplyCount[duchy] = 12;
        2:   85:    state -> supplyCount[province] = 12;
        -:   86:  }
        -:   87:
        -:   88:    //set number of Treasure cards
        3:   89:  state -> supplyCount[copper] = 60 - (7 * numPlayers);
        3:   90:  state -> supplyCount[silver] = 40;
        3:   91:  state -> supplyCount[gold] = 30;
        -:   92:
        -:   93:    //set number of Kingdom cards
       63:   94:    for (i = adventurer; i <= treasure_map; i++) //loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:   95:    {
      495:   96:        for (j = 0; j < 10; j++) //loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:   97:        {
      465:   98:          if (kingdomCards[j] == i) {
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:   99:                //check if card is a 'Victory' Kingdom card
       30:  100:            if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens) {
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
       12:  101:              if (numPlayers == 2) {
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        2:  102:                state -> supplyCount[i] = 8;
        -:  103:              } else {
        4:  104:                state -> supplyCount[i] = 12;
        -:  105:              }
        -:  106:            } else {
       24:  107:              state -> supplyCount[i] = 10;
        -:  108:            }
       30:  109:            break;
        -:  110:            } else //card is not in the set choosen for the game
        -:  111:            {
      435:  112:              state -> supplyCount[i] = -1;
        -:  113:            }
        -:  114:          }
        -:  115:
        -:  116:        }
        -:  117:
        -:  118:    ////////////////////////
        -:  119:    //supply intilization complete
        -:  120:
        -:  121:    //set player decks
       12:  122:        for (i = 0; i < numPlayers; i++) {
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        9:  123:          state -> deckCount[i] = 0;
       36:  124:          for (j = 0; j < 3; j++) {
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
       27:  125:            state -> deck[i][j] = estate;
       27:  126:            state -> deckCount[i]++;
        -:  127:          }
       72:  128:          for (j = 3; j < 10; j++) {
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
       63:  129:            state -> deck[i][j] = copper;
       63:  130:            state -> deckCount[i]++;
        -:  131:          }
        -:  132:        }
        -:  133:
        -:  134:    //shuffle player decks
       12:  135:        for (i = 0; i < numPlayers; i++) {
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        9:  136:          if (shuffle(i, state) < 0) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  137:            return -1;
        -:  138:          }
        -:  139:        }
        -:  140:
        -:  141:    //draw player hands
       12:  142:        for (i = 0; i < numPlayers; i++) {
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  143:        //initialize hand size to zero
        9:  144:          state -> handCount[i] = 0;
        9:  145:          state -> discardCount[i] = 0;
        -:  146:        //draw 5 cards
        -:  147:        // for (j = 0; j < 5; j++)
        -:  148:        //  {
        -:  149:        //    drawCard(i, state);
        -:  150:        //  }
        -:  151:        }
        -:  152:
        -:  153:    //set embargo tokens to 0 for all supply piles
       84:  154:        for (i = 0; i <= treasure_map; i++) {
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
       81:  155:          state -> embargoTokens[i] = 0;
        -:  156:        }
        -:  157:
        -:  158:    //initialize first player's turn
        3:  159:        state -> outpostPlayed = 0;
        3:  160:        state -> phase = 0;
        3:  161:        state -> numActions = 1;
        3:  162:        state -> numBuys = 1;
        3:  163:        state -> playedCardCount = 0;
        3:  164:        state -> whoseTurn = 0;
        3:  165:        state -> handCount[state -> whoseTurn] = 0;
        -:  166:    //int it; move to top
        -:  167:
        -:  168:    //Moved draw cards to here, only drawing at the start of a turn
       18:  169:        for (it = 0; it < 5; it++) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       15:  170:          drawCard(state -> whoseTurn, state);
call    0 returned 100%
        -:  171:        }
        -:  172:
        3:  173:        updateCoins(state -> whoseTurn, state, 0);
call    0 returned 100%
        -:  174:
        3:  175:        return 0;
        -:  176:      }
        -:  177:
function shuffle called 9 returned 100% blocks executed 94%
        9:  178:      int shuffle(int player, struct gameState * state) {
        -:  179:
        -:  180:        int newDeck[MAX_DECK];
        9:  181:        int newDeckPos = 0;
        -:  182:        int card;
        -:  183:        int i;
        -:  184:
        9:  185:        if (state -> deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  186:          return -1;
        9:  187:        qsort((void * )(state -> deck[player]), state -> deckCount[player], sizeof(int), compare);
call    0 returned 100%
        -:  188:    /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  189:
      108:  190:        while (state -> deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       90:  191:          card = floor(Random() * state -> deckCount[player]);
call    0 returned 100%
       90:  192:          newDeck[newDeckPos] = state -> deck[player][card];
       90:  193:          newDeckPos++;
      300:  194:          for (i = card; i < state -> deckCount[player] - 1; i++) {
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
      210:  195:            state -> deck[player][i] = state -> deck[player][i + 1];
        -:  196:          }
       90:  197:          state -> deckCount[player]--;
        -:  198:        }
       99:  199:        for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       90:  200:          state -> deck[player][i] = newDeck[i];
       90:  201:          state -> deckCount[player]++;
        -:  202:        }
        -:  203:
        9:  204:        return 0;
        -:  205:      }
        -:  206:
function playCard called 0 returned 0% blocks executed 0%
    #####:  207:      int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState * state) {
        -:  208:        int card;
    #####:  209:    int coin_bonus = 0; //tracks coins gain from actions
        -:  210:
        -:  211:    //check if it is the right phase
    #####:  212:    if (state -> phase != 0) {
branch  0 never executed
branch  1 never executed
    #####:  213:      return -1;
        -:  214:    }
        -:  215:
        -:  216:    //check if player has enough actions
    #####:  217:    if (state -> numActions < 1) {
branch  0 never executed
branch  1 never executed
    #####:  218:      return -1;
        -:  219:    }
        -:  220:
        -:  221:    //get card played
    #####:  222:    card = handCard(handPos, state);
call    0 never executed
        -:  223:
        -:  224:    //check if selected card is an action
    #####:  225:    if (card < adventurer || card > treasure_map) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  226:      return -1;
        -:  227:    }
        -:  228:
        -:  229:    //play card
    #####:  230:    if (cardEffect(card, choice1, choice2, choice3, state, handPos, & coin_bonus) < 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  231:      return -1;
        -:  232:    }
        -:  233:
        -:  234:    //reduce number of actions
    #####:  235:    state -> numActions--;
        -:  236:
        -:  237:    //update coins (Treasure cards may be added with card draws)
    #####:  238:    updateCoins(state -> whoseTurn, state, coin_bonus);
call    0 never executed
        -:  239:
    #####:  240:    return 0;
        -:  241:  }
        -:  242:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  243:  int buyCard(int supplyPos, struct gameState * state) {
        -:  244:    int who;
        -:  245:    if (DEBUG) {
        -:  246:      printf("Entering buyCard...\n");
        -:  247:    }
        -:  248:
        -:  249:    // I don't know what to do about the phase thing.
        -:  250:
    #####:  251:    who = state -> whoseTurn;
        -:  252:
    #####:  253:    if (state -> numBuys < 1) {
branch  0 never executed
branch  1 never executed
        -:  254:      if (DEBUG)
        -:  255:        printf("You do not have any buys left\n");
    #####:  256:      return -1;
    #####:  257:    } else if (supplyCount(supplyPos, state) < 1) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  258:      if (DEBUG)
        -:  259:        printf("There are not any of that type of card left\n");
    #####:  260:      return -1;
    #####:  261:    } else if (state -> coins < getCost(supplyPos)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  262:      if (DEBUG)
        -:  263:        printf("You do not have enough money to buy that. You have %d coins.\n", state -> coins);
    #####:  264:      return -1;
        -:  265:    } else {
    #####:  266:      state -> phase = 1;
        -:  267:        //state->supplyCount[supplyPos]--;
    #####:  268:        gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  269:
    #####:  270:        state -> coins = (state -> coins) - (getCost(supplyPos));
call    0 never executed
    #####:  271:        state -> numBuys--;
        -:  272:        if (DEBUG)
        -:  273:          printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state -> numBuys, state -> coins);
        -:  274:      }
        -:  275:
        -:  276:    //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  277:    //state->discardCount[who]++;
        -:  278:
    #####:  279:      return 0;
        -:  280:    }
        -:  281:
function numHandCards called 9 returned 100% blocks executed 100%
        9:  282:    int numHandCards(struct gameState * state) 
        -:  283:    {
        9:  284:      return state -> handCount[whoseTurn(state)];
call    0 returned 100%
        -:  285:    }
        -:  286:
function handCard called 0 returned 0% blocks executed 0%
    #####:  287:    int handCard(int handPos, struct gameState * state) 
        -:  288:    {
    #####:  289:      int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  290:      return state -> hand[currentPlayer][handPos];
        -:  291:    }
        -:  292:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  293:    int supplyCount(int card, struct gameState * state) 
        -:  294:    {
    #####:  295:      return state -> supplyCount[card];
        -:  296:    }
        -:  297:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  298:    int fullDeckCount(int player, int card, struct gameState * state) 
        -:  299:    {
        -:  300:      int i;
    #####:  301:      int count = 0;
        -:  302:
    #####:  303:      for (i = 0; i < state -> deckCount[player]; i++) 
branch  0 never executed
branch  1 never executed
        -:  304:      {
    #####:  305:        if (state -> deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  306:      }
        -:  307:
    #####:  308:      for (i = 0; i < state -> handCount[player]; i++) 
branch  0 never executed
branch  1 never executed
        -:  309:      {
    #####:  310:        if (state -> hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  311:      }
        -:  312:
    #####:  313:      for (i = 0; i < state -> discardCount[player]; i++) 
branch  0 never executed
branch  1 never executed
        -:  314:      {
    #####:  315:        if (state -> discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  316:      }
        -:  317:
    #####:  318:      return count;
        -:  319:    }
        -:  320:
function whoseTurn called 9 returned 100% blocks executed 100%
        9:  321:    int whoseTurn(struct gameState * state) 
        -:  322:    {
        9:  323:      return state -> whoseTurn;
        -:  324:    }
        -:  325:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  326:    int endTurn(struct gameState * state) 
        -:  327:    {
        -:  328:      int k;
        -:  329:      int i;
    #####:  330:      int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  331:
        -:  332:    //Discard hand
    #####:  333:      for (i = 0; i < state -> handCount[currentPlayer]; i++) 
branch  0 never executed
branch  1 never executed
        -:  334:      {
    #####:  335:        state -> discard[currentPlayer][state -> discardCount[currentPlayer]++] = state -> hand[currentPlayer][i]; //Discard
    #####:  336:        state -> hand[currentPlayer][i] = -1; //Set card to -1
        -:  337:      }
    #####:  338:    state -> handCount[currentPlayer] = 0; //Reset hand count
        -:  339:
        -:  340:    //Code for determining the player
    #####:  341:    if (currentPlayer < (state -> numPlayers - 1)) 
branch  0 never executed
branch  1 never executed
        -:  342:    {
    #####:  343:        state -> whoseTurn = currentPlayer + 1; //Still safe to increment
        -:  344:      } 
        -:  345:      else 
        -:  346:      {
    #####:  347:        state -> whoseTurn = 0; //Max player has been reached, loop back around to player 1
        -:  348:      }
        -:  349:
    #####:  350:      state -> outpostPlayed = 0;
    #####:  351:      state -> phase = 0;
    #####:  352:      state -> numActions = 1;
    #####:  353:      state -> coins = 0;
    #####:  354:      state -> numBuys = 1;
    #####:  355:      state -> playedCardCount = 0;
    #####:  356:      state -> handCount[state -> whoseTurn] = 0;
        -:  357:
        -:  358:    //int k; move to top
        -:  359:    //Next player draws hand
    #####:  360:      for (k = 0; k < 5; k++) 
branch  0 never executed
branch  1 never executed
        -:  361:      {
    #####:  362:        drawCard(state -> whoseTurn, state); //Draw a card
call    0 never executed
        -:  363:      }
        -:  364:
        -:  365:    //Update money
    #####:  366:      updateCoins(state -> whoseTurn, state, 0);
call    0 never executed
        -:  367:
    #####:  368:      return 0;
        -:  369:    }
        -:  370:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  371:    int isGameOver(struct gameState * state) 
        -:  372:    {
        -:  373:      int i;
        -:  374:      int j;
        -:  375:
        -:  376:    //if stack of Province cards is empty, the game ends
    #####:  377:      if (state -> supplyCount[province] == 0) 
branch  0 never executed
branch  1 never executed
        -:  378:      {
    #####:  379:        return 1;
        -:  380:      }
        -:  381:
        -:  382:    //if three supply pile are at 0, the game ends
    #####:  383:      j = 0;
    #####:  384:      for (i = 0; i < 25; i++) 
branch  0 never executed
branch  1 never executed
        -:  385:      {
    #####:  386:        if (state -> supplyCount[i] == 0) 
branch  0 never executed
branch  1 never executed
        -:  387:        {
    #####:  388:          j++;
        -:  389:        }
        -:  390:      }
    #####:  391:      if (j >= 3) 
branch  0 never executed
branch  1 never executed
        -:  392:      {
    #####:  393:        return 1;
        -:  394:      }
        -:  395:
    #####:  396:      return 0;
        -:  397:    }
        -:  398:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  399:    int scoreFor(int player, struct gameState * state) 
        -:  400:    {
        -:  401:      int i;
    #####:  402:      int score = 0;
        -:  403:    //score from hand
    #####:  404:      for (i = 0; i < state -> handCount[player]; i++) 
branch  0 never executed
branch  1 never executed
        -:  405:      {
    #####:  406:        if (state -> hand[player][i] == curse) 
branch  0 never executed
branch  1 never executed
        -:  407:        {
    #####:  408:          score = score - 1;
        -:  409:        };
    #####:  410:        if (state -> hand[player][i] == estate) 
branch  0 never executed
branch  1 never executed
        -:  411:        {
    #####:  412:          score = score + 1;
        -:  413:        };
    #####:  414:        if (state -> hand[player][i] == duchy) 
branch  0 never executed
branch  1 never executed
        -:  415:        {
    #####:  416:          score = score + 3;
        -:  417:        };
    #####:  418:        if (state -> hand[player][i] == province) 
branch  0 never executed
branch  1 never executed
        -:  419:        {
    #####:  420:          score = score + 6;
        -:  421:        };
    #####:  422:        if (state -> hand[player][i] == great_hall) 
branch  0 never executed
branch  1 never executed
        -:  423:        {
    #####:  424:          score = score + 1;
        -:  425:        };
    #####:  426:        if (state -> hand[player][i] == gardens) 
branch  0 never executed
branch  1 never executed
        -:  427:        {
    #####:  428:          score = score + (fullDeckCount(player, 0, state) / 10);
call    0 never executed
        -:  429:        };
        -:  430:      }
        -:  431:
        -:  432:    //score from discard
    #####:  433:      for (i = 0; i < state -> discardCount[player]; i++) 
branch  0 never executed
branch  1 never executed
        -:  434:      {
    #####:  435:        if (state -> discard[player][i] == curse) 
branch  0 never executed
branch  1 never executed
        -:  436:        {
    #####:  437:          score = score - 1;
        -:  438:        };
    #####:  439:        if (state -> discard[player][i] == estate) 
branch  0 never executed
branch  1 never executed
        -:  440:        {
    #####:  441:          score = score + 1;
        -:  442:        };
    #####:  443:        if (state -> discard[player][i] == duchy) 
branch  0 never executed
branch  1 never executed
        -:  444:        {
    #####:  445:          score = score + 3;
        -:  446:        };
    #####:  447:        if (state -> discard[player][i] == province) 
branch  0 never executed
branch  1 never executed
        -:  448:        {
    #####:  449:          score = score + 6;
        -:  450:        };
    #####:  451:        if (state -> discard[player][i] == great_hall) 
branch  0 never executed
branch  1 never executed
        -:  452:        {
    #####:  453:          score = score + 1;
        -:  454:        };
    #####:  455:        if (state -> discard[player][i] == gardens) 
branch  0 never executed
branch  1 never executed
        -:  456:        {
    #####:  457:          score = score + (fullDeckCount(player, 0, state) / 10);
call    0 never executed
        -:  458:        };
        -:  459:      }
        -:  460:
        -:  461:    //score from deck
    #####:  462:      for (i = 0; i < state -> discardCount[player]; i++) 
branch  0 never executed
branch  1 never executed
        -:  463:      {
    #####:  464:        if (state -> deck[player][i] == curse) 
branch  0 never executed
branch  1 never executed
        -:  465:        {
    #####:  466:          score = score - 1;
        -:  467:        };
    #####:  468:        if (state -> deck[player][i] == estate) 
branch  0 never executed
branch  1 never executed
        -:  469:        {
    #####:  470:          score = score + 1;
        -:  471:        };
    #####:  472:        if (state -> deck[player][i] == duchy) 
branch  0 never executed
branch  1 never executed
        -:  473:        {
    #####:  474:          score = score + 3;
        -:  475:        };
    #####:  476:        if (state -> deck[player][i] == province) 
branch  0 never executed
branch  1 never executed
        -:  477:        {
    #####:  478:          score = score + 6;
        -:  479:        };
    #####:  480:        if (state -> deck[player][i] == great_hall) 
branch  0 never executed
branch  1 never executed
        -:  481:        {
    #####:  482:          score = score + 1;
        -:  483:        };
    #####:  484:        if (state -> deck[player][i] == gardens) 
branch  0 never executed
branch  1 never executed
        -:  485:        {
    #####:  486:          score = score + (fullDeckCount(player, 0, state) / 10);
call    0 never executed
        -:  487:        };
        -:  488:      }
        -:  489:
    #####:  490:      return score;
        -:  491:    }
        -:  492:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  493:    int getWinners(int players[MAX_PLAYERS], struct gameState * state) 
        -:  494:    {
        -:  495:      int i;
        -:  496:      int j;
        -:  497:      int highScore;
        -:  498:      int currentPlayer;
        -:  499:
        -:  500:    //get score for each player
    #####:  501:      for (i = 0; i < MAX_PLAYERS; i++) 
branch  0 never executed
branch  1 never executed
        -:  502:      {
        -:  503:        //set unused player scores to -9999
    #####:  504:        if (i >= state -> numPlayers) 
branch  0 never executed
branch  1 never executed
        -:  505:        {
    #####:  506:          players[i] = -9999;
        -:  507:        } else {
    #####:  508:          players[i] = scoreFor(i, state);
call    0 never executed
        -:  509:        }
        -:  510:      }
        -:  511:
        -:  512:    //find highest score
    #####:  513:      j = 0;
    #####:  514:      for (i = 0; i < MAX_PLAYERS; i++) 
branch  0 never executed
branch  1 never executed
        -:  515:      {
    #####:  516:        if (players[i] > players[j]) 
branch  0 never executed
branch  1 never executed
        -:  517:        {
    #####:  518:          j = i;
        -:  519:        }
        -:  520:      }
    #####:  521:      highScore = players[j];
        -:  522:
        -:  523:    //add 1 to players who had less turns
    #####:  524:      currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  525:      for (i = 0; i < MAX_PLAYERS; i++) 
branch  0 never executed
branch  1 never executed
        -:  526:      {
    #####:  527:        if (players[i] == highScore && i > currentPlayer) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  528:        {
    #####:  529:          players[i]++;
        -:  530:        }
        -:  531:      }
        -:  532:
        -:  533:    //find new highest score
    #####:  534:      j = 0;
    #####:  535:      for (i = 0; i < MAX_PLAYERS; i++) 
branch  0 never executed
branch  1 never executed
        -:  536:      {
    #####:  537:        if (players[i] > players[j]) 
branch  0 never executed
branch  1 never executed
        -:  538:        {
    #####:  539:          j = i;
        -:  540:        }
        -:  541:      }
    #####:  542:      highScore = players[j];
        -:  543:
        -:  544:    //set winners in array to 1 and rest to 0
    #####:  545:      for (i = 0; i < MAX_PLAYERS; i++) 
branch  0 never executed
branch  1 never executed
        -:  546:      {
    #####:  547:        if (players[i] == highScore) 
branch  0 never executed
branch  1 never executed
        -:  548:        {
    #####:  549:          players[i] = 1;
        -:  550:        } else {
    #####:  551:          players[i] = 0;
        -:  552:        }
        -:  553:      }
        -:  554:
    #####:  555:      return 0;
        -:  556:    }
        -:  557:
function drawCard called 15 returned 100% blocks executed 38%
       15:  558:    int drawCard(int player, struct gameState * state) 
        -:  559:    {
        -:  560:      int count;
        -:  561:      int deckCounter;
       15:  562:    if (state -> deckCount[player] <= 0) { //Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  563:
        -:  564:        //Step 1 Shuffle the discard pile back into a deck
        -:  565:      int i;
        -:  566:        //Move discard to deck
    #####:  567:      for (i = 0; i < state -> discardCount[player]; i++) 
branch  0 never executed
branch  1 never executed
        -:  568:      {
    #####:  569:        state -> deck[player][i] = state -> discard[player][i];
    #####:  570:        state -> discard[player][i] = -1;
        -:  571:      }
        -:  572:
    #####:  573:      state -> deckCount[player] = state -> discardCount[player];
    #####:  574:        state -> discardCount[player] = 0; //Reset discard
        -:  575:
        -:  576:        //Shufffle the deck
    #####:  577:        shuffle(player, state); //Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  578:
        -:  579:        if (DEBUG) 
        -:  580:        { //Debug statements
        -:  581:          printf("Deck count now: %d\n", state -> deckCount[player]);
        -:  582:        }
        -:  583:
    #####:  584:        state -> discardCount[player] = 0;
        -:  585:
        -:  586:        //Step 2 Draw Card
    #####:  587:        count = state -> handCount[player]; //Get current player's hand count
        -:  588:
        -:  589:        if (DEBUG) 
        -:  590:        { //Debug statements
        -:  591:          printf("Current hand count: %d\n", count);
        -:  592:        }
        -:  593:
    #####:  594:        deckCounter = state -> deckCount[player]; //Create a holder for the deck count
        -:  595:
    #####:  596:        if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  597:          return -1;
        -:  598:
    #####:  599:        state -> hand[player][count] = state -> deck[player][deckCounter - 1]; //Add card to hand
    #####:  600:        state -> deckCount[player]--;
    #####:  601:        state -> handCount[player]++; //Increment hand count
        -:  602:      } 
        -:  603:      else 
        -:  604:      {
       15:  605:        int count = state -> handCount[player]; //Get current hand count for player
        -:  606:        int deckCounter;
        -:  607:        if (DEBUG) 
        -:  608:        { //Debug statements
        -:  609:          printf("Current hand count: %d\n", count);
        -:  610:        }
        -:  611:
       15:  612:        deckCounter = state -> deckCount[player]; //Create holder for the deck count
       15:  613:        state -> hand[player][count] = state -> deck[player][deckCounter - 1]; //Add card to the hand
       15:  614:        state -> deckCount[player]--;
       15:  615:        state -> handCount[player]++; //Increment hand count
        -:  616:      }
       15:  617:      return 0;
        -:  618:    }
        -:  619:
function getCost called 0 returned 0% blocks executed 0%
    #####:  620:    int getCost(int cardNumber) 
        -:  621:    {
    #####:  622:      switch (cardNumber) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  623:      {
        -:  624:        case curse:
    #####:  625:        return 0;
        -:  626:        case estate:
    #####:  627:        return 2;
        -:  628:        case duchy:
    #####:  629:        return 5;
        -:  630:        case province:
    #####:  631:        return 8;
        -:  632:        case copper:
    #####:  633:        return 0;
        -:  634:        case silver:
    #####:  635:        return 3;
        -:  636:        case gold:
    #####:  637:        return 6;
        -:  638:        case adventurer:
    #####:  639:        return 6;
        -:  640:        case council_room:
    #####:  641:        return 5;
        -:  642:        case feast:
    #####:  643:        return 4;
        -:  644:        case gardens:
    #####:  645:        return 4;
        -:  646:        case mine:
    #####:  647:        return 5;
        -:  648:        case remodel:
    #####:  649:        return 4;
        -:  650:        case smithy:
    #####:  651:        return 4;
        -:  652:        case village:
    #####:  653:        return 3;
        -:  654:        case baron:
    #####:  655:        return 4;
        -:  656:        case great_hall:
    #####:  657:        return 3;
        -:  658:        case minion:
    #####:  659:        return 5;
        -:  660:        case steward:
    #####:  661:        return 3;
        -:  662:        case tribute:
    #####:  663:        return 5;
        -:  664:        case ambassador:
    #####:  665:        return 3;
        -:  666:        case cutpurse:
    #####:  667:        return 4;
        -:  668:        case embargo:
    #####:  669:        return 2;
        -:  670:        case outpost:
    #####:  671:        return 5;
        -:  672:        case salvager:
    #####:  673:        return 4;
        -:  674:        case sea_hag:
    #####:  675:        return 4;
        -:  676:        case treasure_map:
    #####:  677:        return 4;
        -:  678:      }
        -:  679:
    #####:  680:      return -1;
        -:  681:    }
        -:  682:
        -:  683://A2 Refactor CLEAN CARD | NO BUGS
function great_hall_card called 0 returned 0% blocks executed 0%
    #####:  684:    int great_hall_card(int handPos, struct gameState * state) 
        -:  685:    {
    #####:  686:      int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  687:
    #####:  688:      drawCard(currentPlayer, state);
call    0 never executed
        -:  689:
        -:  690:    // provides another action turn
    #####:  691:      state -> numActions++;
        -:  692:
        -:  693:    // played card to discard pile
    #####:  694:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  695:      return 0;
        -:  696:    }
        -:  697:
        -:  698://A2 Refactor
function village_card called 0 returned 0% blocks executed 0%
    #####:  699:    int village_card(int handPos, struct gameState * state) 
        -:  700:    {
    #####:  701:      int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  702:
    #####:  703:      drawCard(currentPlayer, state);
call    0 never executed
        -:  704:
        -:  705:    //BUG: Should only provide 2 action turns
    #####:  706:      state -> numActions = state -> numActions + 4;
        -:  707:
        -:  708:    // played card to discard pile
    #####:  709:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  710:      return 0;
        -:  711:    }
        -:  712:
        -:  713://A2 Refactor
function council_room_card called 0 returned 0% blocks executed 0%
    #####:  714:    int council_room_card(int handPos, struct gameState * state) 
        -:  715:    {
        -:  716:      int i;
    #####:  717:      int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  718:
        -:  719:    // draw 4 cards
    #####:  720:      for (i = 0; i < 4; i++) {
branch  0 never executed
branch  1 never executed
    #####:  721:        drawCard(currentPlayer, state);
call    0 never executed
        -:  722:      }
        -:  723:
        -:  724:    //BUG: Card provides another buy turn 
        -:  725:    //state->numBuys++;      
        -:  726:
        -:  727:    // all other players draw a card
    #####:  728:      for (i = 0; i < state -> numPlayers; i++) 
branch  0 never executed
branch  1 never executed
        -:  729:      {
    #####:  730:        if (i != currentPlayer) 
branch  0 never executed
branch  1 never executed
        -:  731:        {
    #####:  732:          drawCard(i, state);
call    0 never executed
        -:  733:        }
        -:  734:      }
        -:  735:    // played card to discard pile
    #####:  736:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  737:      return 0;
        -:  738:    }
        -:  739:
        -:  740://A2 Refactor
function adventurer_card called 0 returned 0% blocks executed 0%
    #####:  741:    int adventurer_card(struct gameState * state) 
        -:  742:    {
    #####:  743:      int z = 0;
        -:  744:      int cardDrawn;
    #####:  745:      int drawntreasure = 0;
    #####:  746:      int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  747:      int temphand[MAX_HAND];
        -:  748:
    #####:  749:    while (drawntreasure < 2) 
branch  0 never executed
branch  1 never executed
        -:  750:    { // when the deck is empty, reshuffle the discard and make it the deck
    #####:  751:      if (state -> deckCount[currentPlayer] < 1) 
branch  0 never executed
branch  1 never executed
        -:  752:      {
    #####:  753:        shuffle(currentPlayer, state);
call    0 never executed
        -:  754:      }
    #####:  755:      drawCard(currentPlayer, state);
call    0 never executed
        -:  756:        // defines the drawn card as the top card
    #####:  757:      cardDrawn = state -> hand[currentPlayer][state -> handCount[currentPlayer] - 1];
    #####:  758:      if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  759:        //drawntreasure++;
        -:  760:        //BUG: increments by 4. Should increment by 1
    #####:  761:        drawntreasure += 4;
        -:  762:      else 
        -:  763:      {
    #####:  764:        temphand[z] = cardDrawn;
        -:  765:            // removes the most recently drawn (top) card
    #####:  766:        state -> handCount[currentPlayer]--;
    #####:  767:        z++;
        -:  768:      }
        -:  769:    }
    #####:  770:    while (z - 1 >= 0) 
branch  0 never executed
branch  1 never executed
        -:  771:    {
        -:  772:        // discard all cards in play that have been drawn
    #####:  773:      state -> discard[currentPlayer][state -> discardCount[currentPlayer]++] = temphand[z - 1];
    #####:  774:      z = z - 1;
        -:  775:    }
    #####:  776:    return 0;
        -:  777:  }
        -:  778:
        -:  779://A2 Refactor
function smithy_card called 0 returned 0% blocks executed 0%
    #####:  780:  int smithy_card(int handPos, struct gameState * state) 
        -:  781:  {
        -:  782:    int i;
    #####:  783:    int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  784:    //BUG: Should only draw 3 cards  
    #####:  785:    for (i = 0; i < 4; i++) 
branch  0 never executed
branch  1 never executed
        -:  786:    {
    #####:  787:      drawCard(currentPlayer, state);
call    0 never executed
        -:  788:    }
        -:  789:    //discard card from hand
    #####:  790:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  791:    return 0;
        -:  792:  }
        -:  793:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  794:  int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState * state, int handPos, int * bonus) {
        -:  795:    int i;
        -:  796:    int j;
        -:  797:    int k;
        -:  798:    int x;
        -:  799:    int index;
    #####:  800:    int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  801:    int nextPlayer = currentPlayer + 1;
        -:  802:
    #####:  803:    int tributeRevealedCards[2] = 
        -:  804:    {
        -:  805:      -1, -1
        -:  806:    };
        -:  807:    int temphand[MAX_HAND]; // moved above the if statement
        -:  808:    //int drawntreasure=0; // commented out as part of A2 Refactor
        -:  809:    //int cardDrawn; // commented out as part of A2 Refactor
        -:  810:    //int z = 0;// this is the counter for the temp hand // commented out as part of A2 Refactor
    #####:  811:    if (nextPlayer > (state -> numPlayers - 1)) 
branch  0 never executed
branch  1 never executed
        -:  812:    {
    #####:  813:      nextPlayer = 0;
        -:  814:    }
        -:  815:
        -:  816:    //uses switch to select card and perform actions
    #####:  817:    switch (card) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  818:    {
        -:  819:        // A2 Refactor  
        -:  820:      case adventurer:
    #####:  821:      return adventurer_card(state);
call    0 never executed
        -:  822:
        -:  823:        // A2 Refactor    
        -:  824:      case council_room:
    #####:  825:      return council_room_card(handPos, state);
call    0 never executed
        -:  826:
        -:  827:        // A2 Refactor  
        -:  828:      case smithy:
    #####:  829:      return smithy_card(handPos, state);
call    0 never executed
        -:  830:
        -:  831:        // A2 Refactor  
        -:  832:      case village:
    #####:  833:      return village_card(handPos, state);
call    0 never executed
        -:  834:
        -:  835:        // A2 Refactor
        -:  836:      case great_hall:
    #####:  837:      return great_hall_card(handPos, state);
call    0 never executed
        -:  838:
        -:  839:      case feast:
        -:  840:        //gain card with cost up to 5
        -:  841:        //Backup hand
    #####:  842:      for (i = 0; i <= state -> handCount[currentPlayer]; i++) 
branch  0 never executed
branch  1 never executed
        -:  843:      {
    #####:  844:            temphand[i] = state -> hand[currentPlayer][i]; //Backup card
    #####:  845:            state -> hand[currentPlayer][i] = -1; //Set to nothing
        -:  846:          }
        -:  847:        //Backup hand
        -:  848:
        -:  849:        //Update Coins for Buy
    #####:  850:          updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  851:        x = 1; //Condition to loop on
    #####:  852:        while (x == 1) 
branch  0 never executed
branch  1 never executed
        -:  853:        { //Buy one card
    #####:  854:          if (supplyCount(choice1, state) <= 0) 
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  855:          {
        -:  856:            if (DEBUG)
        -:  857:              printf("None of that card left, sorry!\n");
        -:  858:
        -:  859:            if (DEBUG) 
        -:  860:            {
        -:  861:              printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  862:            }
        -:  863:          } 
    #####:  864:          else if (state -> coins < getCost(choice1)) 
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  865:          {
    #####:  866:            printf("That card is too expensive!\n");
call    0 never executed
        -:  867:
        -:  868:            if (DEBUG) 
        -:  869:            {
        -:  870:              printf("Coins: %d < %d\n", state -> coins, getCost(choice1));
        -:  871:            }
        -:  872:          } 
        -:  873:          else 
        -:  874:          {
        -:  875:            if (DEBUG) 
        -:  876:            {
        -:  877:              printf("Deck Count: %d\n", state -> handCount[currentPlayer] + state -> deckCount[currentPlayer] + state -> discardCount[currentPlayer]);
        -:  878:            }
        -:  879:
    #####:  880:                gainCard(choice1, state, 0, currentPlayer); //Gain the card
call    0 never executed
    #####:  881:                x = 0; //No more buying cards
        -:  882:
        -:  883:                if (DEBUG) 
        -:  884:                {
        -:  885:                  printf("Deck Count: %d\n", state -> handCount[currentPlayer] + state -> deckCount[currentPlayer] + state -> discardCount[currentPlayer]);
        -:  886:                }
        -:  887:
        -:  888:              }
        -:  889:            }
        -:  890:
        -:  891:        //Reset Hand
    #####:  892:            for (i = 0; i <= state -> handCount[currentPlayer]; i++) 
branch  0 never executed
branch  1 never executed
        -:  893:            {
    #####:  894:              state -> hand[currentPlayer][i] = temphand[i];
    #####:  895:              temphand[i] = -1;
        -:  896:            }
        -:  897:        //Reset Hand
        -:  898:
    #####:  899:            return 0;
        -:  900:
        -:  901:            case gardens:
    #####:  902:            return -1;
        -:  903:
        -:  904:            case mine:
    #####:  905:        j = state -> hand[currentPlayer][choice1]; //store card we will trash
        -:  906:
    #####:  907:        if (state -> hand[currentPlayer][choice1] < copper || state -> hand[currentPlayer][choice1] > gold) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  908:        {
    #####:  909:          return -1;
        -:  910:        }
        -:  911:
    #####:  912:        if (choice2 > treasure_map || choice2 < curse) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  913:        {
    #####:  914:          return -1;
        -:  915:        }
        -:  916:
    #####:  917:        if ((getCost(state -> hand[currentPlayer][choice1]) + 3) > getCost(choice2)) 
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  918:        {
    #####:  919:          return -1;
        -:  920:        }
        -:  921:
    #####:  922:        gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  923:
        -:  924:        //discard card from hand
    #####:  925:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  926:
        -:  927:        //discard trashed card
    #####:  928:        for (i = 0; i < state -> handCount[currentPlayer]; i++) 
branch  0 never executed
branch  1 never executed
        -:  929:        {
    #####:  930:          if (state -> hand[currentPlayer][i] == j) 
branch  0 never executed
branch  1 never executed
        -:  931:          {
    #####:  932:            discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  933:            break;
        -:  934:          }
        -:  935:        }
        -:  936:
    #####:  937:        return 0;
        -:  938:
        -:  939:        case remodel:
    #####:  940:        j = state -> hand[currentPlayer][choice1]; //store card we will trash
        -:  941:
    #####:  942:        if ((getCost(state -> hand[currentPlayer][choice1]) + 2) > getCost(choice2)) 
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  943:        {
    #####:  944:          return -1;
        -:  945:        }
        -:  946:
    #####:  947:        gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  948:
        -:  949:        //discard card from hand
    #####:  950:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  951:
        -:  952:        //discard trashed card
    #####:  953:        for (i = 0; i < state -> handCount[currentPlayer]; i++) 
branch  0 never executed
branch  1 never executed
        -:  954:        {
    #####:  955:          if (state -> hand[currentPlayer][i] == j) 
branch  0 never executed
branch  1 never executed
        -:  956:          {
    #####:  957:            discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  958:            break;
        -:  959:          }
        -:  960:        }
    #####:  961:        return 0;
        -:  962:
        -:  963:        case baron:
    #####:  964:        state -> numBuys++; //Increase buys by 1!
    #####:  965:        if (choice1 > 0) 
branch  0 never executed
branch  1 never executed
        -:  966:        { //Boolean true or going to discard an estate
    #####:  967:            int p = 0; //Iterator for hand!
    #####:  968:            int card_not_discarded = 1; //Flag for discard set!
    #####:  969:            while (card_not_discarded) 
branch  0 never executed
branch  1 never executed
        -:  970:            {
    #####:  971:                if (state -> hand[currentPlayer][p] == estate) 
branch  0 never executed
branch  1 never executed
        -:  972:                { //Found an estate card!
    #####:  973:                    state -> coins += 4; //Add 4 coins to the amount of coins
    #####:  974:                    state -> discard[currentPlayer][state -> discardCount[currentPlayer]] = state -> hand[currentPlayer][p];
    #####:  975:                    state -> discardCount[currentPlayer]++;
    #####:  976:                    for (; p < state -> handCount[currentPlayer]; p++) 
branch  0 never executed
branch  1 never executed
        -:  977:                    {
    #####:  978:                      state -> hand[currentPlayer][p] = state -> hand[currentPlayer][p + 1];
        -:  979:                    }
    #####:  980:                    state -> hand[currentPlayer][state -> handCount[currentPlayer]] = -1;
    #####:  981:                    state -> handCount[currentPlayer]--;
    #####:  982:                    card_not_discarded = 0; //Exit the loop
        -:  983:                  } 
    #####:  984:                  else if (p > state -> handCount[currentPlayer]) 
branch  0 never executed
branch  1 never executed
        -:  985:                  {
        -:  986:                    if (DEBUG) 
        -:  987:                    {
        -:  988:                      printf("No estate cards in your hand, invalid choice\n");
        -:  989:                      printf("Must gain an estate if there are any\n");
        -:  990:                    }
    #####:  991:                    if (supplyCount(estate, state) > 0) 
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  992:                    {
    #####:  993:                      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  994:                        state -> supplyCount[estate]--; //Decrement estates
    #####:  995:                        if (supplyCount(estate, state) == 0) 
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  996:                        {
    #####:  997:                          isGameOver(state);
call    0 never executed
        -:  998:                        }
        -:  999:                      }
    #####: 1000:                    card_not_discarded = 0; //Exit the loop
        -: 1001:                  } 
        -: 1002:                  else 
        -: 1003:                  {
    #####: 1004:                    p++; //Next card
        -: 1005:                  }
        -: 1006:                }
        -: 1007:              } 
        -: 1008:              else 
        -: 1009:              {
    #####: 1010:                if (supplyCount(estate, state) > 0) 
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1011:                {
    #####: 1012:                gainCard(estate, state, 0, currentPlayer); //Gain an estate
call    0 never executed
    #####: 1013:                state -> supplyCount[estate]--; //Decrement Estates
    #####: 1014:                if (supplyCount(estate, state) == 0) 
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1015:                {
    #####: 1016:                  isGameOver(state);
call    0 never executed
        -: 1017:                }
        -: 1018:              }
        -: 1019:            }
    #####: 1020:            return 0;
        -: 1021:
        -: 1022:            case minion:
        -: 1023:        //+1 action
    #####: 1024:            state -> numActions++;
        -: 1025:
        -: 1026:        //discard card from hand
    #####: 1027:            discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1028:
    #####: 1029:        if (choice1) //+2 coins
branch  0 never executed
branch  1 never executed
        -: 1030:        {
    #####: 1031:          state -> coins = state -> coins + 2;
    #####: 1032:        } else if (choice2) //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -: 1033:        {
        -: 1034:            //discard hand
    #####: 1035:          while (numHandCards(state) > 0) 
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1036:          {
    #####: 1037:            discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1038:          }
        -: 1039:
        -: 1040:            //draw 4
    #####: 1041:          for (i = 0; i < 4; i++) 
branch  0 never executed
branch  1 never executed
        -: 1042:          {
    #####: 1043:            drawCard(currentPlayer, state);
call    0 never executed
        -: 1044:          }
        -: 1045:
        -: 1046:            //other players discard hand and redraw if hand size > 4
    #####: 1047:          for (i = 0; i < state -> numPlayers; i++) 
branch  0 never executed
branch  1 never executed
        -: 1048:          {
    #####: 1049:            if (i != currentPlayer) 
branch  0 never executed
branch  1 never executed
        -: 1050:            {
    #####: 1051:              if (state -> handCount[i] > 4) 
branch  0 never executed
branch  1 never executed
        -: 1052:              {
        -: 1053:                        //discard hand
    #####: 1054:                while (state -> handCount[i] > 0) 
branch  0 never executed
branch  1 never executed
        -: 1055:                {
    #####: 1056:                  discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1057:                }
        -: 1058:                        //draw 4
    #####: 1059:                for (j = 0; j < 4; j++) 
branch  0 never executed
branch  1 never executed
        -: 1060:                {
    #####: 1061:                  drawCard(i, state);
call    0 never executed
        -: 1062:                }
        -: 1063:              }
        -: 1064:            }
        -: 1065:          }
        -: 1066:        }
    #####: 1067:        return 0;
        -: 1068:
        -: 1069:        case steward:
    #####: 1070:        if (choice1 == 1) 
branch  0 never executed
branch  1 never executed
        -: 1071:        {
        -: 1072:          //+2 cards
    #####: 1073:          drawCard(currentPlayer, state);
call    0 never executed
    #####: 1074:          drawCard(currentPlayer, state);
call    0 never executed
        -: 1075:        } 
    #####: 1076:        else if (choice1 == 2) 
branch  0 never executed
branch  1 never executed
        -: 1077:        {
        -: 1078:          //+2 coins
    #####: 1079:          state -> coins = state -> coins + 2;
        -: 1080:        } 
        -: 1081:        else 
        -: 1082:        {
        -: 1083:          //trash 2 cards in hand
    #####: 1084:          discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1085:          discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1086:        }
        -: 1087:
        -: 1088:        //discard card from hand
    #####: 1089:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1090:        return 0;
        -: 1091:
        -: 1092:        case tribute:
    #####: 1093:        if ((state -> discardCount[nextPlayer] + state -> deckCount[nextPlayer]) <= 1) 
branch  0 never executed
branch  1 never executed
        -: 1094:        {
    #####: 1095:          if (state -> deckCount[nextPlayer] > 0) 
branch  0 never executed
branch  1 never executed
        -: 1096:          {
    #####: 1097:            tributeRevealedCards[0] = state -> deck[nextPlayer][state -> deckCount[nextPlayer] - 1];
    #####: 1098:            state -> deckCount[nextPlayer]--;
        -: 1099:          } 
    #####: 1100:          else if (state -> discardCount[nextPlayer] > 0) 
branch  0 never executed
branch  1 never executed
        -: 1101:          {
    #####: 1102:            tributeRevealedCards[0] = state -> discard[nextPlayer][state -> discardCount[nextPlayer] - 1];
    #####: 1103:            state -> discardCount[nextPlayer]--;
        -: 1104:          } 
        -: 1105:          else 
        -: 1106:          {
        -: 1107:                //No Card to Reveal
        -: 1108:            if (DEBUG) 
        -: 1109:            {
        -: 1110:              printf("No cards to reveal\n");
        -: 1111:            }
        -: 1112:          }
        -: 1113:        } 
        -: 1114:        else 
        -: 1115:        {
    #####: 1116:          if (state -> deckCount[nextPlayer] == 0) 
branch  0 never executed
branch  1 never executed
        -: 1117:          {
    #####: 1118:            for (i = 0; i < state -> discardCount[nextPlayer]; i++) 
branch  0 never executed
branch  1 never executed
        -: 1119:            {
    #####: 1120:                    state -> deck[nextPlayer][i] = state -> discard[nextPlayer][i]; //Move to deck
    #####: 1121:                    state -> deckCount[nextPlayer]++;
    #####: 1122:                    state -> discard[nextPlayer][i] = -1;
    #####: 1123:                    state -> discardCount[nextPlayer]--;
        -: 1124:                  }
        -: 1125:
    #####: 1126:                shuffle(nextPlayer, state); //Shuffle the deck
call    0 never executed
        -: 1127:              }
    #####: 1128:              tributeRevealedCards[0] = state -> deck[nextPlayer][state -> deckCount[nextPlayer] - 1];
    #####: 1129:              state -> deck[nextPlayer][state -> deckCount[nextPlayer]--] = -1;
    #####: 1130:              state -> deckCount[nextPlayer]--;
    #####: 1131:              tributeRevealedCards[1] = state -> deck[nextPlayer][state -> deckCount[nextPlayer] - 1];
    #####: 1132:              state -> deck[nextPlayer][state -> deckCount[nextPlayer]--] = -1;
    #####: 1133:              state -> deckCount[nextPlayer]--;
        -: 1134:            }
        -: 1135:
    #####: 1136:        if (tributeRevealedCards[0] == tributeRevealedCards[1]) 
branch  0 never executed
branch  1 never executed
        -: 1137:        { //If we have a duplicate card, just drop one 
    #####: 1138:          state -> playedCards[state -> playedCardCount] = tributeRevealedCards[1];
    #####: 1139:          state -> playedCardCount++;
    #####: 1140:          tributeRevealedCards[1] = -1;
        -: 1141:        }
        -: 1142:
    #####: 1143:        for (i = 0; i <= 2; i++) 
branch  0 never executed
branch  1 never executed
        -: 1144:        {
    #####: 1145:            if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1146:            { //Treasure cards
    #####: 1147:              state -> coins += 2;
        -: 1148:            } 
    #####: 1149:            else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
        -: 1150:            { //Victory Card Found
    #####: 1151:              drawCard(currentPlayer, state);
call    0 never executed
    #####: 1152:              drawCard(currentPlayer, state);
call    0 never executed
        -: 1153:            } 
        -: 1154:            else 
        -: 1155:            { //Action Card
    #####: 1156:              state -> numActions = state -> numActions + 2;
        -: 1157:            }
        -: 1158:          }
        -: 1159:
    #####: 1160:          return 0;
        -: 1161:
        -: 1162:          case ambassador:
    #####: 1163:        j = 0; //used to check if player has enough cards to discard
        -: 1164:
    #####: 1165:        if (choice2 > 2 || choice2 < 0) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1166:        {
    #####: 1167:          return -1;
        -: 1168:        }
        -: 1169:
    #####: 1170:        if (choice1 == handPos) 
branch  0 never executed
branch  1 never executed
        -: 1171:        {
    #####: 1172:          return -1;
        -: 1173:        }
        -: 1174:
    #####: 1175:        for (i = 0; i < state -> handCount[currentPlayer]; i++) 
branch  0 never executed
branch  1 never executed
        -: 1176:        {
    #####: 1177:          if (i != handPos && i == state -> hand[currentPlayer][choice1] && i != choice1) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1178:          {
    #####: 1179:            j++;
        -: 1180:          }
        -: 1181:        }
    #####: 1182:        if (j < choice2) 
branch  0 never executed
branch  1 never executed
        -: 1183:        {
    #####: 1184:          return -1;
        -: 1185:        }
        -: 1186:
        -: 1187:        if (DEBUG)
        -: 1188:          printf("Player %d reveals card number: %d\n", currentPlayer, state -> hand[currentPlayer][choice1]);
        -: 1189:
        -: 1190:        //increase supply count for choosen card by amount being discarded
    #####: 1191:        state -> supplyCount[state -> hand[currentPlayer][choice1]] += choice2;
        -: 1192:
        -: 1193:        //each other player gains a copy of revealed card
    #####: 1194:        for (i = 0; i < state -> numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1195:          if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####: 1196:            gainCard(state -> hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1197:          }
        -: 1198:        }
        -: 1199:
        -: 1200:        //discard played card from hand
    #####: 1201:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1202:
        -: 1203:        //trash copies of cards returned to supply
    #####: 1204:        for (j = 0; j < choice2; j++) {
branch  0 never executed
branch  1 never executed
    #####: 1205:          for (i = 0; i < state -> handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1206:            if (state -> hand[currentPlayer][i] == state -> hand[currentPlayer][choice1]) {
branch  0 never executed
branch  1 never executed
    #####: 1207:              discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1208:              break;
        -: 1209:            }
        -: 1210:          }
        -: 1211:        }
        -: 1212:
    #####: 1213:        return 0;
        -: 1214:
        -: 1215:        case cutpurse:
        -: 1216:
    #####: 1217:        updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1218:        for (i = 0; i < state -> numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1219:          if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####: 1220:            for (j = 0; j < state -> handCount[i]; j++) {
branch  0 never executed
branch  1 never executed
    #####: 1221:              if (state -> hand[i][j] == copper) {
branch  0 never executed
branch  1 never executed
    #####: 1222:                discardCard(j, i, state, 0);
call    0 never executed
    #####: 1223:                break;
        -: 1224:              }
    #####: 1225:              if (j == state -> handCount[i]) {
branch  0 never executed
branch  1 never executed
    #####: 1226:                for (k = 0; k < state -> handCount[i]; k++) {
branch  0 never executed
branch  1 never executed
        -: 1227:                  if (DEBUG)
        -: 1228:                    printf("Player %d reveals card number %d\n", i, state -> hand[i][k]);
        -: 1229:                }
    #####: 1230:                break;
        -: 1231:              }
        -: 1232:            }
        -: 1233:
        -: 1234:          }
        -: 1235:
        -: 1236:        }
        -: 1237:
        -: 1238:        //discard played card from hand
    #####: 1239:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1240:
    #####: 1241:        return 0;
        -: 1242:
        -: 1243:        case embargo:
        -: 1244:        //+2 Coins
    #####: 1245:        state -> coins = state -> coins + 2;
        -: 1246:
        -: 1247:        //see if selected pile is in play
    #####: 1248:        if (state -> supplyCount[choice1] == -1) {
branch  0 never executed
branch  1 never executed
    #####: 1249:          return -1;
        -: 1250:        }
        -: 1251:
        -: 1252:        //add embargo token to selected supply pile
    #####: 1253:        state -> embargoTokens[choice1]++;
        -: 1254:
        -: 1255:        //trash card
    #####: 1256:        discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1257:        return 0;
        -: 1258:
        -: 1259:        case outpost:
        -: 1260:        //set outpost flag
    #####: 1261:        state -> outpostPlayed++;
        -: 1262:
        -: 1263:        //discard card
    #####: 1264:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1265:        return 0;
        -: 1266:
        -: 1267:        case salvager:
        -: 1268:        //+1 buy
    #####: 1269:        state -> numBuys++;
        -: 1270:
    #####: 1271:        if (choice1) {
branch  0 never executed
branch  1 never executed
        -: 1272:            //gain coins equal to trashed card
    #####: 1273:          state -> coins = state -> coins + getCost(handCard(choice1, state));
call    0 never executed
call    1 never executed
        -: 1274:            //trash card
    #####: 1275:          discardCard(choice1, currentPlayer, state, 1);
call    0 never executed
        -: 1276:        }
        -: 1277:
        -: 1278:        //discard card
    #####: 1279:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1280:        return 0;
        -: 1281:
        -: 1282:        case sea_hag:
    #####: 1283:        for (i = 0; i < state -> numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1284:          if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####: 1285:            state -> discard[i][state -> discardCount[i]] = state -> deck[i][state -> deckCount[i]--];
    #####: 1286:            state -> deckCount[i]--;
    #####: 1287:            state -> discardCount[i]++;
    #####: 1288:                state -> deck[i][state -> deckCount[i]--] = curse; //Top card now a curse
        -: 1289:              }
        -: 1290:            }
    #####: 1291:            return 0;
        -: 1292:
        -: 1293:            case treasure_map:
        -: 1294:        //search hand for another treasure_map
    #####: 1295:            index = -1;
    #####: 1296:            for (i = 0; i < state -> handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1297:              if (state -> hand[currentPlayer][i] == treasure_map && i != handPos) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1298:                index = i;
    #####: 1299:                break;
        -: 1300:              }
        -: 1301:            }
    #####: 1302:            if (index > -1) {
branch  0 never executed
branch  1 never executed
        -: 1303:            //trash both treasure cards
    #####: 1304:              discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1305:              discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1306:
        -: 1307:            //gain 4 Gold cards
    #####: 1308:              for (i = 0; i < 4; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1309:                gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1310:              }
        -: 1311:
        -: 1312:            //return success
    #####: 1313:              return 1;
        -: 1314:            }
        -: 1315:
        -: 1316:        //no second treasure_map found in hand
    #####: 1317:            return -1;
        -: 1318:          }
        -: 1319:
    #####: 1320:          return -1;
        -: 1321:        }
        -: 1322:
function discardCard called 0 returned 0% blocks executed 0%
    #####: 1323:        int discardCard(int handPos, int currentPlayer, struct gameState * state, int trashFlag) {
        -: 1324:
        -: 1325:    //if card is not trashed, added to Played pile 
    #####: 1326:          if (trashFlag < 1) {
branch  0 never executed
branch  1 never executed
        -: 1327:        //add card to played pile
    #####: 1328:            state -> playedCards[state -> playedCardCount] = state -> hand[currentPlayer][handPos];
    #####: 1329:            state -> playedCardCount++;
        -: 1330:          }
        -: 1331:
        -: 1332:    //set played card to -1
    #####: 1333:          state -> hand[currentPlayer][handPos] = -1;
        -: 1334:
        -: 1335:    //remove card from player's hand
    #####: 1336:    if (handPos == (state -> handCount[currentPlayer] - 1)) //last card in hand array is played
branch  0 never executed
branch  1 never executed
        -: 1337:    {
        -: 1338:        //reduce number of cards in hand
    #####: 1339:      state -> handCount[currentPlayer]--;
    #####: 1340:    } else if (state -> handCount[currentPlayer] == 1) //only one card in hand
branch  0 never executed
branch  1 never executed
        -: 1341:    {
        -: 1342:        //reduce number of cards in hand
    #####: 1343:      state -> handCount[currentPlayer]--;
        -: 1344:    } else {
        -: 1345:        //replace discarded card with last card in hand
    #####: 1346:      state -> hand[currentPlayer][handPos] = state -> hand[currentPlayer][(state -> handCount[currentPlayer] - 1)];
        -: 1347:        //set last card to -1
    #####: 1348:      state -> hand[currentPlayer][state -> handCount[currentPlayer] - 1] = -1;
        -: 1349:        //reduce number of cards in hand
    #####: 1350:      state -> handCount[currentPlayer]--;
        -: 1351:    }
        -: 1352:
    #####: 1353:    return 0;
        -: 1354:  }
        -: 1355:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1356:  int gainCard(int supplyPos, struct gameState * state, int toFlag, int player) {
        -: 1357:    //Note: supplyPos is enum of choosen card
        -: 1358:
        -: 1359:    //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1360:    if (supplyCount(supplyPos, state) < 1) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1361:      return -1;
        -: 1362:    }
        -: 1363:
        -: 1364:    //added card for [whoseTurn] current player:
        -: 1365:    // toFlag = 0 : add to discard
        -: 1366:    // toFlag = 1 : add to deck
        -: 1367:    // toFlag = 2 : add to hand
        -: 1368:
    #####: 1369:    if (toFlag == 1) {
branch  0 never executed
branch  1 never executed
    #####: 1370:      state -> deck[player][state -> deckCount[player]] = supplyPos;
    #####: 1371:      state -> deckCount[player]++;
    #####: 1372:    } else if (toFlag == 2) {
branch  0 never executed
branch  1 never executed
    #####: 1373:      state -> hand[player][state -> handCount[player]] = supplyPos;
    #####: 1374:      state -> handCount[player]++;
        -: 1375:    } else {
    #####: 1376:      state -> discard[player][state -> discardCount[player]] = supplyPos;
    #####: 1377:      state -> discardCount[player]++;
        -: 1378:    }
        -: 1379:
        -: 1380:    //decrease number in supply pile
    #####: 1381:    state -> supplyCount[supplyPos]--;
        -: 1382:
    #####: 1383:    return 0;
        -: 1384:  }
        -: 1385:
function updateCoins called 3 returned 100% blocks executed 82%
        3: 1386:  int updateCoins(int player, struct gameState * state, int bonus) {
        -: 1387:    int i;
        -: 1388:
        -: 1389:    //reset coin count
        3: 1390:    state -> coins = 0;
        -: 1391:
        -: 1392:    //add coins for each Treasure card in player's hand
       18: 1393:    for (i = 0; i < state -> handCount[player]; i++) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       15: 1394:      if (state -> hand[player][i] == copper) {
branch  0 taken 40% (fallthrough)
branch  1 taken 60%
        6: 1395:        state -> coins += 1;
        9: 1396:      } else if (state -> hand[player][i] == silver) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1397:        state -> coins += 2;
        9: 1398:      } else if (state -> hand[player][i] == gold) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1399:        state -> coins += 3;
        -: 1400:      }
        -: 1401:    }
        -: 1402:
        -: 1403:    //add bonus
        3: 1404:    state -> coins += bonus;
        -: 1405:
        3: 1406:    return 0;
        -: 1407:  }
        -: 1408:
        -: 1409://end of dominion.c
-------------------------Testing: isGameOver()-------------------------

numPlayers = 2, player = 0:
Province cards depleted; Other supply piles not empty:	PASSED
No empty supply pile:	PASSED
Exactly 1 supply pile is empty (other than Province pile):	PASSED
Exactly 2 supply piles empty (other than Province pile):	PASSED
Exactly 3 supply piles empty (other than Province pile):	PASSED
Exactly 4 supply piles empty (other than Province pile):	PASSED
numPlayers = 2, player = 1:
Province cards depleted; Other supply piles not empty:	PASSED
No empty supply pile:	PASSED
Exactly 1 supply pile is empty (other than Province pile):	PASSED
Exactly 2 supply piles empty (other than Province pile):	PASSED
Exactly 3 supply piles empty (other than Province pile):	PASSED
Exactly 4 supply piles empty (other than Province pile):	PASSED

numPlayers = 3, player = 0:
Province cards depleted; Other supply piles not empty:	PASSED
No empty supply pile:	PASSED
Exactly 1 supply pile is empty (other than Province pile):	PASSED
Exactly 2 supply piles empty (other than Province pile):	PASSED
Exactly 3 supply piles empty (other than Province pile):	PASSED
Exactly 4 supply piles empty (other than Province pile):	PASSED
numPlayers = 3, player = 1:
Province cards depleted; Other supply piles not empty:	PASSED
No empty supply pile:	PASSED
Exactly 1 supply pile is empty (other than Province pile):	PASSED
Exactly 2 supply piles empty (other than Province pile):	PASSED
Exactly 3 supply piles empty (other than Province pile):	PASSED
Exactly 4 supply piles empty (other than Province pile):	PASSED
numPlayers = 3, player = 2:
Province cards depleted; Other supply piles not empty:	PASSED
No empty supply pile:	PASSED
Exactly 1 supply pile is empty (other than Province pile):	PASSED
Exactly 2 supply piles empty (other than Province pile):	PASSED
Exactly 3 supply piles empty (other than Province pile):	PASSED
Exactly 4 supply piles empty (other than Province pile):	PASSED

numPlayers = 4, player = 0:
Province cards depleted; Other supply piles not empty:	PASSED
No empty supply pile:	PASSED
Exactly 1 supply pile is empty (other than Province pile):	PASSED
Exactly 2 supply piles empty (other than Province pile):	PASSED
Exactly 3 supply piles empty (other than Province pile):	PASSED
Exactly 4 supply piles empty (other than Province pile):	PASSED
numPlayers = 4, player = 1:
Province cards depleted; Other supply piles not empty:	PASSED
No empty supply pile:	PASSED
Exactly 1 supply pile is empty (other than Province pile):	PASSED
Exactly 2 supply piles empty (other than Province pile):	PASSED
Exactly 3 supply piles empty (other than Province pile):	PASSED
Exactly 4 supply piles empty (other than Province pile):	PASSED
numPlayers = 4, player = 2:
Province cards depleted; Other supply piles not empty:	PASSED
No empty supply pile:	PASSED
Exactly 1 supply pile is empty (other than Province pile):	PASSED
Exactly 2 supply piles empty (other than Province pile):	PASSED
Exactly 3 supply piles empty (other than Province pile):	PASSED
Exactly 4 supply piles empty (other than Province pile):	PASSED
numPlayers = 4, player = 3:
Province cards depleted; Other supply piles not empty:	PASSED
No empty supply pile:	PASSED
Exactly 1 supply pile is empty (other than Province pile):	PASSED
Exactly 2 supply piles empty (other than Province pile):	PASSED
Exactly 3 supply piles empty (other than Province pile):	PASSED
Exactly 4 supply piles empty (other than Province pile):	PASSED

Total Number of Failures: 0

Function 'updateCoins'
Lines executed:81.82% of 11
Branches executed:100.00% of 8
Taken at least once:75.00% of 8
No calls

Function 'gainCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 1

Function 'discardCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'cardEffect'
Lines executed:0.00% of 206
Branches executed:0.00% of 179
Taken at least once:0.00% of 179
Calls executed:0.00% of 58

Function 'smithy_card'
Lines executed:0.00% of 6
Branches executed:0.00% of 2
Taken at least once:0.00% of 2
Calls executed:0.00% of 3

Function 'adventurer_card'
Lines executed:0.00% of 18
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
Calls executed:0.00% of 3

Function 'council_room_card'
Lines executed:0.00% of 9
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 4

Function 'village_card'
Lines executed:0.00% of 6
No branches
Calls executed:0.00% of 3

Function 'great_hall_card'
Lines executed:0.00% of 6
No branches
Calls executed:0.00% of 3

Function 'getCost'
Lines executed:0.00% of 30
Branches executed:0.00% of 28
Taken at least once:0.00% of 28
No calls

Function 'drawCard'
Lines executed:36.36% of 22
Branches executed:33.33% of 6
Taken at least once:16.67% of 6
Calls executed:0.00% of 1

Function 'getWinners'
Lines executed:0.00% of 24
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
Calls executed:0.00% of 2

Function 'scoreFor'
Lines executed:0.00% of 42
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
Calls executed:0.00% of 3

Function 'isGameOver'
Lines executed:100.00% of 10
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

Function 'endTurn'
Lines executed:0.00% of 20
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'whoseTurn'
Lines executed:0.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 9
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'supplyCount'
Lines executed:0.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 3
No branches
Calls executed:0.00% of 1

Function 'numHandCards'
Lines executed:0.00% of 2
No branches
Calls executed:0.00% of 1

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 4

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
Calls executed:0.00% of 3

Function 'shuffle'
Lines executed:93.75% of 16
Branches executed:100.00% of 8
Taken at least once:87.50% of 8
Calls executed:100.00% of 2

Function 'initializeGame'
Lines executed:95.16% of 62
Branches executed:100.00% of 46
Taken at least once:91.30% of 46
Calls executed:100.00% of 5

Function 'kingdomCards'
Lines executed:0.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:0.00% of 3
No branches
No calls

Function 'compare'
Lines executed:83.33% of 6
Branches executed:100.00% of 4
Taken at least once:75.00% of 4
No calls

File 'dominion.c'
Lines executed:18.24% of 581
Branches executed:18.23% of 417
Taken at least once:16.07% of 417
Calls executed:7.00% of 100
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h> 
        -:    5:#include <math.h> 
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 135 returned 100% blocks executed 83%
      135:    8:int compare(const void * a,
        -:    9:  const void * b) {
      135:   10:  if ( * (int * ) a > * (int * ) b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   11:    return 1;
      135:   12:  if ( * (int * ) a < * (int * ) b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
       36:   13:    return -1;
       99:   14:  return 0;
        -:   15:}
        -:   16:
function newGame called 0 returned 0% blocks executed 0%
    #####:   17:struct gameState * newGame() {
    #####:   18:  struct gameState * g = malloc(sizeof(struct gameState));
    #####:   19:  return g;
        -:   20:}
        -:   21:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   22:int * kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   23:  int k8, int k9, int k10) {
    #####:   24:  int * k = malloc(10 * sizeof(int));
    #####:   25:  k[0] = k1;
    #####:   26:  k[1] = k2;
    #####:   27:  k[2] = k3;
    #####:   28:  k[3] = k4;
    #####:   29:  k[4] = k5;
    #####:   30:  k[5] = k6;
    #####:   31:  k[6] = k7;
    #####:   32:  k[7] = k8;
    #####:   33:  k[8] = k9;
    #####:   34:  k[9] = k10;
    #####:   35:  return k;
        -:   36:}
        -:   37:
function initializeGame called 3 returned 100% blocks executed 95%
        3:   38:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   39:  struct gameState * state) {
        -:   40:
        -:   41:  int i;
        -:   42:  int j;
        -:   43:  int it;
        -:   44:    //set up random number generator
        3:   45:  SelectStream(1);
call    0 returned 100%
        3:   46:  PutSeed((long) randomSeed);
call    0 returned 100%
        -:   47:
        -:   48:    //check number of players
        3:   49:  if (numPlayers > MAX_PLAYERS || numPlayers < 2) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:   50:    return -1;
        -:   51:  }
        -:   52:
        -:   53:    //set number of players
        3:   54:  state -> numPlayers = numPlayers;
        -:   55:
        -:   56:    //check selected kingdom cards are different
       33:   57:  for (i = 0; i < 10; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      330:   58:    for (j = 0; j < 10; j++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      300:   59:      if (j != i && kingdomCards[j] == kingdomCards[i]) {
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:   60:        return -1;
        -:   61:      }
        -:   62:    }
        -:   63:  }
        -:   64:
        -:   65:    //initialize supply
        -:   66:    ///////////////////////////////
        -:   67:
        -:   68:    //set number of Curse cards
        3:   69:  if (numPlayers == 2) {
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        1:   70:    state -> supplyCount[curse] = 10;
        2:   71:  } else if (numPlayers == 3) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        1:   72:    state -> supplyCount[curse] = 20;
        -:   73:  } else {
        1:   74:    state -> supplyCount[curse] = 30;
        -:   75:  }
        -:   76:
        -:   77:    //set number of Victory cards
        3:   78:  if (numPlayers == 2) {
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        1:   79:    state -> supplyCount[estate] = 8;
        1:   80:    state -> supplyCount[duchy] = 8;
        1:   81:    state -> supplyCount[province] = 8;
        -:   82:  } else {
        2:   83:    state -> supplyCount[estate] = 12;
        2:   84:    state -> supplyCount[duchy] = 12;
        2:   85:    state -> supplyCount[province] = 12;
        -:   86:  }
        -:   87:
        -:   88:    //set number of Treasure cards
        3:   89:  state -> supplyCount[copper] = 60 - (7 * numPlayers);
        3:   90:  state -> supplyCount[silver] = 40;
        3:   91:  state -> supplyCount[gold] = 30;
        -:   92:
        -:   93:    //set number of Kingdom cards
       63:   94:    for (i = adventurer; i <= treasure_map; i++) //loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:   95:    {
      495:   96:        for (j = 0; j < 10; j++) //loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:   97:        {
      465:   98:          if (kingdomCards[j] == i) {
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:   99:                //check if card is a 'Victory' Kingdom card
       30:  100:            if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens) {
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
       12:  101:              if (numPlayers == 2) {
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        2:  102:                state -> supplyCount[i] = 8;
        -:  103:              } else {
        4:  104:                state -> supplyCount[i] = 12;
        -:  105:              }
        -:  106:            } else {
       24:  107:              state -> supplyCount[i] = 10;
        -:  108:            }
       30:  109:            break;
        -:  110:            } else //card is not in the set choosen for the game
        -:  111:            {
      435:  112:              state -> supplyCount[i] = -1;
        -:  113:            }
        -:  114:          }
        -:  115:
        -:  116:        }
        -:  117:
        -:  118:    ////////////////////////
        -:  119:    //supply intilization complete
        -:  120:
        -:  121:    //set player decks
       12:  122:        for (i = 0; i < numPlayers; i++) {
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        9:  123:          state -> deckCount[i] = 0;
       36:  124:          for (j = 0; j < 3; j++) {
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
       27:  125:            state -> deck[i][j] = estate;
       27:  126:            state -> deckCount[i]++;
        -:  127:          }
       72:  128:          for (j = 3; j < 10; j++) {
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
       63:  129:            state -> deck[i][j] = copper;
       63:  130:            state -> deckCount[i]++;
        -:  131:          }
        -:  132:        }
        -:  133:
        -:  134:    //shuffle player decks
       12:  135:        for (i = 0; i < numPlayers; i++) {
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        9:  136:          if (shuffle(i, state) < 0) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  137:            return -1;
        -:  138:          }
        -:  139:        }
        -:  140:
        -:  141:    //draw player hands
       12:  142:        for (i = 0; i < numPlayers; i++) {
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  143:        //initialize hand size to zero
        9:  144:          state -> handCount[i] = 0;
        9:  145:          state -> discardCount[i] = 0;
        -:  146:        //draw 5 cards
        -:  147:        // for (j = 0; j < 5; j++)
        -:  148:        //  {
        -:  149:        //    drawCard(i, state);
        -:  150:        //  }
        -:  151:        }
        -:  152:
        -:  153:    //set embargo tokens to 0 for all supply piles
       84:  154:        for (i = 0; i <= treasure_map; i++) {
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
       81:  155:          state -> embargoTokens[i] = 0;
        -:  156:        }
        -:  157:
        -:  158:    //initialize first player's turn
        3:  159:        state -> outpostPlayed = 0;
        3:  160:        state -> phase = 0;
        3:  161:        state -> numActions = 1;
        3:  162:        state -> numBuys = 1;
        3:  163:        state -> playedCardCount = 0;
        3:  164:        state -> whoseTurn = 0;
        3:  165:        state -> handCount[state -> whoseTurn] = 0;
        -:  166:    //int it; move to top
        -:  167:
        -:  168:    //Moved draw cards to here, only drawing at the start of a turn
       18:  169:        for (it = 0; it < 5; it++) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       15:  170:          drawCard(state -> whoseTurn, state);
call    0 returned 100%
        -:  171:        }
        -:  172:
        3:  173:        updateCoins(state -> whoseTurn, state, 0);
call    0 returned 100%
        -:  174:
        3:  175:        return 0;
        -:  176:      }
        -:  177:
function shuffle called 9 returned 100% blocks executed 94%
        9:  178:      int shuffle(int player, struct gameState * state) {
        -:  179:
        -:  180:        int newDeck[MAX_DECK];
        9:  181:        int newDeckPos = 0;
        -:  182:        int card;
        -:  183:        int i;
        -:  184:
        9:  185:        if (state -> deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  186:          return -1;
        9:  187:        qsort((void * )(state -> deck[player]), state -> deckCount[player], sizeof(int), compare);
call    0 returned 100%
        -:  188:    /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  189:
      108:  190:        while (state -> deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       90:  191:          card = floor(Random() * state -> deckCount[player]);
call    0 returned 100%
       90:  192:          newDeck[newDeckPos] = state -> deck[player][card];
       90:  193:          newDeckPos++;
      300:  194:          for (i = card; i < state -> deckCount[player] - 1; i++) {
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
      210:  195:            state -> deck[player][i] = state -> deck[player][i + 1];
        -:  196:          }
       90:  197:          state -> deckCount[player]--;
        -:  198:        }
       99:  199:        for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       90:  200:          state -> deck[player][i] = newDeck[i];
       90:  201:          state -> deckCount[player]++;
        -:  202:        }
        -:  203:
        9:  204:        return 0;
        -:  205:      }
        -:  206:
function playCard called 0 returned 0% blocks executed 0%
    #####:  207:      int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState * state) {
        -:  208:        int card;
    #####:  209:    int coin_bonus = 0; //tracks coins gain from actions
        -:  210:
        -:  211:    //check if it is the right phase
    #####:  212:    if (state -> phase != 0) {
branch  0 never executed
branch  1 never executed
    #####:  213:      return -1;
        -:  214:    }
        -:  215:
        -:  216:    //check if player has enough actions
    #####:  217:    if (state -> numActions < 1) {
branch  0 never executed
branch  1 never executed
    #####:  218:      return -1;
        -:  219:    }
        -:  220:
        -:  221:    //get card played
    #####:  222:    card = handCard(handPos, state);
call    0 never executed
        -:  223:
        -:  224:    //check if selected card is an action
    #####:  225:    if (card < adventurer || card > treasure_map) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  226:      return -1;
        -:  227:    }
        -:  228:
        -:  229:    //play card
    #####:  230:    if (cardEffect(card, choice1, choice2, choice3, state, handPos, & coin_bonus) < 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  231:      return -1;
        -:  232:    }
        -:  233:
        -:  234:    //reduce number of actions
    #####:  235:    state -> numActions--;
        -:  236:
        -:  237:    //update coins (Treasure cards may be added with card draws)
    #####:  238:    updateCoins(state -> whoseTurn, state, coin_bonus);
call    0 never executed
        -:  239:
    #####:  240:    return 0;
        -:  241:  }
        -:  242:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  243:  int buyCard(int supplyPos, struct gameState * state) {
        -:  244:    int who;
        -:  245:    if (DEBUG) {
        -:  246:      printf("Entering buyCard...\n");
        -:  247:    }
        -:  248:
        -:  249:    // I don't know what to do about the phase thing.
        -:  250:
    #####:  251:    who = state -> whoseTurn;
        -:  252:
    #####:  253:    if (state -> numBuys < 1) {
branch  0 never executed
branch  1 never executed
        -:  254:      if (DEBUG)
        -:  255:        printf("You do not have any buys left\n");
    #####:  256:      return -1;
    #####:  257:    } else if (supplyCount(supplyPos, state) < 1) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  258:      if (DEBUG)
        -:  259:        printf("There are not any of that type of card left\n");
    #####:  260:      return -1;
    #####:  261:    } else if (state -> coins < getCost(supplyPos)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  262:      if (DEBUG)
        -:  263:        printf("You do not have enough money to buy that. You have %d coins.\n", state -> coins);
    #####:  264:      return -1;
        -:  265:    } else {
    #####:  266:      state -> phase = 1;
        -:  267:        //state->supplyCount[supplyPos]--;
    #####:  268:        gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  269:
    #####:  270:        state -> coins = (state -> coins) - (getCost(supplyPos));
call    0 never executed
    #####:  271:        state -> numBuys--;
        -:  272:        if (DEBUG)
        -:  273:          printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state -> numBuys, state -> coins);
        -:  274:      }
        -:  275:
        -:  276:    //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  277:    //state->discardCount[who]++;
        -:  278:
    #####:  279:      return 0;
        -:  280:    }
        -:  281:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  282:    int numHandCards(struct gameState * state) 
        -:  283:    {
    #####:  284:      return state -> handCount[whoseTurn(state)];
call    0 never executed
        -:  285:    }
        -:  286:
function handCard called 0 returned 0% blocks executed 0%
    #####:  287:    int handCard(int handPos, struct gameState * state) 
        -:  288:    {
    #####:  289:      int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  290:      return state -> hand[currentPlayer][handPos];
        -:  291:    }
        -:  292:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  293:    int supplyCount(int card, struct gameState * state) 
        -:  294:    {
    #####:  295:      return state -> supplyCount[card];
        -:  296:    }
        -:  297:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  298:    int fullDeckCount(int player, int card, struct gameState * state) 
        -:  299:    {
        -:  300:      int i;
    #####:  301:      int count = 0;
        -:  302:
    #####:  303:      for (i = 0; i < state -> deckCount[player]; i++) 
branch  0 never executed
branch  1 never executed
        -:  304:      {
    #####:  305:        if (state -> deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  306:      }
        -:  307:
    #####:  308:      for (i = 0; i < state -> handCount[player]; i++) 
branch  0 never executed
branch  1 never executed
        -:  309:      {
    #####:  310:        if (state -> hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  311:      }
        -:  312:
    #####:  313:      for (i = 0; i < state -> discardCount[player]; i++) 
branch  0 never executed
branch  1 never executed
        -:  314:      {
    #####:  315:        if (state -> discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  316:      }
        -:  317:
    #####:  318:      return count;
        -:  319:    }
        -:  320:
function whoseTurn called 0 returned 0% blocks executed 0%
    #####:  321:    int whoseTurn(struct gameState * state) 
        -:  322:    {
    #####:  323:      return state -> whoseTurn;
        -:  324:    }
        -:  325:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  326:    int endTurn(struct gameState * state) 
        -:  327:    {
        -:  328:      int k;
        -:  329:      int i;
    #####:  330:      int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  331:
        -:  332:    //Discard hand
    #####:  333:      for (i = 0; i < state -> handCount[currentPlayer]; i++) 
branch  0 never executed
branch  1 never executed
        -:  334:      {
    #####:  335:        state -> discard[currentPlayer][state -> discardCount[currentPlayer]++] = state -> hand[currentPlayer][i]; //Discard
    #####:  336:        state -> hand[currentPlayer][i] = -1; //Set card to -1
        -:  337:      }
    #####:  338:    state -> handCount[currentPlayer] = 0; //Reset hand count
        -:  339:
        -:  340:    //Code for determining the player
    #####:  341:    if (currentPlayer < (state -> numPlayers - 1)) 
branch  0 never executed
branch  1 never executed
        -:  342:    {
    #####:  343:        state -> whoseTurn = currentPlayer + 1; //Still safe to increment
        -:  344:      } 
        -:  345:      else 
        -:  346:      {
    #####:  347:        state -> whoseTurn = 0; //Max player has been reached, loop back around to player 1
        -:  348:      }
        -:  349:
    #####:  350:      state -> outpostPlayed = 0;
    #####:  351:      state -> phase = 0;
    #####:  352:      state -> numActions = 1;
    #####:  353:      state -> coins = 0;
    #####:  354:      state -> numBuys = 1;
    #####:  355:      state -> playedCardCount = 0;
    #####:  356:      state -> handCount[state -> whoseTurn] = 0;
        -:  357:
        -:  358:    //int k; move to top
        -:  359:    //Next player draws hand
    #####:  360:      for (k = 0; k < 5; k++) 
branch  0 never executed
branch  1 never executed
        -:  361:      {
    #####:  362:        drawCard(state -> whoseTurn, state); //Draw a card
call    0 never executed
        -:  363:      }
        -:  364:
        -:  365:    //Update money
    #####:  366:      updateCoins(state -> whoseTurn, state, 0);
call    0 never executed
        -:  367:
    #####:  368:      return 0;
        -:  369:    }
        -:  370:
function isGameOver called 54 returned 100% blocks executed 100%
       54:  371:    int isGameOver(struct gameState * state) 
        -:  372:    {
        -:  373:      int i;
        -:  374:      int j;
        -:  375:
        -:  376:    //if stack of Province cards is empty, the game ends
       54:  377:      if (state -> supplyCount[province] == 0) 
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
        -:  378:      {
        9:  379:        return 1;
        -:  380:      }
        -:  381:
        -:  382:    //if three supply pile are at 0, the game ends
       45:  383:      j = 0;
     1170:  384:      for (i = 0; i < 25; i++) 
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  385:      {
     1125:  386:        if (state -> supplyCount[i] == 0) 
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
        -:  387:        {
       90:  388:          j++;
        -:  389:        }
        -:  390:      }
       45:  391:      if (j >= 3) 
branch  0 taken 40% (fallthrough)
branch  1 taken 60%
        -:  392:      {
       18:  393:        return 1;
        -:  394:      }
        -:  395:
       27:  396:      return 0;
        -:  397:    }
        -:  398:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  399:    int scoreFor(int player, struct gameState * state) 
        -:  400:    {
        -:  401:      int i;
    #####:  402:      int score = 0;
        -:  403:    //score from hand
    #####:  404:      for (i = 0; i < state -> handCount[player]; i++) 
branch  0 never executed
branch  1 never executed
        -:  405:      {
    #####:  406:        if (state -> hand[player][i] == curse) 
branch  0 never executed
branch  1 never executed
        -:  407:        {
    #####:  408:          score = score - 1;
        -:  409:        };
    #####:  410:        if (state -> hand[player][i] == estate) 
branch  0 never executed
branch  1 never executed
        -:  411:        {
    #####:  412:          score = score + 1;
        -:  413:        };
    #####:  414:        if (state -> hand[player][i] == duchy) 
branch  0 never executed
branch  1 never executed
        -:  415:        {
    #####:  416:          score = score + 3;
        -:  417:        };
    #####:  418:        if (state -> hand[player][i] == province) 
branch  0 never executed
branch  1 never executed
        -:  419:        {
    #####:  420:          score = score + 6;
        -:  421:        };
    #####:  422:        if (state -> hand[player][i] == great_hall) 
branch  0 never executed
branch  1 never executed
        -:  423:        {
    #####:  424:          score = score + 1;
        -:  425:        };
    #####:  426:        if (state -> hand[player][i] == gardens) 
branch  0 never executed
branch  1 never executed
        -:  427:        {
    #####:  428:          score = score + (fullDeckCount(player, 0, state) / 10);
call    0 never executed
        -:  429:        };
        -:  430:      }
        -:  431:
        -:  432:    //score from discard
    #####:  433:      for (i = 0; i < state -> discardCount[player]; i++) 
branch  0 never executed
branch  1 never executed
        -:  434:      {
    #####:  435:        if (state -> discard[player][i] == curse) 
branch  0 never executed
branch  1 never executed
        -:  436:        {
    #####:  437:          score = score - 1;
        -:  438:        };
    #####:  439:        if (state -> discard[player][i] == estate) 
branch  0 never executed
branch  1 never executed
        -:  440:        {
    #####:  441:          score = score + 1;
        -:  442:        };
    #####:  443:        if (state -> discard[player][i] == duchy) 
branch  0 never executed
branch  1 never executed
        -:  444:        {
    #####:  445:          score = score + 3;
        -:  446:        };
    #####:  447:        if (state -> discard[player][i] == province) 
branch  0 never executed
branch  1 never executed
        -:  448:        {
    #####:  449:          score = score + 6;
        -:  450:        };
    #####:  451:        if (state -> discard[player][i] == great_hall) 
branch  0 never executed
branch  1 never executed
        -:  452:        {
    #####:  453:          score = score + 1;
        -:  454:        };
    #####:  455:        if (state -> discard[player][i] == gardens) 
branch  0 never executed
branch  1 never executed
        -:  456:        {
    #####:  457:          score = score + (fullDeckCount(player, 0, state) / 10);
call    0 never executed
        -:  458:        };
        -:  459:      }
        -:  460:
        -:  461:    //score from deck
    #####:  462:      for (i = 0; i < state -> discardCount[player]; i++) 
branch  0 never executed
branch  1 never executed
        -:  463:      {
    #####:  464:        if (state -> deck[player][i] == curse) 
branch  0 never executed
branch  1 never executed
        -:  465:        {
    #####:  466:          score = score - 1;
        -:  467:        };
    #####:  468:        if (state -> deck[player][i] == estate) 
branch  0 never executed
branch  1 never executed
        -:  469:        {
    #####:  470:          score = score + 1;
        -:  471:        };
    #####:  472:        if (state -> deck[player][i] == duchy) 
branch  0 never executed
branch  1 never executed
        -:  473:        {
    #####:  474:          score = score + 3;
        -:  475:        };
    #####:  476:        if (state -> deck[player][i] == province) 
branch  0 never executed
branch  1 never executed
        -:  477:        {
    #####:  478:          score = score + 6;
        -:  479:        };
    #####:  480:        if (state -> deck[player][i] == great_hall) 
branch  0 never executed
branch  1 never executed
        -:  481:        {
    #####:  482:          score = score + 1;
        -:  483:        };
    #####:  484:        if (state -> deck[player][i] == gardens) 
branch  0 never executed
branch  1 never executed
        -:  485:        {
    #####:  486:          score = score + (fullDeckCount(player, 0, state) / 10);
call    0 never executed
        -:  487:        };
        -:  488:      }
        -:  489:
    #####:  490:      return score;
        -:  491:    }
        -:  492:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  493:    int getWinners(int players[MAX_PLAYERS], struct gameState * state) 
        -:  494:    {
        -:  495:      int i;
        -:  496:      int j;
        -:  497:      int highScore;
        -:  498:      int currentPlayer;
        -:  499:
        -:  500:    //get score for each player
    #####:  501:      for (i = 0; i < MAX_PLAYERS; i++) 
branch  0 never executed
branch  1 never executed
        -:  502:      {
        -:  503:        //set unused player scores to -9999
    #####:  504:        if (i >= state -> numPlayers) 
branch  0 never executed
branch  1 never executed
        -:  505:        {
    #####:  506:          players[i] = -9999;
        -:  507:        } else {
    #####:  508:          players[i] = scoreFor(i, state);
call    0 never executed
        -:  509:        }
        -:  510:      }
        -:  511:
        -:  512:    //find highest score
    #####:  513:      j = 0;
    #####:  514:      for (i = 0; i < MAX_PLAYERS; i++) 
branch  0 never executed
branch  1 never executed
        -:  515:      {
    #####:  516:        if (players[i] > players[j]) 
branch  0 never executed
branch  1 never executed
        -:  517:        {
    #####:  518:          j = i;
        -:  519:        }
        -:  520:      }
    #####:  521:      highScore = players[j];
        -:  522:
        -:  523:    //add 1 to players who had less turns
    #####:  524:      currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  525:      for (i = 0; i < MAX_PLAYERS; i++) 
branch  0 never executed
branch  1 never executed
        -:  526:      {
    #####:  527:        if (players[i] == highScore && i > currentPlayer) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  528:        {
    #####:  529:          players[i]++;
        -:  530:        }
        -:  531:      }
        -:  532:
        -:  533:    //find new highest score
    #####:  534:      j = 0;
    #####:  535:      for (i = 0; i < MAX_PLAYERS; i++) 
branch  0 never executed
branch  1 never executed
        -:  536:      {
    #####:  537:        if (players[i] > players[j]) 
branch  0 never executed
branch  1 never executed
        -:  538:        {
    #####:  539:          j = i;
        -:  540:        }
        -:  541:      }
    #####:  542:      highScore = players[j];
        -:  543:
        -:  544:    //set winners in array to 1 and rest to 0
    #####:  545:      for (i = 0; i < MAX_PLAYERS; i++) 
branch  0 never executed
branch  1 never executed
        -:  546:      {
    #####:  547:        if (players[i] == highScore) 
branch  0 never executed
branch  1 never executed
        -:  548:        {
    #####:  549:          players[i] = 1;
        -:  550:        } else {
    #####:  551:          players[i] = 0;
        -:  552:        }
        -:  553:      }
        -:  554:
    #####:  555:      return 0;
        -:  556:    }
        -:  557:
function drawCard called 15 returned 100% blocks executed 38%
       15:  558:    int drawCard(int player, struct gameState * state) 
        -:  559:    {
        -:  560:      int count;
        -:  561:      int deckCounter;
       15:  562:    if (state -> deckCount[player] <= 0) { //Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  563:
        -:  564:        //Step 1 Shuffle the discard pile back into a deck
        -:  565:      int i;
        -:  566:        //Move discard to deck
    #####:  567:      for (i = 0; i < state -> discardCount[player]; i++) 
branch  0 never executed
branch  1 never executed
        -:  568:      {
    #####:  569:        state -> deck[player][i] = state -> discard[player][i];
    #####:  570:        state -> discard[player][i] = -1;
        -:  571:      }
        -:  572:
    #####:  573:      state -> deckCount[player] = state -> discardCount[player];
    #####:  574:        state -> discardCount[player] = 0; //Reset discard
        -:  575:
        -:  576:        //Shufffle the deck
    #####:  577:        shuffle(player, state); //Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  578:
        -:  579:        if (DEBUG) 
        -:  580:        { //Debug statements
        -:  581:          printf("Deck count now: %d\n", state -> deckCount[player]);
        -:  582:        }
        -:  583:
    #####:  584:        state -> discardCount[player] = 0;
        -:  585:
        -:  586:        //Step 2 Draw Card
    #####:  587:        count = state -> handCount[player]; //Get current player's hand count
        -:  588:
        -:  589:        if (DEBUG) 
        -:  590:        { //Debug statements
        -:  591:          printf("Current hand count: %d\n", count);
        -:  592:        }
        -:  593:
    #####:  594:        deckCounter = state -> deckCount[player]; //Create a holder for the deck count
        -:  595:
    #####:  596:        if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  597:          return -1;
        -:  598:
    #####:  599:        state -> hand[player][count] = state -> deck[player][deckCounter - 1]; //Add card to hand
    #####:  600:        state -> deckCount[player]--;
    #####:  601:        state -> handCount[player]++; //Increment hand count
        -:  602:      } 
        -:  603:      else 
        -:  604:      {
       15:  605:        int count = state -> handCount[player]; //Get current hand count for player
        -:  606:        int deckCounter;
        -:  607:        if (DEBUG) 
        -:  608:        { //Debug statements
        -:  609:          printf("Current hand count: %d\n", count);
        -:  610:        }
        -:  611:
       15:  612:        deckCounter = state -> deckCount[player]; //Create holder for the deck count
       15:  613:        state -> hand[player][count] = state -> deck[player][deckCounter - 1]; //Add card to the hand
       15:  614:        state -> deckCount[player]--;
       15:  615:        state -> handCount[player]++; //Increment hand count
        -:  616:      }
       15:  617:      return 0;
        -:  618:    }
        -:  619:
function getCost called 0 returned 0% blocks executed 0%
    #####:  620:    int getCost(int cardNumber) 
        -:  621:    {
    #####:  622:      switch (cardNumber) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  623:      {
        -:  624:        case curse:
    #####:  625:        return 0;
        -:  626:        case estate:
    #####:  627:        return 2;
        -:  628:        case duchy:
    #####:  629:        return 5;
        -:  630:        case province:
    #####:  631:        return 8;
        -:  632:        case copper:
    #####:  633:        return 0;
        -:  634:        case silver:
    #####:  635:        return 3;
        -:  636:        case gold:
    #####:  637:        return 6;
        -:  638:        case adventurer:
    #####:  639:        return 6;
        -:  640:        case council_room:
    #####:  641:        return 5;
        -:  642:        case feast:
    #####:  643:        return 4;
        -:  644:        case gardens:
    #####:  645:        return 4;
        -:  646:        case mine:
    #####:  647:        return 5;
        -:  648:        case remodel:
    #####:  649:        return 4;
        -:  650:        case smithy:
    #####:  651:        return 4;
        -:  652:        case village:
    #####:  653:        return 3;
        -:  654:        case baron:
    #####:  655:        return 4;
        -:  656:        case great_hall:
    #####:  657:        return 3;
        -:  658:        case minion:
    #####:  659:        return 5;
        -:  660:        case steward:
    #####:  661:        return 3;
        -:  662:        case tribute:
    #####:  663:        return 5;
        -:  664:        case ambassador:
    #####:  665:        return 3;
        -:  666:        case cutpurse:
    #####:  667:        return 4;
        -:  668:        case embargo:
    #####:  669:        return 2;
        -:  670:        case outpost:
    #####:  671:        return 5;
        -:  672:        case salvager:
    #####:  673:        return 4;
        -:  674:        case sea_hag:
    #####:  675:        return 4;
        -:  676:        case treasure_map:
    #####:  677:        return 4;
        -:  678:      }
        -:  679:
    #####:  680:      return -1;
        -:  681:    }
        -:  682:
        -:  683://A2 Refactor CLEAN CARD | NO BUGS
function great_hall_card called 0 returned 0% blocks executed 0%
    #####:  684:    int great_hall_card(int handPos, struct gameState * state) 
        -:  685:    {
    #####:  686:      int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  687:
    #####:  688:      drawCard(currentPlayer, state);
call    0 never executed
        -:  689:
        -:  690:    // provides another action turn
    #####:  691:      state -> numActions++;
        -:  692:
        -:  693:    // played card to discard pile
    #####:  694:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  695:      return 0;
        -:  696:    }
        -:  697:
        -:  698://A2 Refactor
function village_card called 0 returned 0% blocks executed 0%
    #####:  699:    int village_card(int handPos, struct gameState * state) 
        -:  700:    {
    #####:  701:      int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  702:
    #####:  703:      drawCard(currentPlayer, state);
call    0 never executed
        -:  704:
        -:  705:    //BUG: Should only provide 2 action turns
    #####:  706:      state -> numActions = state -> numActions + 4;
        -:  707:
        -:  708:    // played card to discard pile
    #####:  709:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  710:      return 0;
        -:  711:    }
        -:  712:
        -:  713://A2 Refactor
function council_room_card called 0 returned 0% blocks executed 0%
    #####:  714:    int council_room_card(int handPos, struct gameState * state) 
        -:  715:    {
        -:  716:      int i;
    #####:  717:      int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  718:
        -:  719:    // draw 4 cards
    #####:  720:      for (i = 0; i < 4; i++) {
branch  0 never executed
branch  1 never executed
    #####:  721:        drawCard(currentPlayer, state);
call    0 never executed
        -:  722:      }
        -:  723:
        -:  724:    //BUG: Card provides another buy turn 
        -:  725:    //state->numBuys++;      
        -:  726:
        -:  727:    // all other players draw a card
    #####:  728:      for (i = 0; i < state -> numPlayers; i++) 
branch  0 never executed
branch  1 never executed
        -:  729:      {
    #####:  730:        if (i != currentPlayer) 
branch  0 never executed
branch  1 never executed
        -:  731:        {
    #####:  732:          drawCard(i, state);
call    0 never executed
        -:  733:        }
        -:  734:      }
        -:  735:    // played card to discard pile
    #####:  736:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  737:      return 0;
        -:  738:    }
        -:  739:
        -:  740://A2 Refactor
function adventurer_card called 0 returned 0% blocks executed 0%
    #####:  741:    int adventurer_card(struct gameState * state) 
        -:  742:    {
    #####:  743:      int z = 0;
        -:  744:      int cardDrawn;
    #####:  745:      int drawntreasure = 0;
    #####:  746:      int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  747:      int temphand[MAX_HAND];
        -:  748:
    #####:  749:    while (drawntreasure < 2) 
branch  0 never executed
branch  1 never executed
        -:  750:    { // when the deck is empty, reshuffle the discard and make it the deck
    #####:  751:      if (state -> deckCount[currentPlayer] < 1) 
branch  0 never executed
branch  1 never executed
        -:  752:      {
    #####:  753:        shuffle(currentPlayer, state);
call    0 never executed
        -:  754:      }
    #####:  755:      drawCard(currentPlayer, state);
call    0 never executed
        -:  756:        // defines the drawn card as the top card
    #####:  757:      cardDrawn = state -> hand[currentPlayer][state -> handCount[currentPlayer] - 1];
    #####:  758:      if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  759:        //drawntreasure++;
        -:  760:        //BUG: increments by 4. Should increment by 1
    #####:  761:        drawntreasure += 4;
        -:  762:      else 
        -:  763:      {
    #####:  764:        temphand[z] = cardDrawn;
        -:  765:            // removes the most recently drawn (top) card
    #####:  766:        state -> handCount[currentPlayer]--;
    #####:  767:        z++;
        -:  768:      }
        -:  769:    }
    #####:  770:    while (z - 1 >= 0) 
branch  0 never executed
branch  1 never executed
        -:  771:    {
        -:  772:        // discard all cards in play that have been drawn
    #####:  773:      state -> discard[currentPlayer][state -> discardCount[currentPlayer]++] = temphand[z - 1];
    #####:  774:      z = z - 1;
        -:  775:    }
    #####:  776:    return 0;
        -:  777:  }
        -:  778:
        -:  779://A2 Refactor
function smithy_card called 0 returned 0% blocks executed 0%
    #####:  780:  int smithy_card(int handPos, struct gameState * state) 
        -:  781:  {
        -:  782:    int i;
    #####:  783:    int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  784:    //BUG: Should only draw 3 cards  
    #####:  785:    for (i = 0; i < 4; i++) 
branch  0 never executed
branch  1 never executed
        -:  786:    {
    #####:  787:      drawCard(currentPlayer, state);
call    0 never executed
        -:  788:    }
        -:  789:    //discard card from hand
    #####:  790:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  791:    return 0;
        -:  792:  }
        -:  793:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  794:  int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState * state, int handPos, int * bonus) {
        -:  795:    int i;
        -:  796:    int j;
        -:  797:    int k;
        -:  798:    int x;
        -:  799:    int index;
    #####:  800:    int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  801:    int nextPlayer = currentPlayer + 1;
        -:  802:
    #####:  803:    int tributeRevealedCards[2] = 
        -:  804:    {
        -:  805:      -1, -1
        -:  806:    };
        -:  807:    int temphand[MAX_HAND]; // moved above the if statement
        -:  808:    //int drawntreasure=0; // commented out as part of A2 Refactor
        -:  809:    //int cardDrawn; // commented out as part of A2 Refactor
        -:  810:    //int z = 0;// this is the counter for the temp hand // commented out as part of A2 Refactor
    #####:  811:    if (nextPlayer > (state -> numPlayers - 1)) 
branch  0 never executed
branch  1 never executed
        -:  812:    {
    #####:  813:      nextPlayer = 0;
        -:  814:    }
        -:  815:
        -:  816:    //uses switch to select card and perform actions
    #####:  817:    switch (card) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  818:    {
        -:  819:        // A2 Refactor  
        -:  820:      case adventurer:
    #####:  821:      return adventurer_card(state);
call    0 never executed
        -:  822:
        -:  823:        // A2 Refactor    
        -:  824:      case council_room:
    #####:  825:      return council_room_card(handPos, state);
call    0 never executed
        -:  826:
        -:  827:        // A2 Refactor  
        -:  828:      case smithy:
    #####:  829:      return smithy_card(handPos, state);
call    0 never executed
        -:  830:
        -:  831:        // A2 Refactor  
        -:  832:      case village:
    #####:  833:      return village_card(handPos, state);
call    0 never executed
        -:  834:
        -:  835:        // A2 Refactor
        -:  836:      case great_hall:
    #####:  837:      return great_hall_card(handPos, state);
call    0 never executed
        -:  838:
        -:  839:      case feast:
        -:  840:        //gain card with cost up to 5
        -:  841:        //Backup hand
    #####:  842:      for (i = 0; i <= state -> handCount[currentPlayer]; i++) 
branch  0 never executed
branch  1 never executed
        -:  843:      {
    #####:  844:            temphand[i] = state -> hand[currentPlayer][i]; //Backup card
    #####:  845:            state -> hand[currentPlayer][i] = -1; //Set to nothing
        -:  846:          }
        -:  847:        //Backup hand
        -:  848:
        -:  849:        //Update Coins for Buy
    #####:  850:          updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  851:        x = 1; //Condition to loop on
    #####:  852:        while (x == 1) 
branch  0 never executed
branch  1 never executed
        -:  853:        { //Buy one card
    #####:  854:          if (supplyCount(choice1, state) <= 0) 
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  855:          {
        -:  856:            if (DEBUG)
        -:  857:              printf("None of that card left, sorry!\n");
        -:  858:
        -:  859:            if (DEBUG) 
        -:  860:            {
        -:  861:              printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  862:            }
        -:  863:          } 
    #####:  864:          else if (state -> coins < getCost(choice1)) 
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  865:          {
    #####:  866:            printf("That card is too expensive!\n");
call    0 never executed
        -:  867:
        -:  868:            if (DEBUG) 
        -:  869:            {
        -:  870:              printf("Coins: %d < %d\n", state -> coins, getCost(choice1));
        -:  871:            }
        -:  872:          } 
        -:  873:          else 
        -:  874:          {
        -:  875:            if (DEBUG) 
        -:  876:            {
        -:  877:              printf("Deck Count: %d\n", state -> handCount[currentPlayer] + state -> deckCount[currentPlayer] + state -> discardCount[currentPlayer]);
        -:  878:            }
        -:  879:
    #####:  880:                gainCard(choice1, state, 0, currentPlayer); //Gain the card
call    0 never executed
    #####:  881:                x = 0; //No more buying cards
        -:  882:
        -:  883:                if (DEBUG) 
        -:  884:                {
        -:  885:                  printf("Deck Count: %d\n", state -> handCount[currentPlayer] + state -> deckCount[currentPlayer] + state -> discardCount[currentPlayer]);
        -:  886:                }
        -:  887:
        -:  888:              }
        -:  889:            }
        -:  890:
        -:  891:        //Reset Hand
    #####:  892:            for (i = 0; i <= state -> handCount[currentPlayer]; i++) 
branch  0 never executed
branch  1 never executed
        -:  893:            {
    #####:  894:              state -> hand[currentPlayer][i] = temphand[i];
    #####:  895:              temphand[i] = -1;
        -:  896:            }
        -:  897:        //Reset Hand
        -:  898:
    #####:  899:            return 0;
        -:  900:
        -:  901:            case gardens:
    #####:  902:            return -1;
        -:  903:
        -:  904:            case mine:
    #####:  905:        j = state -> hand[currentPlayer][choice1]; //store card we will trash
        -:  906:
    #####:  907:        if (state -> hand[currentPlayer][choice1] < copper || state -> hand[currentPlayer][choice1] > gold) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  908:        {
    #####:  909:          return -1;
        -:  910:        }
        -:  911:
    #####:  912:        if (choice2 > treasure_map || choice2 < curse) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  913:        {
    #####:  914:          return -1;
        -:  915:        }
        -:  916:
    #####:  917:        if ((getCost(state -> hand[currentPlayer][choice1]) + 3) > getCost(choice2)) 
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  918:        {
    #####:  919:          return -1;
        -:  920:        }
        -:  921:
    #####:  922:        gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  923:
        -:  924:        //discard card from hand
    #####:  925:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  926:
        -:  927:        //discard trashed card
    #####:  928:        for (i = 0; i < state -> handCount[currentPlayer]; i++) 
branch  0 never executed
branch  1 never executed
        -:  929:        {
    #####:  930:          if (state -> hand[currentPlayer][i] == j) 
branch  0 never executed
branch  1 never executed
        -:  931:          {
    #####:  932:            discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  933:            break;
        -:  934:          }
        -:  935:        }
        -:  936:
    #####:  937:        return 0;
        -:  938:
        -:  939:        case remodel:
    #####:  940:        j = state -> hand[currentPlayer][choice1]; //store card we will trash
        -:  941:
    #####:  942:        if ((getCost(state -> hand[currentPlayer][choice1]) + 2) > getCost(choice2)) 
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  943:        {
    #####:  944:          return -1;
        -:  945:        }
        -:  946:
    #####:  947:        gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  948:
        -:  949:        //discard card from hand
    #####:  950:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  951:
        -:  952:        //discard trashed card
    #####:  953:        for (i = 0; i < state -> handCount[currentPlayer]; i++) 
branch  0 never executed
branch  1 never executed
        -:  954:        {
    #####:  955:          if (state -> hand[currentPlayer][i] == j) 
branch  0 never executed
branch  1 never executed
        -:  956:          {
    #####:  957:            discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  958:            break;
        -:  959:          }
        -:  960:        }
    #####:  961:        return 0;
        -:  962:
        -:  963:        case baron:
    #####:  964:        state -> numBuys++; //Increase buys by 1!
    #####:  965:        if (choice1 > 0) 
branch  0 never executed
branch  1 never executed
        -:  966:        { //Boolean true or going to discard an estate
    #####:  967:            int p = 0; //Iterator for hand!
    #####:  968:            int card_not_discarded = 1; //Flag for discard set!
    #####:  969:            while (card_not_discarded) 
branch  0 never executed
branch  1 never executed
        -:  970:            {
    #####:  971:                if (state -> hand[currentPlayer][p] == estate) 
branch  0 never executed
branch  1 never executed
        -:  972:                { //Found an estate card!
    #####:  973:                    state -> coins += 4; //Add 4 coins to the amount of coins
    #####:  974:                    state -> discard[currentPlayer][state -> discardCount[currentPlayer]] = state -> hand[currentPlayer][p];
    #####:  975:                    state -> discardCount[currentPlayer]++;
    #####:  976:                    for (; p < state -> handCount[currentPlayer]; p++) 
branch  0 never executed
branch  1 never executed
        -:  977:                    {
    #####:  978:                      state -> hand[currentPlayer][p] = state -> hand[currentPlayer][p + 1];
        -:  979:                    }
    #####:  980:                    state -> hand[currentPlayer][state -> handCount[currentPlayer]] = -1;
    #####:  981:                    state -> handCount[currentPlayer]--;
    #####:  982:                    card_not_discarded = 0; //Exit the loop
        -:  983:                  } 
    #####:  984:                  else if (p > state -> handCount[currentPlayer]) 
branch  0 never executed
branch  1 never executed
        -:  985:                  {
        -:  986:                    if (DEBUG) 
        -:  987:                    {
        -:  988:                      printf("No estate cards in your hand, invalid choice\n");
        -:  989:                      printf("Must gain an estate if there are any\n");
        -:  990:                    }
    #####:  991:                    if (supplyCount(estate, state) > 0) 
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  992:                    {
    #####:  993:                      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  994:                        state -> supplyCount[estate]--; //Decrement estates
    #####:  995:                        if (supplyCount(estate, state) == 0) 
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  996:                        {
    #####:  997:                          isGameOver(state);
call    0 never executed
        -:  998:                        }
        -:  999:                      }
    #####: 1000:                    card_not_discarded = 0; //Exit the loop
        -: 1001:                  } 
        -: 1002:                  else 
        -: 1003:                  {
    #####: 1004:                    p++; //Next card
        -: 1005:                  }
        -: 1006:                }
        -: 1007:              } 
        -: 1008:              else 
        -: 1009:              {
    #####: 1010:                if (supplyCount(estate, state) > 0) 
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1011:                {
    #####: 1012:                gainCard(estate, state, 0, currentPlayer); //Gain an estate
call    0 never executed
    #####: 1013:                state -> supplyCount[estate]--; //Decrement Estates
    #####: 1014:                if (supplyCount(estate, state) == 0) 
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1015:                {
    #####: 1016:                  isGameOver(state);
call    0 never executed
        -: 1017:                }
        -: 1018:              }
        -: 1019:            }
    #####: 1020:            return 0;
        -: 1021:
        -: 1022:            case minion:
        -: 1023:        //+1 action
    #####: 1024:            state -> numActions++;
        -: 1025:
        -: 1026:        //discard card from hand
    #####: 1027:            discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1028:
    #####: 1029:        if (choice1) //+2 coins
branch  0 never executed
branch  1 never executed
        -: 1030:        {
    #####: 1031:          state -> coins = state -> coins + 2;
    #####: 1032:        } else if (choice2) //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -: 1033:        {
        -: 1034:            //discard hand
    #####: 1035:          while (numHandCards(state) > 0) 
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1036:          {
    #####: 1037:            discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1038:          }
        -: 1039:
        -: 1040:            //draw 4
    #####: 1041:          for (i = 0; i < 4; i++) 
branch  0 never executed
branch  1 never executed
        -: 1042:          {
    #####: 1043:            drawCard(currentPlayer, state);
call    0 never executed
        -: 1044:          }
        -: 1045:
        -: 1046:            //other players discard hand and redraw if hand size > 4
    #####: 1047:          for (i = 0; i < state -> numPlayers; i++) 
branch  0 never executed
branch  1 never executed
        -: 1048:          {
    #####: 1049:            if (i != currentPlayer) 
branch  0 never executed
branch  1 never executed
        -: 1050:            {
    #####: 1051:              if (state -> handCount[i] > 4) 
branch  0 never executed
branch  1 never executed
        -: 1052:              {
        -: 1053:                        //discard hand
    #####: 1054:                while (state -> handCount[i] > 0) 
branch  0 never executed
branch  1 never executed
        -: 1055:                {
    #####: 1056:                  discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1057:                }
        -: 1058:                        //draw 4
    #####: 1059:                for (j = 0; j < 4; j++) 
branch  0 never executed
branch  1 never executed
        -: 1060:                {
    #####: 1061:                  drawCard(i, state);
call    0 never executed
        -: 1062:                }
        -: 1063:              }
        -: 1064:            }
        -: 1065:          }
        -: 1066:        }
    #####: 1067:        return 0;
        -: 1068:
        -: 1069:        case steward:
    #####: 1070:        if (choice1 == 1) 
branch  0 never executed
branch  1 never executed
        -: 1071:        {
        -: 1072:          //+2 cards
    #####: 1073:          drawCard(currentPlayer, state);
call    0 never executed
    #####: 1074:          drawCard(currentPlayer, state);
call    0 never executed
        -: 1075:        } 
    #####: 1076:        else if (choice1 == 2) 
branch  0 never executed
branch  1 never executed
        -: 1077:        {
        -: 1078:          //+2 coins
    #####: 1079:          state -> coins = state -> coins + 2;
        -: 1080:        } 
        -: 1081:        else 
        -: 1082:        {
        -: 1083:          //trash 2 cards in hand
    #####: 1084:          discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1085:          discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1086:        }
        -: 1087:
        -: 1088:        //discard card from hand
    #####: 1089:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1090:        return 0;
        -: 1091:
        -: 1092:        case tribute:
    #####: 1093:        if ((state -> discardCount[nextPlayer] + state -> deckCount[nextPlayer]) <= 1) 
branch  0 never executed
branch  1 never executed
        -: 1094:        {
    #####: 1095:          if (state -> deckCount[nextPlayer] > 0) 
branch  0 never executed
branch  1 never executed
        -: 1096:          {
    #####: 1097:            tributeRevealedCards[0] = state -> deck[nextPlayer][state -> deckCount[nextPlayer] - 1];
    #####: 1098:            state -> deckCount[nextPlayer]--;
        -: 1099:          } 
    #####: 1100:          else if (state -> discardCount[nextPlayer] > 0) 
branch  0 never executed
branch  1 never executed
        -: 1101:          {
    #####: 1102:            tributeRevealedCards[0] = state -> discard[nextPlayer][state -> discardCount[nextPlayer] - 1];
    #####: 1103:            state -> discardCount[nextPlayer]--;
        -: 1104:          } 
        -: 1105:          else 
        -: 1106:          {
        -: 1107:                //No Card to Reveal
        -: 1108:            if (DEBUG) 
        -: 1109:            {
        -: 1110:              printf("No cards to reveal\n");
        -: 1111:            }
        -: 1112:          }
        -: 1113:        } 
        -: 1114:        else 
        -: 1115:        {
    #####: 1116:          if (state -> deckCount[nextPlayer] == 0) 
branch  0 never executed
branch  1 never executed
        -: 1117:          {
    #####: 1118:            for (i = 0; i < state -> discardCount[nextPlayer]; i++) 
branch  0 never executed
branch  1 never executed
        -: 1119:            {
    #####: 1120:                    state -> deck[nextPlayer][i] = state -> discard[nextPlayer][i]; //Move to deck
    #####: 1121:                    state -> deckCount[nextPlayer]++;
    #####: 1122:                    state -> discard[nextPlayer][i] = -1;
    #####: 1123:                    state -> discardCount[nextPlayer]--;
        -: 1124:                  }
        -: 1125:
    #####: 1126:                shuffle(nextPlayer, state); //Shuffle the deck
call    0 never executed
        -: 1127:              }
    #####: 1128:              tributeRevealedCards[0] = state -> deck[nextPlayer][state -> deckCount[nextPlayer] - 1];
    #####: 1129:              state -> deck[nextPlayer][state -> deckCount[nextPlayer]--] = -1;
    #####: 1130:              state -> deckCount[nextPlayer]--;
    #####: 1131:              tributeRevealedCards[1] = state -> deck[nextPlayer][state -> deckCount[nextPlayer] - 1];
    #####: 1132:              state -> deck[nextPlayer][state -> deckCount[nextPlayer]--] = -1;
    #####: 1133:              state -> deckCount[nextPlayer]--;
        -: 1134:            }
        -: 1135:
    #####: 1136:        if (tributeRevealedCards[0] == tributeRevealedCards[1]) 
branch  0 never executed
branch  1 never executed
        -: 1137:        { //If we have a duplicate card, just drop one 
    #####: 1138:          state -> playedCards[state -> playedCardCount] = tributeRevealedCards[1];
    #####: 1139:          state -> playedCardCount++;
    #####: 1140:          tributeRevealedCards[1] = -1;
        -: 1141:        }
        -: 1142:
    #####: 1143:        for (i = 0; i <= 2; i++) 
branch  0 never executed
branch  1 never executed
        -: 1144:        {
    #####: 1145:            if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1146:            { //Treasure cards
    #####: 1147:              state -> coins += 2;
        -: 1148:            } 
    #####: 1149:            else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
        -: 1150:            { //Victory Card Found
    #####: 1151:              drawCard(currentPlayer, state);
call    0 never executed
    #####: 1152:              drawCard(currentPlayer, state);
call    0 never executed
        -: 1153:            } 
        -: 1154:            else 
        -: 1155:            { //Action Card
    #####: 1156:              state -> numActions = state -> numActions + 2;
        -: 1157:            }
        -: 1158:          }
        -: 1159:
    #####: 1160:          return 0;
        -: 1161:
        -: 1162:          case ambassador:
    #####: 1163:        j = 0; //used to check if player has enough cards to discard
        -: 1164:
    #####: 1165:        if (choice2 > 2 || choice2 < 0) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1166:        {
    #####: 1167:          return -1;
        -: 1168:        }
        -: 1169:
    #####: 1170:        if (choice1 == handPos) 
branch  0 never executed
branch  1 never executed
        -: 1171:        {
    #####: 1172:          return -1;
        -: 1173:        }
        -: 1174:
    #####: 1175:        for (i = 0; i < state -> handCount[currentPlayer]; i++) 
branch  0 never executed
branch  1 never executed
        -: 1176:        {
    #####: 1177:          if (i != handPos && i == state -> hand[currentPlayer][choice1] && i != choice1) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1178:          {
    #####: 1179:            j++;
        -: 1180:          }
        -: 1181:        }
    #####: 1182:        if (j < choice2) 
branch  0 never executed
branch  1 never executed
        -: 1183:        {
    #####: 1184:          return -1;
        -: 1185:        }
        -: 1186:
        -: 1187:        if (DEBUG)
        -: 1188:          printf("Player %d reveals card number: %d\n", currentPlayer, state -> hand[currentPlayer][choice1]);
        -: 1189:
        -: 1190:        //increase supply count for choosen card by amount being discarded
    #####: 1191:        state -> supplyCount[state -> hand[currentPlayer][choice1]] += choice2;
        -: 1192:
        -: 1193:        //each other player gains a copy of revealed card
    #####: 1194:        for (i = 0; i < state -> numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1195:          if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####: 1196:            gainCard(state -> hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1197:          }
        -: 1198:        }
        -: 1199:
        -: 1200:        //discard played card from hand
    #####: 1201:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1202:
        -: 1203:        //trash copies of cards returned to supply
    #####: 1204:        for (j = 0; j < choice2; j++) {
branch  0 never executed
branch  1 never executed
    #####: 1205:          for (i = 0; i < state -> handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1206:            if (state -> hand[currentPlayer][i] == state -> hand[currentPlayer][choice1]) {
branch  0 never executed
branch  1 never executed
    #####: 1207:              discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1208:              break;
        -: 1209:            }
        -: 1210:          }
        -: 1211:        }
        -: 1212:
    #####: 1213:        return 0;
        -: 1214:
        -: 1215:        case cutpurse:
        -: 1216:
    #####: 1217:        updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1218:        for (i = 0; i < state -> numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1219:          if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####: 1220:            for (j = 0; j < state -> handCount[i]; j++) {
branch  0 never executed
branch  1 never executed
    #####: 1221:              if (state -> hand[i][j] == copper) {
branch  0 never executed
branch  1 never executed
    #####: 1222:                discardCard(j, i, state, 0);
call    0 never executed
    #####: 1223:                break;
        -: 1224:              }
    #####: 1225:              if (j == state -> handCount[i]) {
branch  0 never executed
branch  1 never executed
    #####: 1226:                for (k = 0; k < state -> handCount[i]; k++) {
branch  0 never executed
branch  1 never executed
        -: 1227:                  if (DEBUG)
        -: 1228:                    printf("Player %d reveals card number %d\n", i, state -> hand[i][k]);
        -: 1229:                }
    #####: 1230:                break;
        -: 1231:              }
        -: 1232:            }
        -: 1233:
        -: 1234:          }
        -: 1235:
        -: 1236:        }
        -: 1237:
        -: 1238:        //discard played card from hand
    #####: 1239:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1240:
    #####: 1241:        return 0;
        -: 1242:
        -: 1243:        case embargo:
        -: 1244:        //+2 Coins
    #####: 1245:        state -> coins = state -> coins + 2;
        -: 1246:
        -: 1247:        //see if selected pile is in play
    #####: 1248:        if (state -> supplyCount[choice1] == -1) {
branch  0 never executed
branch  1 never executed
    #####: 1249:          return -1;
        -: 1250:        }
        -: 1251:
        -: 1252:        //add embargo token to selected supply pile
    #####: 1253:        state -> embargoTokens[choice1]++;
        -: 1254:
        -: 1255:        //trash card
    #####: 1256:        discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1257:        return 0;
        -: 1258:
        -: 1259:        case outpost:
        -: 1260:        //set outpost flag
    #####: 1261:        state -> outpostPlayed++;
        -: 1262:
        -: 1263:        //discard card
    #####: 1264:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1265:        return 0;
        -: 1266:
        -: 1267:        case salvager:
        -: 1268:        //+1 buy
    #####: 1269:        state -> numBuys++;
        -: 1270:
    #####: 1271:        if (choice1) {
branch  0 never executed
branch  1 never executed
        -: 1272:            //gain coins equal to trashed card
    #####: 1273:          state -> coins = state -> coins + getCost(handCard(choice1, state));
call    0 never executed
call    1 never executed
        -: 1274:            //trash card
    #####: 1275:          discardCard(choice1, currentPlayer, state, 1);
call    0 never executed
        -: 1276:        }
        -: 1277:
        -: 1278:        //discard card
    #####: 1279:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1280:        return 0;
        -: 1281:
        -: 1282:        case sea_hag:
    #####: 1283:        for (i = 0; i < state -> numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1284:          if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####: 1285:            state -> discard[i][state -> discardCount[i]] = state -> deck[i][state -> deckCount[i]--];
    #####: 1286:            state -> deckCount[i]--;
    #####: 1287:            state -> discardCount[i]++;
    #####: 1288:                state -> deck[i][state -> deckCount[i]--] = curse; //Top card now a curse
        -: 1289:              }
        -: 1290:            }
    #####: 1291:            return 0;
        -: 1292:
        -: 1293:            case treasure_map:
        -: 1294:        //search hand for another treasure_map
    #####: 1295:            index = -1;
    #####: 1296:            for (i = 0; i < state -> handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1297:              if (state -> hand[currentPlayer][i] == treasure_map && i != handPos) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1298:                index = i;
    #####: 1299:                break;
        -: 1300:              }
        -: 1301:            }
    #####: 1302:            if (index > -1) {
branch  0 never executed
branch  1 never executed
        -: 1303:            //trash both treasure cards
    #####: 1304:              discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1305:              discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1306:
        -: 1307:            //gain 4 Gold cards
    #####: 1308:              for (i = 0; i < 4; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1309:                gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1310:              }
        -: 1311:
        -: 1312:            //return success
    #####: 1313:              return 1;
        -: 1314:            }
        -: 1315:
        -: 1316:        //no second treasure_map found in hand
    #####: 1317:            return -1;
        -: 1318:          }
        -: 1319:
    #####: 1320:          return -1;
        -: 1321:        }
        -: 1322:
function discardCard called 0 returned 0% blocks executed 0%
    #####: 1323:        int discardCard(int handPos, int currentPlayer, struct gameState * state, int trashFlag) {
        -: 1324:
        -: 1325:    //if card is not trashed, added to Played pile 
    #####: 1326:          if (trashFlag < 1) {
branch  0 never executed
branch  1 never executed
        -: 1327:        //add card to played pile
    #####: 1328:            state -> playedCards[state -> playedCardCount] = state -> hand[currentPlayer][handPos];
    #####: 1329:            state -> playedCardCount++;
        -: 1330:          }
        -: 1331:
        -: 1332:    //set played card to -1
    #####: 1333:          state -> hand[currentPlayer][handPos] = -1;
        -: 1334:
        -: 1335:    //remove card from player's hand
    #####: 1336:    if (handPos == (state -> handCount[currentPlayer] - 1)) //last card in hand array is played
branch  0 never executed
branch  1 never executed
        -: 1337:    {
        -: 1338:        //reduce number of cards in hand
    #####: 1339:      state -> handCount[currentPlayer]--;
    #####: 1340:    } else if (state -> handCount[currentPlayer] == 1) //only one card in hand
branch  0 never executed
branch  1 never executed
        -: 1341:    {
        -: 1342:        //reduce number of cards in hand
    #####: 1343:      state -> handCount[currentPlayer]--;
        -: 1344:    } else {
        -: 1345:        //replace discarded card with last card in hand
    #####: 1346:      state -> hand[currentPlayer][handPos] = state -> hand[currentPlayer][(state -> handCount[currentPlayer] - 1)];
        -: 1347:        //set last card to -1
    #####: 1348:      state -> hand[currentPlayer][state -> handCount[currentPlayer] - 1] = -1;
        -: 1349:        //reduce number of cards in hand
    #####: 1350:      state -> handCount[currentPlayer]--;
        -: 1351:    }
        -: 1352:
    #####: 1353:    return 0;
        -: 1354:  }
        -: 1355:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1356:  int gainCard(int supplyPos, struct gameState * state, int toFlag, int player) {
        -: 1357:    //Note: supplyPos is enum of choosen card
        -: 1358:
        -: 1359:    //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1360:    if (supplyCount(supplyPos, state) < 1) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1361:      return -1;
        -: 1362:    }
        -: 1363:
        -: 1364:    //added card for [whoseTurn] current player:
        -: 1365:    // toFlag = 0 : add to discard
        -: 1366:    // toFlag = 1 : add to deck
        -: 1367:    // toFlag = 2 : add to hand
        -: 1368:
    #####: 1369:    if (toFlag == 1) {
branch  0 never executed
branch  1 never executed
    #####: 1370:      state -> deck[player][state -> deckCount[player]] = supplyPos;
    #####: 1371:      state -> deckCount[player]++;
    #####: 1372:    } else if (toFlag == 2) {
branch  0 never executed
branch  1 never executed
    #####: 1373:      state -> hand[player][state -> handCount[player]] = supplyPos;
    #####: 1374:      state -> handCount[player]++;
        -: 1375:    } else {
    #####: 1376:      state -> discard[player][state -> discardCount[player]] = supplyPos;
    #####: 1377:      state -> discardCount[player]++;
        -: 1378:    }
        -: 1379:
        -: 1380:    //decrease number in supply pile
    #####: 1381:    state -> supplyCount[supplyPos]--;
        -: 1382:
    #####: 1383:    return 0;
        -: 1384:  }
        -: 1385:
function updateCoins called 3 returned 100% blocks executed 82%
        3: 1386:  int updateCoins(int player, struct gameState * state, int bonus) {
        -: 1387:    int i;
        -: 1388:
        -: 1389:    //reset coin count
        3: 1390:    state -> coins = 0;
        -: 1391:
        -: 1392:    //add coins for each Treasure card in player's hand
       18: 1393:    for (i = 0; i < state -> handCount[player]; i++) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       15: 1394:      if (state -> hand[player][i] == copper) {
branch  0 taken 40% (fallthrough)
branch  1 taken 60%
        6: 1395:        state -> coins += 1;
        9: 1396:      } else if (state -> hand[player][i] == silver) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1397:        state -> coins += 2;
        9: 1398:      } else if (state -> hand[player][i] == gold) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1399:        state -> coins += 3;
        -: 1400:      }
        -: 1401:    }
        -: 1402:
        -: 1403:    //add bonus
        3: 1404:    state -> coins += bonus;
        -: 1405:
        3: 1406:    return 0;
        -: 1407:  }
        -: 1408:
        -: 1409://end of dominion.c
-------------------------Testing: Smithy-------------------------

Draw 3 cards from deck:
Num of Hand cards increases by 2 (after discard):	ERROR: 3 is not equal to 2!

Draw deck decreases by 3:	ERROR: 4 is not equal to 3!

Discard pile does not change:	PASSED
Test other state variables that shouldn't change:
supplyCount[0]:	PASSED
embargoTokens[0]:	PASSED
supplyCount[1]:	PASSED
embargoTokens[1]:	PASSED
supplyCount[2]:	PASSED
embargoTokens[2]:	PASSED
supplyCount[3]:	PASSED
embargoTokens[3]:	PASSED
supplyCount[4]:	PASSED
embargoTokens[4]:	PASSED
supplyCount[5]:	PASSED
embargoTokens[5]:	PASSED
supplyCount[6]:	PASSED
embargoTokens[6]:	PASSED
supplyCount[7]:	PASSED
embargoTokens[7]:	PASSED
supplyCount[8]:	PASSED
embargoTokens[8]:	PASSED
supplyCount[9]:	PASSED
embargoTokens[9]:	PASSED
supplyCount[10]:	PASSED
embargoTokens[10]:	PASSED
supplyCount[11]:	PASSED
embargoTokens[11]:	PASSED
supplyCount[12]:	PASSED
embargoTokens[12]:	PASSED
supplyCount[13]:	PASSED
embargoTokens[13]:	PASSED
supplyCount[14]:	PASSED
embargoTokens[14]:	PASSED
supplyCount[15]:	PASSED
embargoTokens[15]:	PASSED
supplyCount[16]:	PASSED
embargoTokens[16]:	PASSED
supplyCount[17]:	PASSED
embargoTokens[17]:	PASSED
supplyCount[18]:	PASSED
embargoTokens[18]:	PASSED
supplyCount[19]:	PASSED
embargoTokens[19]:	PASSED
supplyCount[20]:	PASSED
embargoTokens[20]:	PASSED
supplyCount[21]:	PASSED
embargoTokens[21]:	PASSED
supplyCount[22]:	PASSED
embargoTokens[22]:	PASSED
supplyCount[23]:	PASSED
embargoTokens[23]:	PASSED
supplyCount[24]:	PASSED
embargoTokens[24]:	PASSED
supplyCount[25]:	PASSED
embargoTokens[25]:	PASSED
supplyCount[26]:	PASSED
embargoTokens[26]:	PASSED
numActions:	PASSED
numBuys:	PASSED
Other player #1: 
handCount:	PASSED
deckCount:	PASSED
discardCount:	PASSED

Draw 3 cards from deck and discard pile:
Num of Hand cards increases by 2 (after discard):	ERROR: 3 is not equal to 2!

Empty discard pile:	PASSED
Deck decreases by 1:	ERROR: 0 is not equal to 1!

Test other state variables that shouldn't change:
supplyCount[0]:	PASSED
embargoTokens[0]:	PASSED
supplyCount[1]:	PASSED
embargoTokens[1]:	PASSED
supplyCount[2]:	PASSED
embargoTokens[2]:	PASSED
supplyCount[3]:	PASSED
embargoTokens[3]:	PASSED
supplyCount[4]:	PASSED
embargoTokens[4]:	PASSED
supplyCount[5]:	PASSED
embargoTokens[5]:	PASSED
supplyCount[6]:	PASSED
embargoTokens[6]:	PASSED
supplyCount[7]:	PASSED
embargoTokens[7]:	PASSED
supplyCount[8]:	PASSED
embargoTokens[8]:	PASSED
supplyCount[9]:	PASSED
embargoTokens[9]:	PASSED
supplyCount[10]:	PASSED
embargoTokens[10]:	PASSED
supplyCount[11]:	PASSED
embargoTokens[11]:	PASSED
supplyCount[12]:	PASSED
embargoTokens[12]:	PASSED
supplyCount[13]:	PASSED
embargoTokens[13]:	PASSED
supplyCount[14]:	PASSED
embargoTokens[14]:	PASSED
supplyCount[15]:	PASSED
embargoTokens[15]:	PASSED
supplyCount[16]:	PASSED
embargoTokens[16]:	PASSED
supplyCount[17]:	PASSED
embargoTokens[17]:	PASSED
supplyCount[18]:	PASSED
embargoTokens[18]:	PASSED
supplyCount[19]:	PASSED
embargoTokens[19]:	PASSED
supplyCount[20]:	PASSED
embargoTokens[20]:	PASSED
supplyCount[21]:	PASSED
embargoTokens[21]:	PASSED
supplyCount[22]:	PASSED
embargoTokens[22]:	PASSED
supplyCount[23]:	PASSED
embargoTokens[23]:	PASSED
supplyCount[24]:	PASSED
embargoTokens[24]:	PASSED
supplyCount[25]:	PASSED
embargoTokens[25]:	PASSED
supplyCount[26]:	PASSED
embargoTokens[26]:	PASSED
numActions:	PASSED
numBuys:	PASSED
Other player #1: 
handCount:	PASSED
deckCount:	PASSED
discardCount:	PASSED

Draw 2 cards from deck and discard pile:
Num of Hand cards increases by 1 (after discard):	PASSED
Discard pile becomes empty:	PASSED
Draw deck becomes empty:	PASSED
Test other state variables that shouldn't change:
supplyCount[0]:	PASSED
embargoTokens[0]:	PASSED
supplyCount[1]:	PASSED
embargoTokens[1]:	PASSED
supplyCount[2]:	PASSED
embargoTokens[2]:	PASSED
supplyCount[3]:	PASSED
embargoTokens[3]:	PASSED
supplyCount[4]:	PASSED
embargoTokens[4]:	PASSED
supplyCount[5]:	PASSED
embargoTokens[5]:	PASSED
supplyCount[6]:	PASSED
embargoTokens[6]:	PASSED
supplyCount[7]:	PASSED
embargoTokens[7]:	PASSED
supplyCount[8]:	PASSED
embargoTokens[8]:	PASSED
supplyCount[9]:	PASSED
embargoTokens[9]:	PASSED
supplyCount[10]:	PASSED
embargoTokens[10]:	PASSED
supplyCount[11]:	PASSED
embargoTokens[11]:	PASSED
supplyCount[12]:	PASSED
embargoTokens[12]:	PASSED
supplyCount[13]:	PASSED
embargoTokens[13]:	PASSED
supplyCount[14]:	PASSED
embargoTokens[14]:	PASSED
supplyCount[15]:	PASSED
embargoTokens[15]:	PASSED
supplyCount[16]:	PASSED
embargoTokens[16]:	PASSED
supplyCount[17]:	PASSED
embargoTokens[17]:	PASSED
supplyCount[18]:	PASSED
embargoTokens[18]:	PASSED
supplyCount[19]:	PASSED
embargoTokens[19]:	PASSED
supplyCount[20]:	PASSED
embargoTokens[20]:	PASSED
supplyCount[21]:	PASSED
embargoTokens[21]:	PASSED
supplyCount[22]:	PASSED
embargoTokens[22]:	PASSED
supplyCount[23]:	PASSED
embargoTokens[23]:	PASSED
supplyCount[24]:	PASSED
embargoTokens[24]:	PASSED
supplyCount[25]:	PASSED
embargoTokens[25]:	PASSED
supplyCount[26]:	PASSED
embargoTokens[26]:	PASSED
numActions:	PASSED
numBuys:	PASSED
Other player #1: 
handCount:	PASSED
deckCount:	PASSED
discardCount:	PASSED

Draw 3 cards from deck:
Num of Hand cards increases by 2 (after discard):	ERROR: 3 is not equal to 2!

Draw deck decreases by 3:	ERROR: 4 is not equal to 3!

Discard pile does not change:	PASSED
Test other state variables that shouldn't change:
supplyCount[0]:	PASSED
embargoTokens[0]:	PASSED
supplyCount[1]:	PASSED
embargoTokens[1]:	PASSED
supplyCount[2]:	PASSED
embargoTokens[2]:	PASSED
supplyCount[3]:	PASSED
embargoTokens[3]:	PASSED
supplyCount[4]:	PASSED
embargoTokens[4]:	PASSED
supplyCount[5]:	PASSED
embargoTokens[5]:	PASSED
supplyCount[6]:	PASSED
embargoTokens[6]:	PASSED
supplyCount[7]:	PASSED
embargoTokens[7]:	PASSED
supplyCount[8]:	PASSED
embargoTokens[8]:	PASSED
supplyCount[9]:	PASSED
embargoTokens[9]:	PASSED
supplyCount[10]:	PASSED
embargoTokens[10]:	PASSED
supplyCount[11]:	PASSED
embargoTokens[11]:	PASSED
supplyCount[12]:	PASSED
embargoTokens[12]:	PASSED
supplyCount[13]:	PASSED
embargoTokens[13]:	PASSED
supplyCount[14]:	PASSED
embargoTokens[14]:	PASSED
supplyCount[15]:	PASSED
embargoTokens[15]:	PASSED
supplyCount[16]:	PASSED
embargoTokens[16]:	PASSED
supplyCount[17]:	PASSED
embargoTokens[17]:	PASSED
supplyCount[18]:	PASSED
embargoTokens[18]:	PASSED
supplyCount[19]:	PASSED
embargoTokens[19]:	PASSED
supplyCount[20]:	PASSED
embargoTokens[20]:	PASSED
supplyCount[21]:	PASSED
embargoTokens[21]:	PASSED
supplyCount[22]:	PASSED
embargoTokens[22]:	PASSED
supplyCount[23]:	PASSED
embargoTokens[23]:	PASSED
supplyCount[24]:	PASSED
embargoTokens[24]:	PASSED
supplyCount[25]:	PASSED
embargoTokens[25]:	PASSED
supplyCount[26]:	PASSED
embargoTokens[26]:	PASSED
numActions:	PASSED
numBuys:	PASSED
Other player #1: 
handCount:	PASSED
deckCount:	PASSED
discardCount:	PASSED
Other player #2: 
handCount:	PASSED
deckCount:	PASSED
discardCount:	PASSED

Draw 3 cards from deck and discard pile:
Num of Hand cards increases by 2 (after discard):	ERROR: 3 is not equal to 2!

Empty discard pile:	PASSED
Deck decreases by 1:	ERROR: 0 is not equal to 1!

Test other state variables that shouldn't change:
supplyCount[0]:	PASSED
embargoTokens[0]:	PASSED
supplyCount[1]:	PASSED
embargoTokens[1]:	PASSED
supplyCount[2]:	PASSED
embargoTokens[2]:	PASSED
supplyCount[3]:	PASSED
embargoTokens[3]:	PASSED
supplyCount[4]:	PASSED
embargoTokens[4]:	PASSED
supplyCount[5]:	PASSED
embargoTokens[5]:	PASSED
supplyCount[6]:	PASSED
embargoTokens[6]:	PASSED
supplyCount[7]:	PASSED
embargoTokens[7]:	PASSED
supplyCount[8]:	PASSED
embargoTokens[8]:	PASSED
supplyCount[9]:	PASSED
embargoTokens[9]:	PASSED
supplyCount[10]:	PASSED
embargoTokens[10]:	PASSED
supplyCount[11]:	PASSED
embargoTokens[11]:	PASSED
supplyCount[12]:	PASSED
embargoTokens[12]:	PASSED
supplyCount[13]:	PASSED
embargoTokens[13]:	PASSED
supplyCount[14]:	PASSED
embargoTokens[14]:	PASSED
supplyCount[15]:	PASSED
embargoTokens[15]:	PASSED
supplyCount[16]:	PASSED
embargoTokens[16]:	PASSED
supplyCount[17]:	PASSED
embargoTokens[17]:	PASSED
supplyCount[18]:	PASSED
embargoTokens[18]:	PASSED
supplyCount[19]:	PASSED
embargoTokens[19]:	PASSED
supplyCount[20]:	PASSED
embargoTokens[20]:	PASSED
supplyCount[21]:	PASSED
embargoTokens[21]:	PASSED
supplyCount[22]:	PASSED
embargoTokens[22]:	PASSED
supplyCount[23]:	PASSED
embargoTokens[23]:	PASSED
supplyCount[24]:	PASSED
embargoTokens[24]:	PASSED
supplyCount[25]:	PASSED
embargoTokens[25]:	PASSED
supplyCount[26]:	PASSED
embargoTokens[26]:	PASSED
numActions:	PASSED
numBuys:	PASSED
Other player #1: 
handCount:	PASSED
deckCount:	PASSED
discardCount:	PASSED
Other player #2: 
handCount:	PASSED
deckCount:	PASSED
discardCount:	PASSED

Draw 2 cards from deck and discard pile:
Num of Hand cards increases by 1 (after discard):	PASSED
Discard pile becomes empty:	PASSED
Draw deck becomes empty:	PASSED
Test other state variables that shouldn't change:
supplyCount[0]:	PASSED
embargoTokens[0]:	PASSED
supplyCount[1]:	PASSED
embargoTokens[1]:	PASSED
supplyCount[2]:	PASSED
embargoTokens[2]:	PASSED
supplyCount[3]:	PASSED
embargoTokens[3]:	PASSED
supplyCount[4]:	PASSED
embargoTokens[4]:	PASSED
supplyCount[5]:	PASSED
embargoTokens[5]:	PASSED
supplyCount[6]:	PASSED
embargoTokens[6]:	PASSED
supplyCount[7]:	PASSED
embargoTokens[7]:	PASSED
supplyCount[8]:	PASSED
embargoTokens[8]:	PASSED
supplyCount[9]:	PASSED
embargoTokens[9]:	PASSED
supplyCount[10]:	PASSED
embargoTokens[10]:	PASSED
supplyCount[11]:	PASSED
embargoTokens[11]:	PASSED
supplyCount[12]:	PASSED
embargoTokens[12]:	PASSED
supplyCount[13]:	PASSED
embargoTokens[13]:	PASSED
supplyCount[14]:	PASSED
embargoTokens[14]:	PASSED
supplyCount[15]:	PASSED
embargoTokens[15]:	PASSED
supplyCount[16]:	PASSED
embargoTokens[16]:	PASSED
supplyCount[17]:	PASSED
embargoTokens[17]:	PASSED
supplyCount[18]:	PASSED
embargoTokens[18]:	PASSED
supplyCount[19]:	PASSED
embargoTokens[19]:	PASSED
supplyCount[20]:	PASSED
embargoTokens[20]:	PASSED
supplyCount[21]:	PASSED
embargoTokens[21]:	PASSED
supplyCount[22]:	PASSED
embargoTokens[22]:	PASSED
supplyCount[23]:	PASSED
embargoTokens[23]:	PASSED
supplyCount[24]:	PASSED
embargoTokens[24]:	PASSED
supplyCount[25]:	PASSED
embargoTokens[25]:	PASSED
supplyCount[26]:	PASSED
embargoTokens[26]:	PASSED
numActions:	PASSED
numBuys:	PASSED
Other player #1: 
handCount:	PASSED
deckCount:	PASSED
discardCount:	PASSED
Other player #2: 
handCount:	PASSED
deckCount:	PASSED
discardCount:	PASSED

Draw 3 cards from deck:
Num of Hand cards increases by 2 (after discard):	ERROR: 3 is not equal to 2!

Draw deck decreases by 3:	ERROR: 4 is not equal to 3!

Discard pile does not change:	PASSED
Test other state variables that shouldn't change:
supplyCount[0]:	PASSED
embargoTokens[0]:	PASSED
supplyCount[1]:	PASSED
embargoTokens[1]:	PASSED
supplyCount[2]:	PASSED
embargoTokens[2]:	PASSED
supplyCount[3]:	PASSED
embargoTokens[3]:	PASSED
supplyCount[4]:	PASSED
embargoTokens[4]:	PASSED
supplyCount[5]:	PASSED
embargoTokens[5]:	PASSED
supplyCount[6]:	PASSED
embargoTokens[6]:	PASSED
supplyCount[7]:	PASSED
embargoTokens[7]:	PASSED
supplyCount[8]:	PASSED
embargoTokens[8]:	PASSED
supplyCount[9]:	PASSED
embargoTokens[9]:	PASSED
supplyCount[10]:	PASSED
embargoTokens[10]:	PASSED
supplyCount[11]:	PASSED
embargoTokens[11]:	PASSED
supplyCount[12]:	PASSED
embargoTokens[12]:	PASSED
supplyCount[13]:	PASSED
embargoTokens[13]:	PASSED
supplyCount[14]:	PASSED
embargoTokens[14]:	PASSED
supplyCount[15]:	PASSED
embargoTokens[15]:	PASSED
supplyCount[16]:	PASSED
embargoTokens[16]:	PASSED
supplyCount[17]:	PASSED
embargoTokens[17]:	PASSED
supplyCount[18]:	PASSED
embargoTokens[18]:	PASSED
supplyCount[19]:	PASSED
embargoTokens[19]:	PASSED
supplyCount[20]:	PASSED
embargoTokens[20]:	PASSED
supplyCount[21]:	PASSED
embargoTokens[21]:	PASSED
supplyCount[22]:	PASSED
embargoTokens[22]:	PASSED
supplyCount[23]:	PASSED
embargoTokens[23]:	PASSED
supplyCount[24]:	PASSED
embargoTokens[24]:	PASSED
supplyCount[25]:	PASSED
embargoTokens[25]:	PASSED
supplyCount[26]:	PASSED
embargoTokens[26]:	PASSED
numActions:	PASSED
numBuys:	PASSED
Other player #1: 
handCount:	PASSED
deckCount:	PASSED
discardCount:	PASSED
Other player #2: 
handCount:	PASSED
deckCount:	PASSED
discardCount:	PASSED
Other player #3: 
handCount:	PASSED
deckCount:	PASSED
discardCount:	PASSED

Draw 3 cards from deck and discard pile:
Num of Hand cards increases by 2 (after discard):	ERROR: 3 is not equal to 2!

Empty discard pile:	PASSED
Deck decreases by 1:	ERROR: 0 is not equal to 1!

Test other state variables that shouldn't change:
supplyCount[0]:	PASSED
embargoTokens[0]:	PASSED
supplyCount[1]:	PASSED
embargoTokens[1]:	PASSED
supplyCount[2]:	PASSED
embargoTokens[2]:	PASSED
supplyCount[3]:	PASSED
embargoTokens[3]:	PASSED
supplyCount[4]:	PASSED
embargoTokens[4]:	PASSED
supplyCount[5]:	PASSED
embargoTokens[5]:	PASSED
supplyCount[6]:	PASSED
embargoTokens[6]:	PASSED
supplyCount[7]:	PASSED
embargoTokens[7]:	PASSED
supplyCount[8]:	PASSED
embargoTokens[8]:	PASSED
supplyCount[9]:	PASSED
embargoTokens[9]:	PASSED
supplyCount[10]:	PASSED
embargoTokens[10]:	PASSED
supplyCount[11]:	PASSED
embargoTokens[11]:	PASSED
supplyCount[12]:	PASSED
embargoTokens[12]:	PASSED
supplyCount[13]:	PASSED
embargoTokens[13]:	PASSED
supplyCount[14]:	PASSED
embargoTokens[14]:	PASSED
supplyCount[15]:	PASSED
embargoTokens[15]:	PASSED
supplyCount[16]:	PASSED
embargoTokens[16]:	PASSED
supplyCount[17]:	PASSED
embargoTokens[17]:	PASSED
supplyCount[18]:	PASSED
embargoTokens[18]:	PASSED
supplyCount[19]:	PASSED
embargoTokens[19]:	PASSED
supplyCount[20]:	PASSED
embargoTokens[20]:	PASSED
supplyCount[21]:	PASSED
embargoTokens[21]:	PASSED
supplyCount[22]:	PASSED
embargoTokens[22]:	PASSED
supplyCount[23]:	PASSED
embargoTokens[23]:	PASSED
supplyCount[24]:	PASSED
embargoTokens[24]:	PASSED
supplyCount[25]:	PASSED
embargoTokens[25]:	PASSED
supplyCount[26]:	PASSED
embargoTokens[26]:	PASSED
numActions:	PASSED
numBuys:	PASSED
Other player #1: 
handCount:	PASSED
deckCount:	PASSED
discardCount:	PASSED
Other player #2: 
handCount:	PASSED
deckCount:	PASSED
discardCount:	PASSED
Other player #3: 
handCount:	PASSED
deckCount:	PASSED
discardCount:	PASSED

Draw 2 cards from deck and discard pile:
Num of Hand cards increases by 1 (after discard):	PASSED
Discard pile becomes empty:	PASSED
Draw deck becomes empty:	PASSED
Test other state variables that shouldn't change:
supplyCount[0]:	PASSED
embargoTokens[0]:	PASSED
supplyCount[1]:	PASSED
embargoTokens[1]:	PASSED
supplyCount[2]:	PASSED
embargoTokens[2]:	PASSED
supplyCount[3]:	PASSED
embargoTokens[3]:	PASSED
supplyCount[4]:	PASSED
embargoTokens[4]:	PASSED
supplyCount[5]:	PASSED
embargoTokens[5]:	PASSED
supplyCount[6]:	PASSED
embargoTokens[6]:	PASSED
supplyCount[7]:	PASSED
embargoTokens[7]:	PASSED
supplyCount[8]:	PASSED
embargoTokens[8]:	PASSED
supplyCount[9]:	PASSED
embargoTokens[9]:	PASSED
supplyCount[10]:	PASSED
embargoTokens[10]:	PASSED
supplyCount[11]:	PASSED
embargoTokens[11]:	PASSED
supplyCount[12]:	PASSED
embargoTokens[12]:	PASSED
supplyCount[13]:	PASSED
embargoTokens[13]:	PASSED
supplyCount[14]:	PASSED
embargoTokens[14]:	PASSED
supplyCount[15]:	PASSED
embargoTokens[15]:	PASSED
supplyCount[16]:	PASSED
embargoTokens[16]:	PASSED
supplyCount[17]:	PASSED
embargoTokens[17]:	PASSED
supplyCount[18]:	PASSED
embargoTokens[18]:	PASSED
supplyCount[19]:	PASSED
embargoTokens[19]:	PASSED
supplyCount[20]:	PASSED
embargoTokens[20]:	PASSED
supplyCount[21]:	PASSED
embargoTokens[21]:	PASSED
supplyCount[22]:	PASSED
embargoTokens[22]:	PASSED
supplyCount[23]:	PASSED
embargoTokens[23]:	PASSED
supplyCount[24]:	PASSED
embargoTokens[24]:	PASSED
supplyCount[25]:	PASSED
embargoTokens[25]:	PASSED
supplyCount[26]:	PASSED
embargoTokens[26]:	PASSED
numActions:	PASSED
numBuys:	PASSED
Other player #1: 
handCount:	PASSED
deckCount:	PASSED
discardCount:	PASSED
Other player #2: 
handCount:	PASSED
deckCount:	PASSED
discardCount:	PASSED
Other player #3: 
handCount:	PASSED
deckCount:	PASSED
discardCount:	PASSED

Total Number of Failures: 12

Function 'updateCoins'
Lines executed:81.82% of 11
Branches executed:100.00% of 8
Taken at least once:75.00% of 8
No calls

Function 'gainCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 1

Function 'discardCard'
Lines executed:84.62% of 13
Branches executed:100.00% of 6
Taken at least once:50.00% of 6
No calls

Function 'cardEffect'
Lines executed:3.40% of 206
Branches executed:12.85% of 179
Taken at least once:1.12% of 179
Calls executed:3.45% of 58

Function 'smithy_card'
Lines executed:100.00% of 6
Branches executed:100.00% of 2
Taken at least once:100.00% of 2
Calls executed:100.00% of 3

Function 'adventurer_card'
Lines executed:0.00% of 18
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
Calls executed:0.00% of 3

Function 'council_room_card'
Lines executed:0.00% of 9
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 4

Function 'village_card'
Lines executed:0.00% of 6
No branches
Calls executed:0.00% of 3

Function 'great_hall_card'
Lines executed:0.00% of 6
No branches
Calls executed:0.00% of 3

Function 'getCost'
Lines executed:0.00% of 30
Branches executed:0.00% of 28
Taken at least once:0.00% of 28
No calls

Function 'drawCard'
Lines executed:100.00% of 22
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
Calls executed:100.00% of 1

Function 'getWinners'
Lines executed:0.00% of 24
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
Calls executed:0.00% of 2

Function 'scoreFor'
Lines executed:0.00% of 42
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
Calls executed:0.00% of 3

Function 'isGameOver'
Lines executed:0.00% of 10
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'endTurn'
Lines executed:0.00% of 20
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'whoseTurn'
Lines executed:100.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 9
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'supplyCount'
Lines executed:0.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 3
No branches
Calls executed:0.00% of 1

Function 'numHandCards'
Lines executed:0.00% of 2
No branches
Calls executed:0.00% of 1

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 4

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
Calls executed:0.00% of 3

Function 'shuffle'
Lines executed:100.00% of 16
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
Calls executed:100.00% of 2

Function 'initializeGame'
Lines executed:95.16% of 62
Branches executed:100.00% of 46
Taken at least once:91.30% of 46
Calls executed:100.00% of 5

Function 'kingdomCards'
Lines executed:0.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:0.00% of 3
No branches
No calls

Function 'compare'
Lines executed:83.33% of 6
Branches executed:100.00% of 4
Taken at least once:75.00% of 4
No calls

File 'dominion.c'
Lines executed:23.58% of 581
Branches executed:24.70% of 417
Taken at least once:17.27% of 417
Calls executed:13.00% of 100
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h> 
        -:    5:#include <math.h> 
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 138 returned 100% blocks executed 83%
      138:    8:int compare(const void * a,
        -:    9:  const void * b) {
      138:   10:  if ( * (int * ) a > * (int * ) b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   11:    return 1;
      138:   12:  if ( * (int * ) a < * (int * ) b)
branch  0 taken 28% (fallthrough)
branch  1 taken 72%
       39:   13:    return -1;
       99:   14:  return 0;
        -:   15:}
        -:   16:
function newGame called 0 returned 0% blocks executed 0%
    #####:   17:struct gameState * newGame() {
    #####:   18:  struct gameState * g = malloc(sizeof(struct gameState));
    #####:   19:  return g;
        -:   20:}
        -:   21:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   22:int * kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   23:  int k8, int k9, int k10) {
    #####:   24:  int * k = malloc(10 * sizeof(int));
    #####:   25:  k[0] = k1;
    #####:   26:  k[1] = k2;
    #####:   27:  k[2] = k3;
    #####:   28:  k[3] = k4;
    #####:   29:  k[4] = k5;
    #####:   30:  k[5] = k6;
    #####:   31:  k[6] = k7;
    #####:   32:  k[7] = k8;
    #####:   33:  k[8] = k9;
    #####:   34:  k[9] = k10;
    #####:   35:  return k;
        -:   36:}
        -:   37:
function initializeGame called 3 returned 100% blocks executed 95%
        3:   38:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   39:  struct gameState * state) {
        -:   40:
        -:   41:  int i;
        -:   42:  int j;
        -:   43:  int it;
        -:   44:    //set up random number generator
        3:   45:  SelectStream(1);
call    0 returned 100%
        3:   46:  PutSeed((long) randomSeed);
call    0 returned 100%
        -:   47:
        -:   48:    //check number of players
        3:   49:  if (numPlayers > MAX_PLAYERS || numPlayers < 2) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:   50:    return -1;
        -:   51:  }
        -:   52:
        -:   53:    //set number of players
        3:   54:  state -> numPlayers = numPlayers;
        -:   55:
        -:   56:    //check selected kingdom cards are different
       33:   57:  for (i = 0; i < 10; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      330:   58:    for (j = 0; j < 10; j++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      300:   59:      if (j != i && kingdomCards[j] == kingdomCards[i]) {
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:   60:        return -1;
        -:   61:      }
        -:   62:    }
        -:   63:  }
        -:   64:
        -:   65:    //initialize supply
        -:   66:    ///////////////////////////////
        -:   67:
        -:   68:    //set number of Curse cards
        3:   69:  if (numPlayers == 2) {
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        1:   70:    state -> supplyCount[curse] = 10;
        2:   71:  } else if (numPlayers == 3) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        1:   72:    state -> supplyCount[curse] = 20;
        -:   73:  } else {
        1:   74:    state -> supplyCount[curse] = 30;
        -:   75:  }
        -:   76:
        -:   77:    //set number of Victory cards
        3:   78:  if (numPlayers == 2) {
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        1:   79:    state -> supplyCount[estate] = 8;
        1:   80:    state -> supplyCount[duchy] = 8;
        1:   81:    state -> supplyCount[province] = 8;
        -:   82:  } else {
        2:   83:    state -> supplyCount[estate] = 12;
        2:   84:    state -> supplyCount[duchy] = 12;
        2:   85:    state -> supplyCount[province] = 12;
        -:   86:  }
        -:   87:
        -:   88:    //set number of Treasure cards
        3:   89:  state -> supplyCount[copper] = 60 - (7 * numPlayers);
        3:   90:  state -> supplyCount[silver] = 40;
        3:   91:  state -> supplyCount[gold] = 30;
        -:   92:
        -:   93:    //set number of Kingdom cards
       63:   94:    for (i = adventurer; i <= treasure_map; i++) //loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:   95:    {
      495:   96:        for (j = 0; j < 10; j++) //loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:   97:        {
      465:   98:          if (kingdomCards[j] == i) {
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:   99:                //check if card is a 'Victory' Kingdom card
       30:  100:            if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens) {
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
       12:  101:              if (numPlayers == 2) {
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        2:  102:                state -> supplyCount[i] = 8;
        -:  103:              } else {
        4:  104:                state -> supplyCount[i] = 12;
        -:  105:              }
        -:  106:            } else {
       24:  107:              state -> supplyCount[i] = 10;
        -:  108:            }
       30:  109:            break;
        -:  110:            } else //card is not in the set choosen for the game
        -:  111:            {
      435:  112:              state -> supplyCount[i] = -1;
        -:  113:            }
        -:  114:          }
        -:  115:
        -:  116:        }
        -:  117:
        -:  118:    ////////////////////////
        -:  119:    //supply intilization complete
        -:  120:
        -:  121:    //set player decks
       12:  122:        for (i = 0; i < numPlayers; i++) {
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        9:  123:          state -> deckCount[i] = 0;
       36:  124:          for (j = 0; j < 3; j++) {
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
       27:  125:            state -> deck[i][j] = estate;
       27:  126:            state -> deckCount[i]++;
        -:  127:          }
       72:  128:          for (j = 3; j < 10; j++) {
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
       63:  129:            state -> deck[i][j] = copper;
       63:  130:            state -> deckCount[i]++;
        -:  131:          }
        -:  132:        }
        -:  133:
        -:  134:    //shuffle player decks
       12:  135:        for (i = 0; i < numPlayers; i++) {
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        9:  136:          if (shuffle(i, state) < 0) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  137:            return -1;
        -:  138:          }
        -:  139:        }
        -:  140:
        -:  141:    //draw player hands
       12:  142:        for (i = 0; i < numPlayers; i++) {
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  143:        //initialize hand size to zero
        9:  144:          state -> handCount[i] = 0;
        9:  145:          state -> discardCount[i] = 0;
        -:  146:        //draw 5 cards
        -:  147:        // for (j = 0; j < 5; j++)
        -:  148:        //  {
        -:  149:        //    drawCard(i, state);
        -:  150:        //  }
        -:  151:        }
        -:  152:
        -:  153:    //set embargo tokens to 0 for all supply piles
       84:  154:        for (i = 0; i <= treasure_map; i++) {
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
       81:  155:          state -> embargoTokens[i] = 0;
        -:  156:        }
        -:  157:
        -:  158:    //initialize first player's turn
        3:  159:        state -> outpostPlayed = 0;
        3:  160:        state -> phase = 0;
        3:  161:        state -> numActions = 1;
        3:  162:        state -> numBuys = 1;
        3:  163:        state -> playedCardCount = 0;
        3:  164:        state -> whoseTurn = 0;
        3:  165:        state -> handCount[state -> whoseTurn] = 0;
        -:  166:    //int it; move to top
        -:  167:
        -:  168:    //Moved draw cards to here, only drawing at the start of a turn
       18:  169:        for (it = 0; it < 5; it++) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       15:  170:          drawCard(state -> whoseTurn, state);
call    0 returned 100%
        -:  171:        }
        -:  172:
        3:  173:        updateCoins(state -> whoseTurn, state, 0);
call    0 returned 100%
        -:  174:
        3:  175:        return 0;
        -:  176:      }
        -:  177:
function shuffle called 18 returned 100% blocks executed 100%
       18:  178:      int shuffle(int player, struct gameState * state) {
        -:  179:
        -:  180:        int newDeck[MAX_DECK];
       18:  181:        int newDeckPos = 0;
        -:  182:        int card;
        -:  183:        int i;
        -:  184:
       18:  185:        if (state -> deckCount[player] < 1)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        6:  186:          return -1;
       12:  187:        qsort((void * )(state -> deck[player]), state -> deckCount[player], sizeof(int), compare);
call    0 returned 100%
        -:  188:    /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  189:
      120:  190:        while (state -> deckCount[player] > 0) {
branch  0 taken 89%
branch  1 taken 11% (fallthrough)
       96:  191:          card = floor(Random() * state -> deckCount[player]);
call    0 returned 100%
       96:  192:          newDeck[newDeckPos] = state -> deck[player][card];
       96:  193:          newDeckPos++;
      289:  194:          for (i = card; i < state -> deckCount[player] - 1; i++) {
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
      193:  195:            state -> deck[player][i] = state -> deck[player][i + 1];
        -:  196:          }
       96:  197:          state -> deckCount[player]--;
        -:  198:        }
      108:  199:        for (i = 0; i < newDeckPos; i++) {
branch  0 taken 89%
branch  1 taken 11% (fallthrough)
       96:  200:          state -> deck[player][i] = newDeck[i];
       96:  201:          state -> deckCount[player]++;
        -:  202:        }
        -:  203:
       12:  204:        return 0;
        -:  205:      }
        -:  206:
function playCard called 0 returned 0% blocks executed 0%
    #####:  207:      int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState * state) {
        -:  208:        int card;
    #####:  209:    int coin_bonus = 0; //tracks coins gain from actions
        -:  210:
        -:  211:    //check if it is the right phase
    #####:  212:    if (state -> phase != 0) {
branch  0 never executed
branch  1 never executed
    #####:  213:      return -1;
        -:  214:    }
        -:  215:
        -:  216:    //check if player has enough actions
    #####:  217:    if (state -> numActions < 1) {
branch  0 never executed
branch  1 never executed
    #####:  218:      return -1;
        -:  219:    }
        -:  220:
        -:  221:    //get card played
    #####:  222:    card = handCard(handPos, state);
call    0 never executed
        -:  223:
        -:  224:    //check if selected card is an action
    #####:  225:    if (card < adventurer || card > treasure_map) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  226:      return -1;
        -:  227:    }
        -:  228:
        -:  229:    //play card
    #####:  230:    if (cardEffect(card, choice1, choice2, choice3, state, handPos, & coin_bonus) < 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  231:      return -1;
        -:  232:    }
        -:  233:
        -:  234:    //reduce number of actions
    #####:  235:    state -> numActions--;
        -:  236:
        -:  237:    //update coins (Treasure cards may be added with card draws)
    #####:  238:    updateCoins(state -> whoseTurn, state, coin_bonus);
call    0 never executed
        -:  239:
    #####:  240:    return 0;
        -:  241:  }
        -:  242:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  243:  int buyCard(int supplyPos, struct gameState * state) {
        -:  244:    int who;
        -:  245:    if (DEBUG) {
        -:  246:      printf("Entering buyCard...\n");
        -:  247:    }
        -:  248:
        -:  249:    // I don't know what to do about the phase thing.
        -:  250:
    #####:  251:    who = state -> whoseTurn;
        -:  252:
    #####:  253:    if (state -> numBuys < 1) {
branch  0 never executed
branch  1 never executed
        -:  254:      if (DEBUG)
        -:  255:        printf("You do not have any buys left\n");
    #####:  256:      return -1;
    #####:  257:    } else if (supplyCount(supplyPos, state) < 1) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  258:      if (DEBUG)
        -:  259:        printf("There are not any of that type of card left\n");
    #####:  260:      return -1;
    #####:  261:    } else if (state -> coins < getCost(supplyPos)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  262:      if (DEBUG)
        -:  263:        printf("You do not have enough money to buy that. You have %d coins.\n", state -> coins);
    #####:  264:      return -1;
        -:  265:    } else {
    #####:  266:      state -> phase = 1;
        -:  267:        //state->supplyCount[supplyPos]--;
    #####:  268:        gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  269:
    #####:  270:        state -> coins = (state -> coins) - (getCost(supplyPos));
call    0 never executed
    #####:  271:        state -> numBuys--;
        -:  272:        if (DEBUG)
        -:  273:          printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state -> numBuys, state -> coins);
        -:  274:      }
        -:  275:
        -:  276:    //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  277:    //state->discardCount[who]++;
        -:  278:
    #####:  279:      return 0;
        -:  280:    }
        -:  281:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  282:    int numHandCards(struct gameState * state) 
        -:  283:    {
    #####:  284:      return state -> handCount[whoseTurn(state)];
call    0 never executed
        -:  285:    }
        -:  286:
function handCard called 0 returned 0% blocks executed 0%
    #####:  287:    int handCard(int handPos, struct gameState * state) 
        -:  288:    {
    #####:  289:      int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  290:      return state -> hand[currentPlayer][handPos];
        -:  291:    }
        -:  292:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  293:    int supplyCount(int card, struct gameState * state) 
        -:  294:    {
    #####:  295:      return state -> supplyCount[card];
        -:  296:    }
        -:  297:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  298:    int fullDeckCount(int player, int card, struct gameState * state) 
        -:  299:    {
        -:  300:      int i;
    #####:  301:      int count = 0;
        -:  302:
    #####:  303:      for (i = 0; i < state -> deckCount[player]; i++) 
branch  0 never executed
branch  1 never executed
        -:  304:      {
    #####:  305:        if (state -> deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  306:      }
        -:  307:
    #####:  308:      for (i = 0; i < state -> handCount[player]; i++) 
branch  0 never executed
branch  1 never executed
        -:  309:      {
    #####:  310:        if (state -> hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  311:      }
        -:  312:
    #####:  313:      for (i = 0; i < state -> discardCount[player]; i++) 
branch  0 never executed
branch  1 never executed
        -:  314:      {
    #####:  315:        if (state -> discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  316:      }
        -:  317:
    #####:  318:      return count;
        -:  319:    }
        -:  320:
function whoseTurn called 18 returned 100% blocks executed 100%
       18:  321:    int whoseTurn(struct gameState * state) 
        -:  322:    {
       18:  323:      return state -> whoseTurn;
        -:  324:    }
        -:  325:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  326:    int endTurn(struct gameState * state) 
        -:  327:    {
        -:  328:      int k;
        -:  329:      int i;
    #####:  330:      int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  331:
        -:  332:    //Discard hand
    #####:  333:      for (i = 0; i < state -> handCount[currentPlayer]; i++) 
branch  0 never executed
branch  1 never executed
        -:  334:      {
    #####:  335:        state -> discard[currentPlayer][state -> discardCount[currentPlayer]++] = state -> hand[currentPlayer][i]; //Discard
    #####:  336:        state -> hand[currentPlayer][i] = -1; //Set card to -1
        -:  337:      }
    #####:  338:    state -> handCount[currentPlayer] = 0; //Reset hand count
        -:  339:
        -:  340:    //Code for determining the player
    #####:  341:    if (currentPlayer < (state -> numPlayers - 1)) 
branch  0 never executed
branch  1 never executed
        -:  342:    {
    #####:  343:        state -> whoseTurn = currentPlayer + 1; //Still safe to increment
        -:  344:      } 
        -:  345:      else 
        -:  346:      {
    #####:  347:        state -> whoseTurn = 0; //Max player has been reached, loop back around to player 1
        -:  348:      }
        -:  349:
    #####:  350:      state -> outpostPlayed = 0;
    #####:  351:      state -> phase = 0;
    #####:  352:      state -> numActions = 1;
    #####:  353:      state -> coins = 0;
    #####:  354:      state -> numBuys = 1;
    #####:  355:      state -> playedCardCount = 0;
    #####:  356:      state -> handCount[state -> whoseTurn] = 0;
        -:  357:
        -:  358:    //int k; move to top
        -:  359:    //Next player draws hand
    #####:  360:      for (k = 0; k < 5; k++) 
branch  0 never executed
branch  1 never executed
        -:  361:      {
    #####:  362:        drawCard(state -> whoseTurn, state); //Draw a card
call    0 never executed
        -:  363:      }
        -:  364:
        -:  365:    //Update money
    #####:  366:      updateCoins(state -> whoseTurn, state, 0);
call    0 never executed
        -:  367:
    #####:  368:      return 0;
        -:  369:    }
        -:  370:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  371:    int isGameOver(struct gameState * state) 
        -:  372:    {
        -:  373:      int i;
        -:  374:      int j;
        -:  375:
        -:  376:    //if stack of Province cards is empty, the game ends
    #####:  377:      if (state -> supplyCount[province] == 0) 
branch  0 never executed
branch  1 never executed
        -:  378:      {
    #####:  379:        return 1;
        -:  380:      }
        -:  381:
        -:  382:    //if three supply pile are at 0, the game ends
    #####:  383:      j = 0;
    #####:  384:      for (i = 0; i < 25; i++) 
branch  0 never executed
branch  1 never executed
        -:  385:      {
    #####:  386:        if (state -> supplyCount[i] == 0) 
branch  0 never executed
branch  1 never executed
        -:  387:        {
    #####:  388:          j++;
        -:  389:        }
        -:  390:      }
    #####:  391:      if (j >= 3) 
branch  0 never executed
branch  1 never executed
        -:  392:      {
    #####:  393:        return 1;
        -:  394:      }
        -:  395:
    #####:  396:      return 0;
        -:  397:    }
        -:  398:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  399:    int scoreFor(int player, struct gameState * state) 
        -:  400:    {
        -:  401:      int i;
    #####:  402:      int score = 0;
        -:  403:    //score from hand
    #####:  404:      for (i = 0; i < state -> handCount[player]; i++) 
branch  0 never executed
branch  1 never executed
        -:  405:      {
    #####:  406:        if (state -> hand[player][i] == curse) 
branch  0 never executed
branch  1 never executed
        -:  407:        {
    #####:  408:          score = score - 1;
        -:  409:        };
    #####:  410:        if (state -> hand[player][i] == estate) 
branch  0 never executed
branch  1 never executed
        -:  411:        {
    #####:  412:          score = score + 1;
        -:  413:        };
    #####:  414:        if (state -> hand[player][i] == duchy) 
branch  0 never executed
branch  1 never executed
        -:  415:        {
    #####:  416:          score = score + 3;
        -:  417:        };
    #####:  418:        if (state -> hand[player][i] == province) 
branch  0 never executed
branch  1 never executed
        -:  419:        {
    #####:  420:          score = score + 6;
        -:  421:        };
    #####:  422:        if (state -> hand[player][i] == great_hall) 
branch  0 never executed
branch  1 never executed
        -:  423:        {
    #####:  424:          score = score + 1;
        -:  425:        };
    #####:  426:        if (state -> hand[player][i] == gardens) 
branch  0 never executed
branch  1 never executed
        -:  427:        {
    #####:  428:          score = score + (fullDeckCount(player, 0, state) / 10);
call    0 never executed
        -:  429:        };
        -:  430:      }
        -:  431:
        -:  432:    //score from discard
    #####:  433:      for (i = 0; i < state -> discardCount[player]; i++) 
branch  0 never executed
branch  1 never executed
        -:  434:      {
    #####:  435:        if (state -> discard[player][i] == curse) 
branch  0 never executed
branch  1 never executed
        -:  436:        {
    #####:  437:          score = score - 1;
        -:  438:        };
    #####:  439:        if (state -> discard[player][i] == estate) 
branch  0 never executed
branch  1 never executed
        -:  440:        {
    #####:  441:          score = score + 1;
        -:  442:        };
    #####:  443:        if (state -> discard[player][i] == duchy) 
branch  0 never executed
branch  1 never executed
        -:  444:        {
    #####:  445:          score = score + 3;
        -:  446:        };
    #####:  447:        if (state -> discard[player][i] == province) 
branch  0 never executed
branch  1 never executed
        -:  448:        {
    #####:  449:          score = score + 6;
        -:  450:        };
    #####:  451:        if (state -> discard[player][i] == great_hall) 
branch  0 never executed
branch  1 never executed
        -:  452:        {
    #####:  453:          score = score + 1;
        -:  454:        };
    #####:  455:        if (state -> discard[player][i] == gardens) 
branch  0 never executed
branch  1 never executed
        -:  456:        {
    #####:  457:          score = score + (fullDeckCount(player, 0, state) / 10);
call    0 never executed
        -:  458:        };
        -:  459:      }
        -:  460:
        -:  461:    //score from deck
    #####:  462:      for (i = 0; i < state -> discardCount[player]; i++) 
branch  0 never executed
branch  1 never executed
        -:  463:      {
    #####:  464:        if (state -> deck[player][i] == curse) 
branch  0 never executed
branch  1 never executed
        -:  465:        {
    #####:  466:          score = score - 1;
        -:  467:        };
    #####:  468:        if (state -> deck[player][i] == estate) 
branch  0 never executed
branch  1 never executed
        -:  469:        {
    #####:  470:          score = score + 1;
        -:  471:        };
    #####:  472:        if (state -> deck[player][i] == duchy) 
branch  0 never executed
branch  1 never executed
        -:  473:        {
    #####:  474:          score = score + 3;
        -:  475:        };
    #####:  476:        if (state -> deck[player][i] == province) 
branch  0 never executed
branch  1 never executed
        -:  477:        {
    #####:  478:          score = score + 6;
        -:  479:        };
    #####:  480:        if (state -> deck[player][i] == great_hall) 
branch  0 never executed
branch  1 never executed
        -:  481:        {
    #####:  482:          score = score + 1;
        -:  483:        };
    #####:  484:        if (state -> deck[player][i] == gardens) 
branch  0 never executed
branch  1 never executed
        -:  485:        {
    #####:  486:          score = score + (fullDeckCount(player, 0, state) / 10);
call    0 never executed
        -:  487:        };
        -:  488:      }
        -:  489:
    #####:  490:      return score;
        -:  491:    }
        -:  492:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  493:    int getWinners(int players[MAX_PLAYERS], struct gameState * state) 
        -:  494:    {
        -:  495:      int i;
        -:  496:      int j;
        -:  497:      int highScore;
        -:  498:      int currentPlayer;
        -:  499:
        -:  500:    //get score for each player
    #####:  501:      for (i = 0; i < MAX_PLAYERS; i++) 
branch  0 never executed
branch  1 never executed
        -:  502:      {
        -:  503:        //set unused player scores to -9999
    #####:  504:        if (i >= state -> numPlayers) 
branch  0 never executed
branch  1 never executed
        -:  505:        {
    #####:  506:          players[i] = -9999;
        -:  507:        } else {
    #####:  508:          players[i] = scoreFor(i, state);
call    0 never executed
        -:  509:        }
        -:  510:      }
        -:  511:
        -:  512:    //find highest score
    #####:  513:      j = 0;
    #####:  514:      for (i = 0; i < MAX_PLAYERS; i++) 
branch  0 never executed
branch  1 never executed
        -:  515:      {
    #####:  516:        if (players[i] > players[j]) 
branch  0 never executed
branch  1 never executed
        -:  517:        {
    #####:  518:          j = i;
        -:  519:        }
        -:  520:      }
    #####:  521:      highScore = players[j];
        -:  522:
        -:  523:    //add 1 to players who had less turns
    #####:  524:      currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  525:      for (i = 0; i < MAX_PLAYERS; i++) 
branch  0 never executed
branch  1 never executed
        -:  526:      {
    #####:  527:        if (players[i] == highScore && i > currentPlayer) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  528:        {
    #####:  529:          players[i]++;
        -:  530:        }
        -:  531:      }
        -:  532:
        -:  533:    //find new highest score
    #####:  534:      j = 0;
    #####:  535:      for (i = 0; i < MAX_PLAYERS; i++) 
branch  0 never executed
branch  1 never executed
        -:  536:      {
    #####:  537:        if (players[i] > players[j]) 
branch  0 never executed
branch  1 never executed
        -:  538:        {
    #####:  539:          j = i;
        -:  540:        }
        -:  541:      }
    #####:  542:      highScore = players[j];
        -:  543:
        -:  544:    //set winners in array to 1 and rest to 0
    #####:  545:      for (i = 0; i < MAX_PLAYERS; i++) 
branch  0 never executed
branch  1 never executed
        -:  546:      {
    #####:  547:        if (players[i] == highScore) 
branch  0 never executed
branch  1 never executed
        -:  548:        {
    #####:  549:          players[i] = 1;
        -:  550:        } else {
    #####:  551:          players[i] = 0;
        -:  552:        }
        -:  553:      }
        -:  554:
    #####:  555:      return 0;
        -:  556:    }
        -:  557:
function drawCard called 51 returned 100% blocks executed 100%
       51:  558:    int drawCard(int player, struct gameState * state) 
        -:  559:    {
        -:  560:      int count;
        -:  561:      int deckCounter;
       51:  562:    if (state -> deckCount[player] <= 0) { //Deck is empty
branch  0 taken 18% (fallthrough)
branch  1 taken 82%
        -:  563:
        -:  564:        //Step 1 Shuffle the discard pile back into a deck
        -:  565:      int i;
        -:  566:        //Move discard to deck
       15:  567:      for (i = 0; i < state -> discardCount[player]; i++) 
branch  0 taken 40%
branch  1 taken 60% (fallthrough)
        -:  568:      {
        6:  569:        state -> deck[player][i] = state -> discard[player][i];
        6:  570:        state -> discard[player][i] = -1;
        -:  571:      }
        -:  572:
        9:  573:      state -> deckCount[player] = state -> discardCount[player];
        9:  574:        state -> discardCount[player] = 0; //Reset discard
        -:  575:
        -:  576:        //Shufffle the deck
        9:  577:        shuffle(player, state); //Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  578:
        -:  579:        if (DEBUG) 
        -:  580:        { //Debug statements
        -:  581:          printf("Deck count now: %d\n", state -> deckCount[player]);
        -:  582:        }
        -:  583:
        9:  584:        state -> discardCount[player] = 0;
        -:  585:
        -:  586:        //Step 2 Draw Card
        9:  587:        count = state -> handCount[player]; //Get current player's hand count
        -:  588:
        -:  589:        if (DEBUG) 
        -:  590:        { //Debug statements
        -:  591:          printf("Current hand count: %d\n", count);
        -:  592:        }
        -:  593:
        9:  594:        deckCounter = state -> deckCount[player]; //Create a holder for the deck count
        -:  595:
        9:  596:        if (deckCounter == 0)
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        6:  597:          return -1;
        -:  598:
        3:  599:        state -> hand[player][count] = state -> deck[player][deckCounter - 1]; //Add card to hand
        3:  600:        state -> deckCount[player]--;
        3:  601:        state -> handCount[player]++; //Increment hand count
        -:  602:      } 
        -:  603:      else 
        -:  604:      {
       42:  605:        int count = state -> handCount[player]; //Get current hand count for player
        -:  606:        int deckCounter;
        -:  607:        if (DEBUG) 
        -:  608:        { //Debug statements
        -:  609:          printf("Current hand count: %d\n", count);
        -:  610:        }
        -:  611:
       42:  612:        deckCounter = state -> deckCount[player]; //Create holder for the deck count
       42:  613:        state -> hand[player][count] = state -> deck[player][deckCounter - 1]; //Add card to the hand
       42:  614:        state -> deckCount[player]--;
       42:  615:        state -> handCount[player]++; //Increment hand count
        -:  616:      }
       45:  617:      return 0;
        -:  618:    }
        -:  619:
function getCost called 0 returned 0% blocks executed 0%
    #####:  620:    int getCost(int cardNumber) 
        -:  621:    {
    #####:  622:      switch (cardNumber) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  623:      {
        -:  624:        case curse:
    #####:  625:        return 0;
        -:  626:        case estate:
    #####:  627:        return 2;
        -:  628:        case duchy:
    #####:  629:        return 5;
        -:  630:        case province:
    #####:  631:        return 8;
        -:  632:        case copper:
    #####:  633:        return 0;
        -:  634:        case silver:
    #####:  635:        return 3;
        -:  636:        case gold:
    #####:  637:        return 6;
        -:  638:        case adventurer:
    #####:  639:        return 6;
        -:  640:        case council_room:
    #####:  641:        return 5;
        -:  642:        case feast:
    #####:  643:        return 4;
        -:  644:        case gardens:
    #####:  645:        return 4;
        -:  646:        case mine:
    #####:  647:        return 5;
        -:  648:        case remodel:
    #####:  649:        return 4;
        -:  650:        case smithy:
    #####:  651:        return 4;
        -:  652:        case village:
    #####:  653:        return 3;
        -:  654:        case baron:
    #####:  655:        return 4;
        -:  656:        case great_hall:
    #####:  657:        return 3;
        -:  658:        case minion:
    #####:  659:        return 5;
        -:  660:        case steward:
    #####:  661:        return 3;
        -:  662:        case tribute:
    #####:  663:        return 5;
        -:  664:        case ambassador:
    #####:  665:        return 3;
        -:  666:        case cutpurse:
    #####:  667:        return 4;
        -:  668:        case embargo:
    #####:  669:        return 2;
        -:  670:        case outpost:
    #####:  671:        return 5;
        -:  672:        case salvager:
    #####:  673:        return 4;
        -:  674:        case sea_hag:
    #####:  675:        return 4;
        -:  676:        case treasure_map:
    #####:  677:        return 4;
        -:  678:      }
        -:  679:
    #####:  680:      return -1;
        -:  681:    }
        -:  682:
        -:  683://A2 Refactor CLEAN CARD | NO BUGS
function great_hall_card called 0 returned 0% blocks executed 0%
    #####:  684:    int great_hall_card(int handPos, struct gameState * state) 
        -:  685:    {
    #####:  686:      int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  687:
    #####:  688:      drawCard(currentPlayer, state);
call    0 never executed
        -:  689:
        -:  690:    // provides another action turn
    #####:  691:      state -> numActions++;
        -:  692:
        -:  693:    // played card to discard pile
    #####:  694:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  695:      return 0;
        -:  696:    }
        -:  697:
        -:  698://A2 Refactor
function village_card called 0 returned 0% blocks executed 0%
    #####:  699:    int village_card(int handPos, struct gameState * state) 
        -:  700:    {
    #####:  701:      int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  702:
    #####:  703:      drawCard(currentPlayer, state);
call    0 never executed
        -:  704:
        -:  705:    //BUG: Should only provide 2 action turns
    #####:  706:      state -> numActions = state -> numActions + 4;
        -:  707:
        -:  708:    // played card to discard pile
    #####:  709:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  710:      return 0;
        -:  711:    }
        -:  712:
        -:  713://A2 Refactor
function council_room_card called 0 returned 0% blocks executed 0%
    #####:  714:    int council_room_card(int handPos, struct gameState * state) 
        -:  715:    {
        -:  716:      int i;
    #####:  717:      int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  718:
        -:  719:    // draw 4 cards
    #####:  720:      for (i = 0; i < 4; i++) {
branch  0 never executed
branch  1 never executed
    #####:  721:        drawCard(currentPlayer, state);
call    0 never executed
        -:  722:      }
        -:  723:
        -:  724:    //BUG: Card provides another buy turn 
        -:  725:    //state->numBuys++;      
        -:  726:
        -:  727:    // all other players draw a card
    #####:  728:      for (i = 0; i < state -> numPlayers; i++) 
branch  0 never executed
branch  1 never executed
        -:  729:      {
    #####:  730:        if (i != currentPlayer) 
branch  0 never executed
branch  1 never executed
        -:  731:        {
    #####:  732:          drawCard(i, state);
call    0 never executed
        -:  733:        }
        -:  734:      }
        -:  735:    // played card to discard pile
    #####:  736:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  737:      return 0;
        -:  738:    }
        -:  739:
        -:  740://A2 Refactor
function adventurer_card called 0 returned 0% blocks executed 0%
    #####:  741:    int adventurer_card(struct gameState * state) 
        -:  742:    {
    #####:  743:      int z = 0;
        -:  744:      int cardDrawn;
    #####:  745:      int drawntreasure = 0;
    #####:  746:      int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  747:      int temphand[MAX_HAND];
        -:  748:
    #####:  749:    while (drawntreasure < 2) 
branch  0 never executed
branch  1 never executed
        -:  750:    { // when the deck is empty, reshuffle the discard and make it the deck
    #####:  751:      if (state -> deckCount[currentPlayer] < 1) 
branch  0 never executed
branch  1 never executed
        -:  752:      {
    #####:  753:        shuffle(currentPlayer, state);
call    0 never executed
        -:  754:      }
    #####:  755:      drawCard(currentPlayer, state);
call    0 never executed
        -:  756:        // defines the drawn card as the top card
    #####:  757:      cardDrawn = state -> hand[currentPlayer][state -> handCount[currentPlayer] - 1];
    #####:  758:      if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  759:        //drawntreasure++;
        -:  760:        //BUG: increments by 4. Should increment by 1
    #####:  761:        drawntreasure += 4;
        -:  762:      else 
        -:  763:      {
    #####:  764:        temphand[z] = cardDrawn;
        -:  765:            // removes the most recently drawn (top) card
    #####:  766:        state -> handCount[currentPlayer]--;
    #####:  767:        z++;
        -:  768:      }
        -:  769:    }
    #####:  770:    while (z - 1 >= 0) 
branch  0 never executed
branch  1 never executed
        -:  771:    {
        -:  772:        // discard all cards in play that have been drawn
    #####:  773:      state -> discard[currentPlayer][state -> discardCount[currentPlayer]++] = temphand[z - 1];
    #####:  774:      z = z - 1;
        -:  775:    }
    #####:  776:    return 0;
        -:  777:  }
        -:  778:
        -:  779://A2 Refactor
function smithy_card called 9 returned 100% blocks executed 100%
        9:  780:  int smithy_card(int handPos, struct gameState * state) 
        -:  781:  {
        -:  782:    int i;
        9:  783:    int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:  784:    //BUG: Should only draw 3 cards  
       45:  785:    for (i = 0; i < 4; i++) 
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  786:    {
       36:  787:      drawCard(currentPlayer, state);
call    0 returned 100%
        -:  788:    }
        -:  789:    //discard card from hand
        9:  790:    discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        9:  791:    return 0;
        -:  792:  }
        -:  793:
function cardEffect called 9 returned 100% blocks executed 3%
        9:  794:  int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState * state, int handPos, int * bonus) {
        -:  795:    int i;
        -:  796:    int j;
        -:  797:    int k;
        -:  798:    int x;
        -:  799:    int index;
        9:  800:    int currentPlayer = whoseTurn(state);
call    0 returned 100%
        9:  801:    int nextPlayer = currentPlayer + 1;
        -:  802:
        9:  803:    int tributeRevealedCards[2] = 
        -:  804:    {
        -:  805:      -1, -1
        -:  806:    };
        -:  807:    int temphand[MAX_HAND]; // moved above the if statement
        -:  808:    //int drawntreasure=0; // commented out as part of A2 Refactor
        -:  809:    //int cardDrawn; // commented out as part of A2 Refactor
        -:  810:    //int z = 0;// this is the counter for the temp hand // commented out as part of A2 Refactor
        9:  811:    if (nextPlayer > (state -> numPlayers - 1)) 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  812:    {
    #####:  813:      nextPlayer = 0;
        -:  814:    }
        -:  815:
        -:  816:    //uses switch to select card and perform actions
        9:  817:    switch (card) 
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 100%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  818:    {
        -:  819:        // A2 Refactor  
        -:  820:      case adventurer:
    #####:  821:      return adventurer_card(state);
call    0 never executed
        -:  822:
        -:  823:        // A2 Refactor    
        -:  824:      case council_room:
    #####:  825:      return council_room_card(handPos, state);
call    0 never executed
        -:  826:
        -:  827:        // A2 Refactor  
        -:  828:      case smithy:
        9:  829:      return smithy_card(handPos, state);
call    0 returned 100%
        -:  830:
        -:  831:        // A2 Refactor  
        -:  832:      case village:
    #####:  833:      return village_card(handPos, state);
call    0 never executed
        -:  834:
        -:  835:        // A2 Refactor
        -:  836:      case great_hall:
    #####:  837:      return great_hall_card(handPos, state);
call    0 never executed
        -:  838:
        -:  839:      case feast:
        -:  840:        //gain card with cost up to 5
        -:  841:        //Backup hand
    #####:  842:      for (i = 0; i <= state -> handCount[currentPlayer]; i++) 
branch  0 never executed
branch  1 never executed
        -:  843:      {
    #####:  844:            temphand[i] = state -> hand[currentPlayer][i]; //Backup card
    #####:  845:            state -> hand[currentPlayer][i] = -1; //Set to nothing
        -:  846:          }
        -:  847:        //Backup hand
        -:  848:
        -:  849:        //Update Coins for Buy
    #####:  850:          updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  851:        x = 1; //Condition to loop on
    #####:  852:        while (x == 1) 
branch  0 never executed
branch  1 never executed
        -:  853:        { //Buy one card
    #####:  854:          if (supplyCount(choice1, state) <= 0) 
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  855:          {
        -:  856:            if (DEBUG)
        -:  857:              printf("None of that card left, sorry!\n");
        -:  858:
        -:  859:            if (DEBUG) 
        -:  860:            {
        -:  861:              printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  862:            }
        -:  863:          } 
    #####:  864:          else if (state -> coins < getCost(choice1)) 
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  865:          {
    #####:  866:            printf("That card is too expensive!\n");
call    0 never executed
        -:  867:
        -:  868:            if (DEBUG) 
        -:  869:            {
        -:  870:              printf("Coins: %d < %d\n", state -> coins, getCost(choice1));
        -:  871:            }
        -:  872:          } 
        -:  873:          else 
        -:  874:          {
        -:  875:            if (DEBUG) 
        -:  876:            {
        -:  877:              printf("Deck Count: %d\n", state -> handCount[currentPlayer] + state -> deckCount[currentPlayer] + state -> discardCount[currentPlayer]);
        -:  878:            }
        -:  879:
    #####:  880:                gainCard(choice1, state, 0, currentPlayer); //Gain the card
call    0 never executed
    #####:  881:                x = 0; //No more buying cards
        -:  882:
        -:  883:                if (DEBUG) 
        -:  884:                {
        -:  885:                  printf("Deck Count: %d\n", state -> handCount[currentPlayer] + state -> deckCount[currentPlayer] + state -> discardCount[currentPlayer]);
        -:  886:                }
        -:  887:
        -:  888:              }
        -:  889:            }
        -:  890:
        -:  891:        //Reset Hand
    #####:  892:            for (i = 0; i <= state -> handCount[currentPlayer]; i++) 
branch  0 never executed
branch  1 never executed
        -:  893:            {
    #####:  894:              state -> hand[currentPlayer][i] = temphand[i];
    #####:  895:              temphand[i] = -1;
        -:  896:            }
        -:  897:        //Reset Hand
        -:  898:
    #####:  899:            return 0;
        -:  900:
        -:  901:            case gardens:
    #####:  902:            return -1;
        -:  903:
        -:  904:            case mine:
    #####:  905:        j = state -> hand[currentPlayer][choice1]; //store card we will trash
        -:  906:
    #####:  907:        if (state -> hand[currentPlayer][choice1] < copper || state -> hand[currentPlayer][choice1] > gold) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  908:        {
    #####:  909:          return -1;
        -:  910:        }
        -:  911:
    #####:  912:        if (choice2 > treasure_map || choice2 < curse) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  913:        {
    #####:  914:          return -1;
        -:  915:        }
        -:  916:
    #####:  917:        if ((getCost(state -> hand[currentPlayer][choice1]) + 3) > getCost(choice2)) 
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  918:        {
    #####:  919:          return -1;
        -:  920:        }
        -:  921:
    #####:  922:        gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  923:
        -:  924:        //discard card from hand
    #####:  925:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  926:
        -:  927:        //discard trashed card
    #####:  928:        for (i = 0; i < state -> handCount[currentPlayer]; i++) 
branch  0 never executed
branch  1 never executed
        -:  929:        {
    #####:  930:          if (state -> hand[currentPlayer][i] == j) 
branch  0 never executed
branch  1 never executed
        -:  931:          {
    #####:  932:            discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  933:            break;
        -:  934:          }
        -:  935:        }
        -:  936:
    #####:  937:        return 0;
        -:  938:
        -:  939:        case remodel:
    #####:  940:        j = state -> hand[currentPlayer][choice1]; //store card we will trash
        -:  941:
    #####:  942:        if ((getCost(state -> hand[currentPlayer][choice1]) + 2) > getCost(choice2)) 
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  943:        {
    #####:  944:          return -1;
        -:  945:        }
        -:  946:
    #####:  947:        gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  948:
        -:  949:        //discard card from hand
    #####:  950:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  951:
        -:  952:        //discard trashed card
    #####:  953:        for (i = 0; i < state -> handCount[currentPlayer]; i++) 
branch  0 never executed
branch  1 never executed
        -:  954:        {
    #####:  955:          if (state -> hand[currentPlayer][i] == j) 
branch  0 never executed
branch  1 never executed
        -:  956:          {
    #####:  957:            discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  958:            break;
        -:  959:          }
        -:  960:        }
    #####:  961:        return 0;
        -:  962:
        -:  963:        case baron:
    #####:  964:        state -> numBuys++; //Increase buys by 1!
    #####:  965:        if (choice1 > 0) 
branch  0 never executed
branch  1 never executed
        -:  966:        { //Boolean true or going to discard an estate
    #####:  967:            int p = 0; //Iterator for hand!
    #####:  968:            int card_not_discarded = 1; //Flag for discard set!
    #####:  969:            while (card_not_discarded) 
branch  0 never executed
branch  1 never executed
        -:  970:            {
    #####:  971:                if (state -> hand[currentPlayer][p] == estate) 
branch  0 never executed
branch  1 never executed
        -:  972:                { //Found an estate card!
    #####:  973:                    state -> coins += 4; //Add 4 coins to the amount of coins
    #####:  974:                    state -> discard[currentPlayer][state -> discardCount[currentPlayer]] = state -> hand[currentPlayer][p];
    #####:  975:                    state -> discardCount[currentPlayer]++;
    #####:  976:                    for (; p < state -> handCount[currentPlayer]; p++) 
branch  0 never executed
branch  1 never executed
        -:  977:                    {
    #####:  978:                      state -> hand[currentPlayer][p] = state -> hand[currentPlayer][p + 1];
        -:  979:                    }
    #####:  980:                    state -> hand[currentPlayer][state -> handCount[currentPlayer]] = -1;
    #####:  981:                    state -> handCount[currentPlayer]--;
    #####:  982:                    card_not_discarded = 0; //Exit the loop
        -:  983:                  } 
    #####:  984:                  else if (p > state -> handCount[currentPlayer]) 
branch  0 never executed
branch  1 never executed
        -:  985:                  {
        -:  986:                    if (DEBUG) 
        -:  987:                    {
        -:  988:                      printf("No estate cards in your hand, invalid choice\n");
        -:  989:                      printf("Must gain an estate if there are any\n");
        -:  990:                    }
    #####:  991:                    if (supplyCount(estate, state) > 0) 
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  992:                    {
    #####:  993:                      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  994:                        state -> supplyCount[estate]--; //Decrement estates
    #####:  995:                        if (supplyCount(estate, state) == 0) 
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  996:                        {
    #####:  997:                          isGameOver(state);
call    0 never executed
        -:  998:                        }
        -:  999:                      }
    #####: 1000:                    card_not_discarded = 0; //Exit the loop
        -: 1001:                  } 
        -: 1002:                  else 
        -: 1003:                  {
    #####: 1004:                    p++; //Next card
        -: 1005:                  }
        -: 1006:                }
        -: 1007:              } 
        -: 1008:              else 
        -: 1009:              {
    #####: 1010:                if (supplyCount(estate, state) > 0) 
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1011:                {
    #####: 1012:                gainCard(estate, state, 0, currentPlayer); //Gain an estate
call    0 never executed
    #####: 1013:                state -> supplyCount[estate]--; //Decrement Estates
    #####: 1014:                if (supplyCount(estate, state) == 0) 
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1015:                {
    #####: 1016:                  isGameOver(state);
call    0 never executed
        -: 1017:                }
        -: 1018:              }
        -: 1019:            }
    #####: 1020:            return 0;
        -: 1021:
        -: 1022:            case minion:
        -: 1023:        //+1 action
    #####: 1024:            state -> numActions++;
        -: 1025:
        -: 1026:        //discard card from hand
    #####: 1027:            discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1028:
    #####: 1029:        if (choice1) //+2 coins
branch  0 never executed
branch  1 never executed
        -: 1030:        {
    #####: 1031:          state -> coins = state -> coins + 2;
    #####: 1032:        } else if (choice2) //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -: 1033:        {
        -: 1034:            //discard hand
    #####: 1035:          while (numHandCards(state) > 0) 
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1036:          {
    #####: 1037:            discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1038:          }
        -: 1039:
        -: 1040:            //draw 4
    #####: 1041:          for (i = 0; i < 4; i++) 
branch  0 never executed
branch  1 never executed
        -: 1042:          {
    #####: 1043:            drawCard(currentPlayer, state);
call    0 never executed
        -: 1044:          }
        -: 1045:
        -: 1046:            //other players discard hand and redraw if hand size > 4
    #####: 1047:          for (i = 0; i < state -> numPlayers; i++) 
branch  0 never executed
branch  1 never executed
        -: 1048:          {
    #####: 1049:            if (i != currentPlayer) 
branch  0 never executed
branch  1 never executed
        -: 1050:            {
    #####: 1051:              if (state -> handCount[i] > 4) 
branch  0 never executed
branch  1 never executed
        -: 1052:              {
        -: 1053:                        //discard hand
    #####: 1054:                while (state -> handCount[i] > 0) 
branch  0 never executed
branch  1 never executed
        -: 1055:                {
    #####: 1056:                  discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1057:                }
        -: 1058:                        //draw 4
    #####: 1059:                for (j = 0; j < 4; j++) 
branch  0 never executed
branch  1 never executed
        -: 1060:                {
    #####: 1061:                  drawCard(i, state);
call    0 never executed
        -: 1062:                }
        -: 1063:              }
        -: 1064:            }
        -: 1065:          }
        -: 1066:        }
    #####: 1067:        return 0;
        -: 1068:
        -: 1069:        case steward:
    #####: 1070:        if (choice1 == 1) 
branch  0 never executed
branch  1 never executed
        -: 1071:        {
        -: 1072:          //+2 cards
    #####: 1073:          drawCard(currentPlayer, state);
call    0 never executed
    #####: 1074:          drawCard(currentPlayer, state);
call    0 never executed
        -: 1075:        } 
    #####: 1076:        else if (choice1 == 2) 
branch  0 never executed
branch  1 never executed
        -: 1077:        {
        -: 1078:          //+2 coins
    #####: 1079:          state -> coins = state -> coins + 2;
        -: 1080:        } 
        -: 1081:        else 
        -: 1082:        {
        -: 1083:          //trash 2 cards in hand
    #####: 1084:          discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1085:          discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1086:        }
        -: 1087:
        -: 1088:        //discard card from hand
    #####: 1089:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1090:        return 0;
        -: 1091:
        -: 1092:        case tribute:
    #####: 1093:        if ((state -> discardCount[nextPlayer] + state -> deckCount[nextPlayer]) <= 1) 
branch  0 never executed
branch  1 never executed
        -: 1094:        {
    #####: 1095:          if (state -> deckCount[nextPlayer] > 0) 
branch  0 never executed
branch  1 never executed
        -: 1096:          {
    #####: 1097:            tributeRevealedCards[0] = state -> deck[nextPlayer][state -> deckCount[nextPlayer] - 1];
    #####: 1098:            state -> deckCount[nextPlayer]--;
        -: 1099:          } 
    #####: 1100:          else if (state -> discardCount[nextPlayer] > 0) 
branch  0 never executed
branch  1 never executed
        -: 1101:          {
    #####: 1102:            tributeRevealedCards[0] = state -> discard[nextPlayer][state -> discardCount[nextPlayer] - 1];
    #####: 1103:            state -> discardCount[nextPlayer]--;
        -: 1104:          } 
        -: 1105:          else 
        -: 1106:          {
        -: 1107:                //No Card to Reveal
        -: 1108:            if (DEBUG) 
        -: 1109:            {
        -: 1110:              printf("No cards to reveal\n");
        -: 1111:            }
        -: 1112:          }
        -: 1113:        } 
        -: 1114:        else 
        -: 1115:        {
    #####: 1116:          if (state -> deckCount[nextPlayer] == 0) 
branch  0 never executed
branch  1 never executed
        -: 1117:          {
    #####: 1118:            for (i = 0; i < state -> discardCount[nextPlayer]; i++) 
branch  0 never executed
branch  1 never executed
        -: 1119:            {
    #####: 1120:                    state -> deck[nextPlayer][i] = state -> discard[nextPlayer][i]; //Move to deck
    #####: 1121:                    state -> deckCount[nextPlayer]++;
    #####: 1122:                    state -> discard[nextPlayer][i] = -1;
    #####: 1123:                    state -> discardCount[nextPlayer]--;
        -: 1124:                  }
        -: 1125:
    #####: 1126:                shuffle(nextPlayer, state); //Shuffle the deck
call    0 never executed
        -: 1127:              }
    #####: 1128:              tributeRevealedCards[0] = state -> deck[nextPlayer][state -> deckCount[nextPlayer] - 1];
    #####: 1129:              state -> deck[nextPlayer][state -> deckCount[nextPlayer]--] = -1;
    #####: 1130:              state -> deckCount[nextPlayer]--;
    #####: 1131:              tributeRevealedCards[1] = state -> deck[nextPlayer][state -> deckCount[nextPlayer] - 1];
    #####: 1132:              state -> deck[nextPlayer][state -> deckCount[nextPlayer]--] = -1;
    #####: 1133:              state -> deckCount[nextPlayer]--;
        -: 1134:            }
        -: 1135:
    #####: 1136:        if (tributeRevealedCards[0] == tributeRevealedCards[1]) 
branch  0 never executed
branch  1 never executed
        -: 1137:        { //If we have a duplicate card, just drop one 
    #####: 1138:          state -> playedCards[state -> playedCardCount] = tributeRevealedCards[1];
    #####: 1139:          state -> playedCardCount++;
    #####: 1140:          tributeRevealedCards[1] = -1;
        -: 1141:        }
        -: 1142:
    #####: 1143:        for (i = 0; i <= 2; i++) 
branch  0 never executed
branch  1 never executed
        -: 1144:        {
    #####: 1145:            if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1146:            { //Treasure cards
    #####: 1147:              state -> coins += 2;
        -: 1148:            } 
    #####: 1149:            else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
        -: 1150:            { //Victory Card Found
    #####: 1151:              drawCard(currentPlayer, state);
call    0 never executed
    #####: 1152:              drawCard(currentPlayer, state);
call    0 never executed
        -: 1153:            } 
        -: 1154:            else 
        -: 1155:            { //Action Card
    #####: 1156:              state -> numActions = state -> numActions + 2;
        -: 1157:            }
        -: 1158:          }
        -: 1159:
    #####: 1160:          return 0;
        -: 1161:
        -: 1162:          case ambassador:
    #####: 1163:        j = 0; //used to check if player has enough cards to discard
        -: 1164:
    #####: 1165:        if (choice2 > 2 || choice2 < 0) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1166:        {
    #####: 1167:          return -1;
        -: 1168:        }
        -: 1169:
    #####: 1170:        if (choice1 == handPos) 
branch  0 never executed
branch  1 never executed
        -: 1171:        {
    #####: 1172:          return -1;
        -: 1173:        }
        -: 1174:
    #####: 1175:        for (i = 0; i < state -> handCount[currentPlayer]; i++) 
branch  0 never executed
branch  1 never executed
        -: 1176:        {
    #####: 1177:          if (i != handPos && i == state -> hand[currentPlayer][choice1] && i != choice1) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1178:          {
    #####: 1179:            j++;
        -: 1180:          }
        -: 1181:        }
    #####: 1182:        if (j < choice2) 
branch  0 never executed
branch  1 never executed
        -: 1183:        {
    #####: 1184:          return -1;
        -: 1185:        }
        -: 1186:
        -: 1187:        if (DEBUG)
        -: 1188:          printf("Player %d reveals card number: %d\n", currentPlayer, state -> hand[currentPlayer][choice1]);
        -: 1189:
        -: 1190:        //increase supply count for choosen card by amount being discarded
    #####: 1191:        state -> supplyCount[state -> hand[currentPlayer][choice1]] += choice2;
        -: 1192:
        -: 1193:        //each other player gains a copy of revealed card
    #####: 1194:        for (i = 0; i < state -> numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1195:          if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####: 1196:            gainCard(state -> hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1197:          }
        -: 1198:        }
        -: 1199:
        -: 1200:        //discard played card from hand
    #####: 1201:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1202:
        -: 1203:        //trash copies of cards returned to supply
    #####: 1204:        for (j = 0; j < choice2; j++) {
branch  0 never executed
branch  1 never executed
    #####: 1205:          for (i = 0; i < state -> handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1206:            if (state -> hand[currentPlayer][i] == state -> hand[currentPlayer][choice1]) {
branch  0 never executed
branch  1 never executed
    #####: 1207:              discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1208:              break;
        -: 1209:            }
        -: 1210:          }
        -: 1211:        }
        -: 1212:
    #####: 1213:        return 0;
        -: 1214:
        -: 1215:        case cutpurse:
        -: 1216:
    #####: 1217:        updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1218:        for (i = 0; i < state -> numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1219:          if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####: 1220:            for (j = 0; j < state -> handCount[i]; j++) {
branch  0 never executed
branch  1 never executed
    #####: 1221:              if (state -> hand[i][j] == copper) {
branch  0 never executed
branch  1 never executed
    #####: 1222:                discardCard(j, i, state, 0);
call    0 never executed
    #####: 1223:                break;
        -: 1224:              }
    #####: 1225:              if (j == state -> handCount[i]) {
branch  0 never executed
branch  1 never executed
    #####: 1226:                for (k = 0; k < state -> handCount[i]; k++) {
branch  0 never executed
branch  1 never executed
        -: 1227:                  if (DEBUG)
        -: 1228:                    printf("Player %d reveals card number %d\n", i, state -> hand[i][k]);
        -: 1229:                }
    #####: 1230:                break;
        -: 1231:              }
        -: 1232:            }
        -: 1233:
        -: 1234:          }
        -: 1235:
        -: 1236:        }
        -: 1237:
        -: 1238:        //discard played card from hand
    #####: 1239:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1240:
    #####: 1241:        return 0;
        -: 1242:
        -: 1243:        case embargo:
        -: 1244:        //+2 Coins
    #####: 1245:        state -> coins = state -> coins + 2;
        -: 1246:
        -: 1247:        //see if selected pile is in play
    #####: 1248:        if (state -> supplyCount[choice1] == -1) {
branch  0 never executed
branch  1 never executed
    #####: 1249:          return -1;
        -: 1250:        }
        -: 1251:
        -: 1252:        //add embargo token to selected supply pile
    #####: 1253:        state -> embargoTokens[choice1]++;
        -: 1254:
        -: 1255:        //trash card
    #####: 1256:        discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1257:        return 0;
        -: 1258:
        -: 1259:        case outpost:
        -: 1260:        //set outpost flag
    #####: 1261:        state -> outpostPlayed++;
        -: 1262:
        -: 1263:        //discard card
    #####: 1264:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1265:        return 0;
        -: 1266:
        -: 1267:        case salvager:
        -: 1268:        //+1 buy
    #####: 1269:        state -> numBuys++;
        -: 1270:
    #####: 1271:        if (choice1) {
branch  0 never executed
branch  1 never executed
        -: 1272:            //gain coins equal to trashed card
    #####: 1273:          state -> coins = state -> coins + getCost(handCard(choice1, state));
call    0 never executed
call    1 never executed
        -: 1274:            //trash card
    #####: 1275:          discardCard(choice1, currentPlayer, state, 1);
call    0 never executed
        -: 1276:        }
        -: 1277:
        -: 1278:        //discard card
    #####: 1279:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1280:        return 0;
        -: 1281:
        -: 1282:        case sea_hag:
    #####: 1283:        for (i = 0; i < state -> numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1284:          if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####: 1285:            state -> discard[i][state -> discardCount[i]] = state -> deck[i][state -> deckCount[i]--];
    #####: 1286:            state -> deckCount[i]--;
    #####: 1287:            state -> discardCount[i]++;
    #####: 1288:                state -> deck[i][state -> deckCount[i]--] = curse; //Top card now a curse
        -: 1289:              }
        -: 1290:            }
    #####: 1291:            return 0;
        -: 1292:
        -: 1293:            case treasure_map:
        -: 1294:        //search hand for another treasure_map
    #####: 1295:            index = -1;
    #####: 1296:            for (i = 0; i < state -> handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1297:              if (state -> hand[currentPlayer][i] == treasure_map && i != handPos) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1298:                index = i;
    #####: 1299:                break;
        -: 1300:              }
        -: 1301:            }
    #####: 1302:            if (index > -1) {
branch  0 never executed
branch  1 never executed
        -: 1303:            //trash both treasure cards
    #####: 1304:              discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1305:              discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1306:
        -: 1307:            //gain 4 Gold cards
    #####: 1308:              for (i = 0; i < 4; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1309:                gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1310:              }
        -: 1311:
        -: 1312:            //return success
    #####: 1313:              return 1;
        -: 1314:            }
        -: 1315:
        -: 1316:        //no second treasure_map found in hand
    #####: 1317:            return -1;
        -: 1318:          }
        -: 1319:
    #####: 1320:          return -1;
        -: 1321:        }
        -: 1322:
function discardCard called 9 returned 100% blocks executed 78%
        9: 1323:        int discardCard(int handPos, int currentPlayer, struct gameState * state, int trashFlag) {
        -: 1324:
        -: 1325:    //if card is not trashed, added to Played pile 
        9: 1326:          if (trashFlag < 1) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1327:        //add card to played pile
        9: 1328:            state -> playedCards[state -> playedCardCount] = state -> hand[currentPlayer][handPos];
        9: 1329:            state -> playedCardCount++;
        -: 1330:          }
        -: 1331:
        -: 1332:    //set played card to -1
        9: 1333:          state -> hand[currentPlayer][handPos] = -1;
        -: 1334:
        -: 1335:    //remove card from player's hand
        9: 1336:    if (handPos == (state -> handCount[currentPlayer] - 1)) //last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1337:    {
        -: 1338:        //reduce number of cards in hand
    #####: 1339:      state -> handCount[currentPlayer]--;
        9: 1340:    } else if (state -> handCount[currentPlayer] == 1) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1341:    {
        -: 1342:        //reduce number of cards in hand
    #####: 1343:      state -> handCount[currentPlayer]--;
        -: 1344:    } else {
        -: 1345:        //replace discarded card with last card in hand
        9: 1346:      state -> hand[currentPlayer][handPos] = state -> hand[currentPlayer][(state -> handCount[currentPlayer] - 1)];
        -: 1347:        //set last card to -1
        9: 1348:      state -> hand[currentPlayer][state -> handCount[currentPlayer] - 1] = -1;
        -: 1349:        //reduce number of cards in hand
        9: 1350:      state -> handCount[currentPlayer]--;
        -: 1351:    }
        -: 1352:
        9: 1353:    return 0;
        -: 1354:  }
        -: 1355:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1356:  int gainCard(int supplyPos, struct gameState * state, int toFlag, int player) {
        -: 1357:    //Note: supplyPos is enum of choosen card
        -: 1358:
        -: 1359:    //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1360:    if (supplyCount(supplyPos, state) < 1) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1361:      return -1;
        -: 1362:    }
        -: 1363:
        -: 1364:    //added card for [whoseTurn] current player:
        -: 1365:    // toFlag = 0 : add to discard
        -: 1366:    // toFlag = 1 : add to deck
        -: 1367:    // toFlag = 2 : add to hand
        -: 1368:
    #####: 1369:    if (toFlag == 1) {
branch  0 never executed
branch  1 never executed
    #####: 1370:      state -> deck[player][state -> deckCount[player]] = supplyPos;
    #####: 1371:      state -> deckCount[player]++;
    #####: 1372:    } else if (toFlag == 2) {
branch  0 never executed
branch  1 never executed
    #####: 1373:      state -> hand[player][state -> handCount[player]] = supplyPos;
    #####: 1374:      state -> handCount[player]++;
        -: 1375:    } else {
    #####: 1376:      state -> discard[player][state -> discardCount[player]] = supplyPos;
    #####: 1377:      state -> discardCount[player]++;
        -: 1378:    }
        -: 1379:
        -: 1380:    //decrease number in supply pile
    #####: 1381:    state -> supplyCount[supplyPos]--;
        -: 1382:
    #####: 1383:    return 0;
        -: 1384:  }
        -: 1385:
function updateCoins called 3 returned 100% blocks executed 82%
        3: 1386:  int updateCoins(int player, struct gameState * state, int bonus) {
        -: 1387:    int i;
        -: 1388:
        -: 1389:    //reset coin count
        3: 1390:    state -> coins = 0;
        -: 1391:
        -: 1392:    //add coins for each Treasure card in player's hand
       18: 1393:    for (i = 0; i < state -> handCount[player]; i++) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       15: 1394:      if (state -> hand[player][i] == copper) {
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
       10: 1395:        state -> coins += 1;
        5: 1396:      } else if (state -> hand[player][i] == silver) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1397:        state -> coins += 2;
        5: 1398:      } else if (state -> hand[player][i] == gold) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1399:        state -> coins += 3;
        -: 1400:      }
        -: 1401:    }
        -: 1402:
        -: 1403:    //add bonus
        3: 1404:    state -> coins += bonus;
        -: 1405:
        3: 1406:    return 0;
        -: 1407:  }
        -: 1408:
        -: 1409://end of dominion.c
-------------------------Testing: Adventurer-------------------------

Draw 2 treasure cards from deck:
Num of Hand cards increases by 1 (after removing the played card):	PASSED
Total number of cards in draw deck and discard pile decreases by 2
(after discarding the revealed non-treasure cards):	ERROR: 1 is not equal to 2!

Drawn cards in hand should be treasure cards:	ERROR: Drawn card is not a treasure card: 6 1
Test other state variables that shouldn't change:
supplyCount[0]:	PASSED
embargoTokens[0]:	PASSED
supplyCount[1]:	PASSED
embargoTokens[1]:	PASSED
supplyCount[2]:	PASSED
embargoTokens[2]:	PASSED
supplyCount[3]:	PASSED
embargoTokens[3]:	PASSED
supplyCount[4]:	PASSED
embargoTokens[4]:	PASSED
supplyCount[5]:	PASSED
embargoTokens[5]:	PASSED
supplyCount[6]:	PASSED
embargoTokens[6]:	PASSED
supplyCount[7]:	PASSED
embargoTokens[7]:	PASSED
supplyCount[8]:	PASSED
embargoTokens[8]:	PASSED
supplyCount[9]:	PASSED
embargoTokens[9]:	PASSED
supplyCount[10]:	PASSED
embargoTokens[10]:	PASSED
supplyCount[11]:	PASSED
embargoTokens[11]:	PASSED
supplyCount[12]:	PASSED
embargoTokens[12]:	PASSED
supplyCount[13]:	PASSED
embargoTokens[13]:	PASSED
supplyCount[14]:	PASSED
embargoTokens[14]:	PASSED
supplyCount[15]:	PASSED
embargoTokens[15]:	PASSED
supplyCount[16]:	PASSED
embargoTokens[16]:	PASSED
supplyCount[17]:	PASSED
embargoTokens[17]:	PASSED
supplyCount[18]:	PASSED
embargoTokens[18]:	PASSED
supplyCount[19]:	PASSED
embargoTokens[19]:	PASSED
supplyCount[20]:	PASSED
embargoTokens[20]:	PASSED
supplyCount[21]:	PASSED
embargoTokens[21]:	PASSED
supplyCount[22]:	PASSED
embargoTokens[22]:	PASSED
supplyCount[23]:	PASSED
embargoTokens[23]:	PASSED
supplyCount[24]:	PASSED
embargoTokens[24]:	PASSED
supplyCount[25]:	PASSED
embargoTokens[25]:	PASSED
supplyCount[26]:	PASSED
embargoTokens[26]:	PASSED
numActions:	PASSED
numBuys:	PASSED
Other player #1: 
handCount:	PASSED
deckCount:	PASSED
discardCount:	PASSED

Draw 2 treasure cards from deck:
Num of Hand cards increases by 1 (after removing the played card):	ERROR: 3 is not equal to 1!

Total number of cards in draw deck and discard pile decreases by 2
(after discarding the revealed non-treasure cards):	ERROR: 4 is not equal to 2!

Drawn cards in hand should be treasure cards:	ERROR: Drawn card is not a treasure card: 10 5
Test other state variables that shouldn't change:
supplyCount[0]:	PASSED
embargoTokens[0]:	PASSED
supplyCount[1]:	PASSED
embargoTokens[1]:	PASSED
supplyCount[2]:	PASSED
embargoTokens[2]:	PASSED
supplyCount[3]:	PASSED
embargoTokens[3]:	PASSED
supplyCount[4]:	PASSED
embargoTokens[4]:	PASSED
supplyCount[5]:	PASSED
embargoTokens[5]:	PASSED
supplyCount[6]:	PASSED
embargoTokens[6]:	PASSED
supplyCount[7]:	PASSED
embargoTokens[7]:	PASSED
supplyCount[8]:	PASSED
embargoTokens[8]:	PASSED
supplyCount[9]:	PASSED
embargoTokens[9]:	PASSED
supplyCount[10]:	PASSED
embargoTokens[10]:	PASSED
supplyCount[11]:	PASSED
embargoTokens[11]:	PASSED
supplyCount[12]:	PASSED
embargoTokens[12]:	PASSED
supplyCount[13]:	PASSED
embargoTokens[13]:	PASSED
supplyCount[14]:	PASSED
embargoTokens[14]:	PASSED
supplyCount[15]:	PASSED
embargoTokens[15]:	PASSED
supplyCount[16]:	PASSED
embargoTokens[16]:	PASSED
supplyCount[17]:	PASSED
embargoTokens[17]:	PASSED
supplyCount[18]:	PASSED
embargoTokens[18]:	PASSED
supplyCount[19]:	PASSED
embargoTokens[19]:	PASSED
supplyCount[20]:	PASSED
embargoTokens[20]:	PASSED
supplyCount[21]:	PASSED
embargoTokens[21]:	PASSED
supplyCount[22]:	PASSED
embargoTokens[22]:	PASSED
supplyCount[23]:	PASSED
embargoTokens[23]:	PASSED
supplyCount[24]:	PASSED
embargoTokens[24]:	PASSED
supplyCount[25]:	PASSED
embargoTokens[25]:	PASSED
supplyCount[26]:	PASSED
embargoTokens[26]:	PASSED
numActions:	PASSED
numBuys:	PASSED
Other player #1: 
handCount:	PASSED
deckCount:	PASSED
discardCount:	PASSED

Draw 1 treasure card(s) from deck and discard pile:
Num of Hand cards increases by 0 (after removing the played card):	ERROR: 2 is not equal to 0!

Total number of cards in draw deck and discard pile decreases by 1
(after discarding the revealed non-treasure cards):	ERROR: 3 is not equal to 1!

Drawn card in hand should be a treasure card:	PASSED
Test other state variables that shouldn't change:
supplyCount[0]:	PASSED
embargoTokens[0]:	PASSED
supplyCount[1]:	PASSED
embargoTokens[1]:	PASSED
supplyCount[2]:	PASSED
embargoTokens[2]:	PASSED
supplyCount[3]:	PASSED
embargoTokens[3]:	PASSED
supplyCount[4]:	PASSED
embargoTokens[4]:	PASSED
supplyCount[5]:	PASSED
embargoTokens[5]:	PASSED
supplyCount[6]:	PASSED
embargoTokens[6]:	PASSED
supplyCount[7]:	PASSED
embargoTokens[7]:	PASSED
supplyCount[8]:	PASSED
embargoTokens[8]:	PASSED
supplyCount[9]:	PASSED
embargoTokens[9]:	PASSED
supplyCount[10]:	PASSED
embargoTokens[10]:	PASSED
supplyCount[11]:	PASSED
embargoTokens[11]:	PASSED
supplyCount[12]:	PASSED
embargoTokens[12]:	PASSED
supplyCount[13]:	PASSED
embargoTokens[13]:	PASSED
supplyCount[14]:	PASSED
embargoTokens[14]:	PASSED
supplyCount[15]:	PASSED
embargoTokens[15]:	PASSED
supplyCount[16]:	PASSED
embargoTokens[16]:	PASSED
supplyCount[17]:	PASSED
embargoTokens[17]:	PASSED
supplyCount[18]:	PASSED
embargoTokens[18]:	PASSED
supplyCount[19]:	PASSED
embargoTokens[19]:	PASSED
supplyCount[20]:	PASSED
embargoTokens[20]:	PASSED
supplyCount[21]:	PASSED
embargoTokens[21]:	PASSED
supplyCount[22]:	PASSED
embargoTokens[22]:	PASSED
supplyCount[23]:	PASSED
embargoTokens[23]:	PASSED
supplyCount[24]:	PASSED
embargoTokens[24]:	PASSED
supplyCount[25]:	PASSED
embargoTokens[25]:	PASSED
supplyCount[26]:	PASSED
embargoTokens[26]:	PASSED
numActions:	PASSED
numBuys:	PASSED
Other player #1: 
handCount:	PASSED
deckCount:	PASSED
discardCount:	PASSED

Draw 2 treasure cards from deck:
Num of Hand cards increases by 1 (after removing the played card):	PASSED
Total number of cards in draw deck and discard pile decreases by 2
(after discarding the revealed non-treasure cards):	ERROR: 1 is not equal to 2!

Drawn cards in hand should be treasure cards:	PASSED
Test other state variables that shouldn't change:
supplyCount[0]:	PASSED
embargoTokens[0]:	PASSED
supplyCount[1]:	PASSED
embargoTokens[1]:	PASSED
supplyCount[2]:	PASSED
embargoTokens[2]:	PASSED
supplyCount[3]:	PASSED
embargoTokens[3]:	PASSED
supplyCount[4]:	PASSED
embargoTokens[4]:	PASSED
supplyCount[5]:	PASSED
embargoTokens[5]:	PASSED
supplyCount[6]:	PASSED
embargoTokens[6]:	PASSED
supplyCount[7]:	PASSED
embargoTokens[7]:	PASSED
supplyCount[8]:	PASSED
embargoTokens[8]:	PASSED
supplyCount[9]:	PASSED
embargoTokens[9]:	PASSED
supplyCount[10]:	PASSED
embargoTokens[10]:	PASSED
supplyCount[11]:	PASSED
embargoTokens[11]:	PASSED
supplyCount[12]:	PASSED
embargoTokens[12]:	PASSED
supplyCount[13]:	PASSED
embargoTokens[13]:	PASSED
supplyCount[14]:	PASSED
embargoTokens[14]:	PASSED
supplyCount[15]:	PASSED
embargoTokens[15]:	PASSED
supplyCount[16]:	PASSED
embargoTokens[16]:	PASSED
supplyCount[17]:	PASSED
embargoTokens[17]:	PASSED
supplyCount[18]:	PASSED
embargoTokens[18]:	PASSED
supplyCount[19]:	PASSED
embargoTokens[19]:	PASSED
supplyCount[20]:	PASSED
embargoTokens[20]:	PASSED
supplyCount[21]:	PASSED
embargoTokens[21]:	PASSED
supplyCount[22]:	PASSED
embargoTokens[22]:	PASSED
supplyCount[23]:	PASSED
embargoTokens[23]:	PASSED
supplyCount[24]:	PASSED
embargoTokens[24]:	PASSED
supplyCount[25]:	PASSED
embargoTokens[25]:	PASSED
supplyCount[26]:	PASSED
embargoTokens[26]:	PASSED
numActions:	PASSED
numBuys:	PASSED
Other player #1: 
handCount:	PASSED
deckCount:	PASSED
discardCount:	PASSED
Other player #2: 
handCount:	PASSED
deckCount:	PASSED
discardCount:	PASSED

Draw 2 treasure cards from deck:
Num of Hand cards increases by 1 (after removing the played card):	ERROR: 3 is not equal to 1!

Total number of cards in draw deck and discard pile decreases by 2
(after discarding the revealed non-treasure cards):	ERROR: 4 is not equal to 2!

Drawn cards in hand should be treasure cards:	ERROR: Drawn card is not a treasure card: 10 5
Test other state variables that shouldn't change:
supplyCount[0]:	PASSED
embargoTokens[0]:	PASSED
supplyCount[1]:	PASSED
embargoTokens[1]:	PASSED
supplyCount[2]:	PASSED
embargoTokens[2]:	PASSED
supplyCount[3]:	PASSED
embargoTokens[3]:	PASSED
supplyCount[4]:	PASSED
embargoTokens[4]:	PASSED
supplyCount[5]:	PASSED
embargoTokens[5]:	PASSED
supplyCount[6]:	PASSED
embargoTokens[6]:	PASSED
supplyCount[7]:	PASSED
embargoTokens[7]:	PASSED
supplyCount[8]:	PASSED
embargoTokens[8]:	PASSED
supplyCount[9]:	PASSED
embargoTokens[9]:	PASSED
supplyCount[10]:	PASSED
embargoTokens[10]:	PASSED
supplyCount[11]:	PASSED
embargoTokens[11]:	PASSED
supplyCount[12]:	PASSED
embargoTokens[12]:	PASSED
supplyCount[13]:	PASSED
embargoTokens[13]:	PASSED
supplyCount[14]:	PASSED
embargoTokens[14]:	PASSED
supplyCount[15]:	PASSED
embargoTokens[15]:	PASSED
supplyCount[16]:	PASSED
embargoTokens[16]:	PASSED
supplyCount[17]:	PASSED
embargoTokens[17]:	PASSED
supplyCount[18]:	PASSED
embargoTokens[18]:	PASSED
supplyCount[19]:	PASSED
embargoTokens[19]:	PASSED
supplyCount[20]:	PASSED
embargoTokens[20]:	PASSED
supplyCount[21]:	PASSED
embargoTokens[21]:	PASSED
supplyCount[22]:	PASSED
embargoTokens[22]:	PASSED
supplyCount[23]:	PASSED
embargoTokens[23]:	PASSED
supplyCount[24]:	PASSED
embargoTokens[24]:	PASSED
supplyCount[25]:	PASSED
embargoTokens[25]:	PASSED
supplyCount[26]:	PASSED
embargoTokens[26]:	PASSED
numActions:	PASSED
numBuys:	PASSED
Other player #1: 
handCount:	PASSED
deckCount:	PASSED
discardCount:	PASSED
Other player #2: 
handCount:	PASSED
deckCount:	PASSED
discardCount:	PASSED

Draw 1 treasure card(s) from deck and discard pile:
Num of Hand cards increases by 0 (after removing the played card):	ERROR: 2 is not equal to 0!

Total number of cards in draw deck and discard pile decreases by 1
(after discarding the revealed non-treasure cards):	ERROR: 3 is not equal to 1!

Drawn card in hand should be a treasure card:	PASSED
Test other state variables that shouldn't change:
supplyCount[0]:	PASSED
embargoTokens[0]:	PASSED
supplyCount[1]:	PASSED
embargoTokens[1]:	PASSED
supplyCount[2]:	PASSED
embargoTokens[2]:	PASSED
supplyCount[3]:	PASSED
embargoTokens[3]:	PASSED
supplyCount[4]:	PASSED
embargoTokens[4]:	PASSED
supplyCount[5]:	PASSED
embargoTokens[5]:	PASSED
supplyCount[6]:	PASSED
embargoTokens[6]:	PASSED
supplyCount[7]:	PASSED
embargoTokens[7]:	PASSED
supplyCount[8]:	PASSED
embargoTokens[8]:	PASSED
supplyCount[9]:	PASSED
embargoTokens[9]:	PASSED
supplyCount[10]:	PASSED
embargoTokens[10]:	PASSED
supplyCount[11]:	PASSED
embargoTokens[11]:	PASSED
supplyCount[12]:	PASSED
embargoTokens[12]:	PASSED
supplyCount[13]:	PASSED
embargoTokens[13]:	PASSED
supplyCount[14]:	PASSED
embargoTokens[14]:	PASSED
supplyCount[15]:	PASSED
embargoTokens[15]:	PASSED
supplyCount[16]:	PASSED
embargoTokens[16]:	PASSED
supplyCount[17]:	PASSED
embargoTokens[17]:	PASSED
supplyCount[18]:	PASSED
embargoTokens[18]:	PASSED
supplyCount[19]:	PASSED
embargoTokens[19]:	PASSED
supplyCount[20]:	PASSED
embargoTokens[20]:	PASSED
supplyCount[21]:	PASSED
embargoTokens[21]:	PASSED
supplyCount[22]:	PASSED
embargoTokens[22]:	PASSED
supplyCount[23]:	PASSED
embargoTokens[23]:	PASSED
supplyCount[24]:	PASSED
embargoTokens[24]:	PASSED
supplyCount[25]:	PASSED
embargoTokens[25]:	PASSED
supplyCount[26]:	PASSED
embargoTokens[26]:	PASSED
numActions:	PASSED
numBuys:	PASSED
Other player #1: 
handCount:	PASSED
deckCount:	PASSED
discardCount:	PASSED
Other player #2: 
handCount:	PASSED
deckCount:	PASSED
discardCount:	PASSED

Draw 2 treasure cards from deck:
Num of Hand cards increases by 1 (after removing the played card):	PASSED
Total number of cards in draw deck and discard pile decreases by 2
(after discarding the revealed non-treasure cards):	ERROR: 1 is not equal to 2!

Drawn cards in hand should be treasure cards:	ERROR: Drawn card is not a treasure card: 6 1
Test other state variables that shouldn't change:
supplyCount[0]:	PASSED
embargoTokens[0]:	PASSED
supplyCount[1]:	PASSED
embargoTokens[1]:	PASSED
supplyCount[2]:	PASSED
embargoTokens[2]:	PASSED
supplyCount[3]:	PASSED
embargoTokens[3]:	PASSED
supplyCount[4]:	PASSED
embargoTokens[4]:	PASSED
supplyCount[5]:	PASSED
embargoTokens[5]:	PASSED
supplyCount[6]:	PASSED
embargoTokens[6]:	PASSED
supplyCount[7]:	PASSED
embargoTokens[7]:	PASSED
supplyCount[8]:	PASSED
embargoTokens[8]:	PASSED
supplyCount[9]:	PASSED
embargoTokens[9]:	PASSED
supplyCount[10]:	PASSED
embargoTokens[10]:	PASSED
supplyCount[11]:	PASSED
embargoTokens[11]:	PASSED
supplyCount[12]:	PASSED
embargoTokens[12]:	PASSED
supplyCount[13]:	PASSED
embargoTokens[13]:	PASSED
supplyCount[14]:	PASSED
embargoTokens[14]:	PASSED
supplyCount[15]:	PASSED
embargoTokens[15]:	PASSED
supplyCount[16]:	PASSED
embargoTokens[16]:	PASSED
supplyCount[17]:	PASSED
embargoTokens[17]:	PASSED
supplyCount[18]:	PASSED
embargoTokens[18]:	PASSED
supplyCount[19]:	PASSED
embargoTokens[19]:	PASSED
supplyCount[20]:	PASSED
embargoTokens[20]:	PASSED
supplyCount[21]:	PASSED
embargoTokens[21]:	PASSED
supplyCount[22]:	PASSED
embargoTokens[22]:	PASSED
supplyCount[23]:	PASSED
embargoTokens[23]:	PASSED
supplyCount[24]:	PASSED
embargoTokens[24]:	PASSED
supplyCount[25]:	PASSED
embargoTokens[25]:	PASSED
supplyCount[26]:	PASSED
embargoTokens[26]:	PASSED
numActions:	PASSED
numBuys:	PASSED
Other player #1: 
handCount:	PASSED
deckCount:	PASSED
discardCount:	PASSED
Other player #2: 
handCount:	PASSED
deckCount:	PASSED
discardCount:	PASSED
Other player #3: 
handCount:	PASSED
deckCount:	PASSED
discardCount:	PASSED

Draw 2 treasure cards from deck:
Num of Hand cards increases by 1 (after removing the played card):	ERROR: 3 is not equal to 1!

Total number of cards in draw deck and discard pile decreases by 2
(after discarding the revealed non-treasure cards):	ERROR: 4 is not equal to 2!

Drawn cards in hand should be treasure cards:	ERROR: Drawn card is not a treasure card: 10 5
Test other state variables that shouldn't change:
supplyCount[0]:	PASSED
embargoTokens[0]:	PASSED
supplyCount[1]:	PASSED
embargoTokens[1]:	PASSED
supplyCount[2]:	PASSED
embargoTokens[2]:	PASSED
supplyCount[3]:	PASSED
embargoTokens[3]:	PASSED
supplyCount[4]:	PASSED
embargoTokens[4]:	PASSED
supplyCount[5]:	PASSED
embargoTokens[5]:	PASSED
supplyCount[6]:	PASSED
embargoTokens[6]:	PASSED
supplyCount[7]:	PASSED
embargoTokens[7]:	PASSED
supplyCount[8]:	PASSED
embargoTokens[8]:	PASSED
supplyCount[9]:	PASSED
embargoTokens[9]:	PASSED
supplyCount[10]:	PASSED
embargoTokens[10]:	PASSED
supplyCount[11]:	PASSED
embargoTokens[11]:	PASSED
supplyCount[12]:	PASSED
embargoTokens[12]:	PASSED
supplyCount[13]:	PASSED
embargoTokens[13]:	PASSED
supplyCount[14]:	PASSED
embargoTokens[14]:	PASSED
supplyCount[15]:	PASSED
embargoTokens[15]:	PASSED
supplyCount[16]:	PASSED
embargoTokens[16]:	PASSED
supplyCount[17]:	PASSED
embargoTokens[17]:	PASSED
supplyCount[18]:	PASSED
embargoTokens[18]:	PASSED
supplyCount[19]:	PASSED
embargoTokens[19]:	PASSED
supplyCount[20]:	PASSED
embargoTokens[20]:	PASSED
supplyCount[21]:	PASSED
embargoTokens[21]:	PASSED
supplyCount[22]:	PASSED
embargoTokens[22]:	PASSED
supplyCount[23]:	PASSED
embargoTokens[23]:	PASSED
supplyCount[24]:	PASSED
embargoTokens[24]:	PASSED
supplyCount[25]:	PASSED
embargoTokens[25]:	PASSED
supplyCount[26]:	PASSED
embargoTokens[26]:	PASSED
numActions:	PASSED
numBuys:	PASSED
Other player #1: 
handCount:	PASSED
deckCount:	PASSED
discardCount:	PASSED
Other player #2: 
handCount:	PASSED
deckCount:	PASSED
discardCount:	PASSED
Other player #3: 
handCount:	PASSED
deckCount:	PASSED
discardCount:	PASSED

Draw 1 treasure card(s) from deck and discard pile:
Num of Hand cards increases by 0 (after removing the played card):	ERROR: 2 is not equal to 0!

Total number of cards in draw deck and discard pile decreases by 1
(after discarding the revealed non-treasure cards):	ERROR: 3 is not equal to 1!

Drawn card in hand should be a treasure card:	PASSED
Test other state variables that shouldn't change:
supplyCount[0]:	PASSED
embargoTokens[0]:	PASSED
supplyCount[1]:	PASSED
embargoTokens[1]:	PASSED
supplyCount[2]:	PASSED
embargoTokens[2]:	PASSED
supplyCount[3]:	PASSED
embargoTokens[3]:	PASSED
supplyCount[4]:	PASSED
embargoTokens[4]:	PASSED
supplyCount[5]:	PASSED
embargoTokens[5]:	PASSED
supplyCount[6]:	PASSED
embargoTokens[6]:	PASSED
supplyCount[7]:	PASSED
embargoTokens[7]:	PASSED
supplyCount[8]:	PASSED
embargoTokens[8]:	PASSED
supplyCount[9]:	PASSED
embargoTokens[9]:	PASSED
supplyCount[10]:	PASSED
embargoTokens[10]:	PASSED
supplyCount[11]:	PASSED
embargoTokens[11]:	PASSED
supplyCount[12]:	PASSED
embargoTokens[12]:	PASSED
supplyCount[13]:	PASSED
embargoTokens[13]:	PASSED
supplyCount[14]:	PASSED
embargoTokens[14]:	PASSED
supplyCount[15]:	PASSED
embargoTokens[15]:	PASSED
supplyCount[16]:	PASSED
embargoTokens[16]:	PASSED
supplyCount[17]:	PASSED
embargoTokens[17]:	PASSED
supplyCount[18]:	PASSED
embargoTokens[18]:	PASSED
supplyCount[19]:	PASSED
embargoTokens[19]:	PASSED
supplyCount[20]:	PASSED
embargoTokens[20]:	PASSED
supplyCount[21]:	PASSED
embargoTokens[21]:	PASSED
supplyCount[22]:	PASSED
embargoTokens[22]:	PASSED
supplyCount[23]:	PASSED
embargoTokens[23]:	PASSED
supplyCount[24]:	PASSED
embargoTokens[24]:	PASSED
supplyCount[25]:	PASSED
embargoTokens[25]:	PASSED
supplyCount[26]:	PASSED
embargoTokens[26]:	PASSED
numActions:	PASSED
numBuys:	PASSED
Other player #1: 
handCount:	PASSED
deckCount:	PASSED
discardCount:	PASSED
Other player #2: 
handCount:	PASSED
deckCount:	PASSED
discardCount:	PASSED
Other player #3: 
handCount:	PASSED
deckCount:	PASSED
discardCount:	PASSED

Total Number of Failures: 20

Function 'updateCoins'
Lines executed:81.82% of 11
Branches executed:100.00% of 8
Taken at least once:75.00% of 8
No calls

Function 'gainCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 1

Function 'discardCard'
Lines executed:84.62% of 13
Branches executed:100.00% of 6
Taken at least once:50.00% of 6
No calls

Function 'cardEffect'
Lines executed:3.88% of 206
Branches executed:12.85% of 179
Taken at least once:1.68% of 179
Calls executed:5.17% of 58

Function 'smithy_card'
Lines executed:100.00% of 6
Branches executed:100.00% of 2
Taken at least once:100.00% of 2
Calls executed:100.00% of 3

Function 'adventurer_card'
Lines executed:66.67% of 18
Branches executed:100.00% of 12
Taken at least once:58.33% of 12
Calls executed:66.67% of 3

Function 'council_room_card'
Lines executed:0.00% of 9
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 4

Function 'village_card'
Lines executed:0.00% of 6
No branches
Calls executed:0.00% of 3

Function 'great_hall_card'
Lines executed:0.00% of 6
No branches
Calls executed:0.00% of 3

Function 'getCost'
Lines executed:0.00% of 30
Branches executed:0.00% of 28
Taken at least once:0.00% of 28
No calls

Function 'drawCard'
Lines executed:100.00% of 22
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
Calls executed:100.00% of 1

Function 'getWinners'
Lines executed:0.00% of 24
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
Calls executed:0.00% of 2

Function 'scoreFor'
Lines executed:0.00% of 42
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
Calls executed:0.00% of 3

Function 'isGameOver'
Lines executed:0.00% of 10
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'endTurn'
Lines executed:0.00% of 20
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'whoseTurn'
Lines executed:100.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 9
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'supplyCount'
Lines executed:0.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 3
No branches
Calls executed:0.00% of 1

Function 'numHandCards'
Lines executed:0.00% of 2
No branches
Calls executed:0.00% of 1

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 4

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
Calls executed:0.00% of 3

Function 'shuffle'
Lines executed:100.00% of 16
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
Calls executed:100.00% of 2

Function 'initializeGame'
Lines executed:95.16% of 62
Branches executed:100.00% of 46
Taken at least once:91.30% of 46
Calls executed:100.00% of 5

Function 'kingdomCards'
Lines executed:0.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:0.00% of 3
No branches
No calls

Function 'compare'
Lines executed:83.33% of 6
Branches executed:100.00% of 4
Taken at least once:75.00% of 4
No calls

File 'dominion.c'
Lines executed:25.82% of 581
Branches executed:27.58% of 417
Taken at least once:19.18% of 417
Calls executed:16.00% of 100
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h> 
        -:    5:#include <math.h> 
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 138 returned 100% blocks executed 83%
      138:    8:int compare(const void * a,
        -:    9:  const void * b) {
      138:   10:  if ( * (int * ) a > * (int * ) b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   11:    return 1;
      138:   12:  if ( * (int * ) a < * (int * ) b)
branch  0 taken 28% (fallthrough)
branch  1 taken 72%
       39:   13:    return -1;
       99:   14:  return 0;
        -:   15:}
        -:   16:
function newGame called 0 returned 0% blocks executed 0%
    #####:   17:struct gameState * newGame() {
    #####:   18:  struct gameState * g = malloc(sizeof(struct gameState));
    #####:   19:  return g;
        -:   20:}
        -:   21:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   22:int * kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   23:  int k8, int k9, int k10) {
    #####:   24:  int * k = malloc(10 * sizeof(int));
    #####:   25:  k[0] = k1;
    #####:   26:  k[1] = k2;
    #####:   27:  k[2] = k3;
    #####:   28:  k[3] = k4;
    #####:   29:  k[4] = k5;
    #####:   30:  k[5] = k6;
    #####:   31:  k[6] = k7;
    #####:   32:  k[7] = k8;
    #####:   33:  k[8] = k9;
    #####:   34:  k[9] = k10;
    #####:   35:  return k;
        -:   36:}
        -:   37:
function initializeGame called 3 returned 100% blocks executed 95%
        3:   38:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   39:  struct gameState * state) {
        -:   40:
        -:   41:  int i;
        -:   42:  int j;
        -:   43:  int it;
        -:   44:    //set up random number generator
        3:   45:  SelectStream(1);
call    0 returned 100%
        3:   46:  PutSeed((long) randomSeed);
call    0 returned 100%
        -:   47:
        -:   48:    //check number of players
        3:   49:  if (numPlayers > MAX_PLAYERS || numPlayers < 2) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:   50:    return -1;
        -:   51:  }
        -:   52:
        -:   53:    //set number of players
        3:   54:  state -> numPlayers = numPlayers;
        -:   55:
        -:   56:    //check selected kingdom cards are different
       33:   57:  for (i = 0; i < 10; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      330:   58:    for (j = 0; j < 10; j++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      300:   59:      if (j != i && kingdomCards[j] == kingdomCards[i]) {
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:   60:        return -1;
        -:   61:      }
        -:   62:    }
        -:   63:  }
        -:   64:
        -:   65:    //initialize supply
        -:   66:    ///////////////////////////////
        -:   67:
        -:   68:    //set number of Curse cards
        3:   69:  if (numPlayers == 2) {
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        1:   70:    state -> supplyCount[curse] = 10;
        2:   71:  } else if (numPlayers == 3) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        1:   72:    state -> supplyCount[curse] = 20;
        -:   73:  } else {
        1:   74:    state -> supplyCount[curse] = 30;
        -:   75:  }
        -:   76:
        -:   77:    //set number of Victory cards
        3:   78:  if (numPlayers == 2) {
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        1:   79:    state -> supplyCount[estate] = 8;
        1:   80:    state -> supplyCount[duchy] = 8;
        1:   81:    state -> supplyCount[province] = 8;
        -:   82:  } else {
        2:   83:    state -> supplyCount[estate] = 12;
        2:   84:    state -> supplyCount[duchy] = 12;
        2:   85:    state -> supplyCount[province] = 12;
        -:   86:  }
        -:   87:
        -:   88:    //set number of Treasure cards
        3:   89:  state -> supplyCount[copper] = 60 - (7 * numPlayers);
        3:   90:  state -> supplyCount[silver] = 40;
        3:   91:  state -> supplyCount[gold] = 30;
        -:   92:
        -:   93:    //set number of Kingdom cards
       63:   94:    for (i = adventurer; i <= treasure_map; i++) //loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:   95:    {
      495:   96:        for (j = 0; j < 10; j++) //loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:   97:        {
      465:   98:          if (kingdomCards[j] == i) {
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:   99:                //check if card is a 'Victory' Kingdom card
       30:  100:            if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens) {
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
       12:  101:              if (numPlayers == 2) {
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        2:  102:                state -> supplyCount[i] = 8;
        -:  103:              } else {
        4:  104:                state -> supplyCount[i] = 12;
        -:  105:              }
        -:  106:            } else {
       24:  107:              state -> supplyCount[i] = 10;
        -:  108:            }
       30:  109:            break;
        -:  110:            } else //card is not in the set choosen for the game
        -:  111:            {
      435:  112:              state -> supplyCount[i] = -1;
        -:  113:            }
        -:  114:          }
        -:  115:
        -:  116:        }
        -:  117:
        -:  118:    ////////////////////////
        -:  119:    //supply intilization complete
        -:  120:
        -:  121:    //set player decks
       12:  122:        for (i = 0; i < numPlayers; i++) {
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        9:  123:          state -> deckCount[i] = 0;
       36:  124:          for (j = 0; j < 3; j++) {
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
       27:  125:            state -> deck[i][j] = estate;
       27:  126:            state -> deckCount[i]++;
        -:  127:          }
       72:  128:          for (j = 3; j < 10; j++) {
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
       63:  129:            state -> deck[i][j] = copper;
       63:  130:            state -> deckCount[i]++;
        -:  131:          }
        -:  132:        }
        -:  133:
        -:  134:    //shuffle player decks
       12:  135:        for (i = 0; i < numPlayers; i++) {
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        9:  136:          if (shuffle(i, state) < 0) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  137:            return -1;
        -:  138:          }
        -:  139:        }
        -:  140:
        -:  141:    //draw player hands
       12:  142:        for (i = 0; i < numPlayers; i++) {
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  143:        //initialize hand size to zero
        9:  144:          state -> handCount[i] = 0;
        9:  145:          state -> discardCount[i] = 0;
        -:  146:        //draw 5 cards
        -:  147:        // for (j = 0; j < 5; j++)
        -:  148:        //  {
        -:  149:        //    drawCard(i, state);
        -:  150:        //  }
        -:  151:        }
        -:  152:
        -:  153:    //set embargo tokens to 0 for all supply piles
       84:  154:        for (i = 0; i <= treasure_map; i++) {
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
       81:  155:          state -> embargoTokens[i] = 0;
        -:  156:        }
        -:  157:
        -:  158:    //initialize first player's turn
        3:  159:        state -> outpostPlayed = 0;
        3:  160:        state -> phase = 0;
        3:  161:        state -> numActions = 1;
        3:  162:        state -> numBuys = 1;
        3:  163:        state -> playedCardCount = 0;
        3:  164:        state -> whoseTurn = 0;
        3:  165:        state -> handCount[state -> whoseTurn] = 0;
        -:  166:    //int it; move to top
        -:  167:
        -:  168:    //Moved draw cards to here, only drawing at the start of a turn
       18:  169:        for (it = 0; it < 5; it++) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       15:  170:          drawCard(state -> whoseTurn, state);
call    0 returned 100%
        -:  171:        }
        -:  172:
        3:  173:        updateCoins(state -> whoseTurn, state, 0);
call    0 returned 100%
        -:  174:
        3:  175:        return 0;
        -:  176:      }
        -:  177:
function shuffle called 15 returned 100% blocks executed 100%
       15:  178:      int shuffle(int player, struct gameState * state) {
        -:  179:
        -:  180:        int newDeck[MAX_DECK];
       15:  181:        int newDeckPos = 0;
        -:  182:        int card;
        -:  183:        int i;
        -:  184:
       15:  185:        if (state -> deckCount[player] < 1)
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        3:  186:          return -1;
       12:  187:        qsort((void * )(state -> deck[player]), state -> deckCount[player], sizeof(int), compare);
call    0 returned 100%
        -:  188:    /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  189:
      120:  190:        while (state -> deckCount[player] > 0) {
branch  0 taken 89%
branch  1 taken 11% (fallthrough)
       96:  191:          card = floor(Random() * state -> deckCount[player]);
call    0 returned 100%
       96:  192:          newDeck[newDeckPos] = state -> deck[player][card];
       96:  193:          newDeckPos++;
      289:  194:          for (i = card; i < state -> deckCount[player] - 1; i++) {
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
      193:  195:            state -> deck[player][i] = state -> deck[player][i + 1];
        -:  196:          }
       96:  197:          state -> deckCount[player]--;
        -:  198:        }
      108:  199:        for (i = 0; i < newDeckPos; i++) {
branch  0 taken 89%
branch  1 taken 11% (fallthrough)
       96:  200:          state -> deck[player][i] = newDeck[i];
       96:  201:          state -> deckCount[player]++;
        -:  202:        }
        -:  203:
       12:  204:        return 0;
        -:  205:      }
        -:  206:
function playCard called 0 returned 0% blocks executed 0%
    #####:  207:      int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState * state) {
        -:  208:        int card;
    #####:  209:    int coin_bonus = 0; //tracks coins gain from actions
        -:  210:
        -:  211:    //check if it is the right phase
    #####:  212:    if (state -> phase != 0) {
branch  0 never executed
branch  1 never executed
    #####:  213:      return -1;
        -:  214:    }
        -:  215:
        -:  216:    //check if player has enough actions
    #####:  217:    if (state -> numActions < 1) {
branch  0 never executed
branch  1 never executed
    #####:  218:      return -1;
        -:  219:    }
        -:  220:
        -:  221:    //get card played
    #####:  222:    card = handCard(handPos, state);
call    0 never executed
        -:  223:
        -:  224:    //check if selected card is an action
    #####:  225:    if (card < adventurer || card > treasure_map) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  226:      return -1;
        -:  227:    }
        -:  228:
        -:  229:    //play card
    #####:  230:    if (cardEffect(card, choice1, choice2, choice3, state, handPos, & coin_bonus) < 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  231:      return -1;
        -:  232:    }
        -:  233:
        -:  234:    //reduce number of actions
    #####:  235:    state -> numActions--;
        -:  236:
        -:  237:    //update coins (Treasure cards may be added with card draws)
    #####:  238:    updateCoins(state -> whoseTurn, state, coin_bonus);
call    0 never executed
        -:  239:
    #####:  240:    return 0;
        -:  241:  }
        -:  242:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  243:  int buyCard(int supplyPos, struct gameState * state) {
        -:  244:    int who;
        -:  245:    if (DEBUG) {
        -:  246:      printf("Entering buyCard...\n");
        -:  247:    }
        -:  248:
        -:  249:    // I don't know what to do about the phase thing.
        -:  250:
    #####:  251:    who = state -> whoseTurn;
        -:  252:
    #####:  253:    if (state -> numBuys < 1) {
branch  0 never executed
branch  1 never executed
        -:  254:      if (DEBUG)
        -:  255:        printf("You do not have any buys left\n");
    #####:  256:      return -1;
    #####:  257:    } else if (supplyCount(supplyPos, state) < 1) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  258:      if (DEBUG)
        -:  259:        printf("There are not any of that type of card left\n");
    #####:  260:      return -1;
    #####:  261:    } else if (state -> coins < getCost(supplyPos)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  262:      if (DEBUG)
        -:  263:        printf("You do not have enough money to buy that. You have %d coins.\n", state -> coins);
    #####:  264:      return -1;
        -:  265:    } else {
    #####:  266:      state -> phase = 1;
        -:  267:        //state->supplyCount[supplyPos]--;
    #####:  268:        gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  269:
    #####:  270:        state -> coins = (state -> coins) - (getCost(supplyPos));
call    0 never executed
    #####:  271:        state -> numBuys--;
        -:  272:        if (DEBUG)
        -:  273:          printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state -> numBuys, state -> coins);
        -:  274:      }
        -:  275:
        -:  276:    //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  277:    //state->discardCount[who]++;
        -:  278:
    #####:  279:      return 0;
        -:  280:    }
        -:  281:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  282:    int numHandCards(struct gameState * state) 
        -:  283:    {
    #####:  284:      return state -> handCount[whoseTurn(state)];
call    0 never executed
        -:  285:    }
        -:  286:
function handCard called 0 returned 0% blocks executed 0%
    #####:  287:    int handCard(int handPos, struct gameState * state) 
        -:  288:    {
    #####:  289:      int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  290:      return state -> hand[currentPlayer][handPos];
        -:  291:    }
        -:  292:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  293:    int supplyCount(int card, struct gameState * state) 
        -:  294:    {
    #####:  295:      return state -> supplyCount[card];
        -:  296:    }
        -:  297:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  298:    int fullDeckCount(int player, int card, struct gameState * state) 
        -:  299:    {
        -:  300:      int i;
    #####:  301:      int count = 0;
        -:  302:
    #####:  303:      for (i = 0; i < state -> deckCount[player]; i++) 
branch  0 never executed
branch  1 never executed
        -:  304:      {
    #####:  305:        if (state -> deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  306:      }
        -:  307:
    #####:  308:      for (i = 0; i < state -> handCount[player]; i++) 
branch  0 never executed
branch  1 never executed
        -:  309:      {
    #####:  310:        if (state -> hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  311:      }
        -:  312:
    #####:  313:      for (i = 0; i < state -> discardCount[player]; i++) 
branch  0 never executed
branch  1 never executed
        -:  314:      {
    #####:  315:        if (state -> discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  316:      }
        -:  317:
    #####:  318:      return count;
        -:  319:    }
        -:  320:
function whoseTurn called 18 returned 100% blocks executed 100%
       18:  321:    int whoseTurn(struct gameState * state) 
        -:  322:    {
       18:  323:      return state -> whoseTurn;
        -:  324:    }
        -:  325:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  326:    int endTurn(struct gameState * state) 
        -:  327:    {
        -:  328:      int k;
        -:  329:      int i;
    #####:  330:      int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  331:
        -:  332:    //Discard hand
    #####:  333:      for (i = 0; i < state -> handCount[currentPlayer]; i++) 
branch  0 never executed
branch  1 never executed
        -:  334:      {
    #####:  335:        state -> discard[currentPlayer][state -> discardCount[currentPlayer]++] = state -> hand[currentPlayer][i]; //Discard
    #####:  336:        state -> hand[currentPlayer][i] = -1; //Set card to -1
        -:  337:      }
    #####:  338:    state -> handCount[currentPlayer] = 0; //Reset hand count
        -:  339:
        -:  340:    //Code for determining the player
    #####:  341:    if (currentPlayer < (state -> numPlayers - 1)) 
branch  0 never executed
branch  1 never executed
        -:  342:    {
    #####:  343:        state -> whoseTurn = currentPlayer + 1; //Still safe to increment
        -:  344:      } 
        -:  345:      else 
        -:  346:      {
    #####:  347:        state -> whoseTurn = 0; //Max player has been reached, loop back around to player 1
        -:  348:      }
        -:  349:
    #####:  350:      state -> outpostPlayed = 0;
    #####:  351:      state -> phase = 0;
    #####:  352:      state -> numActions = 1;
    #####:  353:      state -> coins = 0;
    #####:  354:      state -> numBuys = 1;
    #####:  355:      state -> playedCardCount = 0;
    #####:  356:      state -> handCount[state -> whoseTurn] = 0;
        -:  357:
        -:  358:    //int k; move to top
        -:  359:    //Next player draws hand
    #####:  360:      for (k = 0; k < 5; k++) 
branch  0 never executed
branch  1 never executed
        -:  361:      {
    #####:  362:        drawCard(state -> whoseTurn, state); //Draw a card
call    0 never executed
        -:  363:      }
        -:  364:
        -:  365:    //Update money
    #####:  366:      updateCoins(state -> whoseTurn, state, 0);
call    0 never executed
        -:  367:
    #####:  368:      return 0;
        -:  369:    }
        -:  370:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  371:    int isGameOver(struct gameState * state) 
        -:  372:    {
        -:  373:      int i;
        -:  374:      int j;
        -:  375:
        -:  376:    //if stack of Province cards is empty, the game ends
    #####:  377:      if (state -> supplyCount[province] == 0) 
branch  0 never executed
branch  1 never executed
        -:  378:      {
    #####:  379:        return 1;
        -:  380:      }
        -:  381:
        -:  382:    //if three supply pile are at 0, the game ends
    #####:  383:      j = 0;
    #####:  384:      for (i = 0; i < 25; i++) 
branch  0 never executed
branch  1 never executed
        -:  385:      {
    #####:  386:        if (state -> supplyCount[i] == 0) 
branch  0 never executed
branch  1 never executed
        -:  387:        {
    #####:  388:          j++;
        -:  389:        }
        -:  390:      }
    #####:  391:      if (j >= 3) 
branch  0 never executed
branch  1 never executed
        -:  392:      {
    #####:  393:        return 1;
        -:  394:      }
        -:  395:
    #####:  396:      return 0;
        -:  397:    }
        -:  398:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  399:    int scoreFor(int player, struct gameState * state) 
        -:  400:    {
        -:  401:      int i;
    #####:  402:      int score = 0;
        -:  403:    //score from hand
    #####:  404:      for (i = 0; i < state -> handCount[player]; i++) 
branch  0 never executed
branch  1 never executed
        -:  405:      {
    #####:  406:        if (state -> hand[player][i] == curse) 
branch  0 never executed
branch  1 never executed
        -:  407:        {
    #####:  408:          score = score - 1;
        -:  409:        };
    #####:  410:        if (state -> hand[player][i] == estate) 
branch  0 never executed
branch  1 never executed
        -:  411:        {
    #####:  412:          score = score + 1;
        -:  413:        };
    #####:  414:        if (state -> hand[player][i] == duchy) 
branch  0 never executed
branch  1 never executed
        -:  415:        {
    #####:  416:          score = score + 3;
        -:  417:        };
    #####:  418:        if (state -> hand[player][i] == province) 
branch  0 never executed
branch  1 never executed
        -:  419:        {
    #####:  420:          score = score + 6;
        -:  421:        };
    #####:  422:        if (state -> hand[player][i] == great_hall) 
branch  0 never executed
branch  1 never executed
        -:  423:        {
    #####:  424:          score = score + 1;
        -:  425:        };
    #####:  426:        if (state -> hand[player][i] == gardens) 
branch  0 never executed
branch  1 never executed
        -:  427:        {
    #####:  428:          score = score + (fullDeckCount(player, 0, state) / 10);
call    0 never executed
        -:  429:        };
        -:  430:      }
        -:  431:
        -:  432:    //score from discard
    #####:  433:      for (i = 0; i < state -> discardCount[player]; i++) 
branch  0 never executed
branch  1 never executed
        -:  434:      {
    #####:  435:        if (state -> discard[player][i] == curse) 
branch  0 never executed
branch  1 never executed
        -:  436:        {
    #####:  437:          score = score - 1;
        -:  438:        };
    #####:  439:        if (state -> discard[player][i] == estate) 
branch  0 never executed
branch  1 never executed
        -:  440:        {
    #####:  441:          score = score + 1;
        -:  442:        };
    #####:  443:        if (state -> discard[player][i] == duchy) 
branch  0 never executed
branch  1 never executed
        -:  444:        {
    #####:  445:          score = score + 3;
        -:  446:        };
    #####:  447:        if (state -> discard[player][i] == province) 
branch  0 never executed
branch  1 never executed
        -:  448:        {
    #####:  449:          score = score + 6;
        -:  450:        };
    #####:  451:        if (state -> discard[player][i] == great_hall) 
branch  0 never executed
branch  1 never executed
        -:  452:        {
    #####:  453:          score = score + 1;
        -:  454:        };
    #####:  455:        if (state -> discard[player][i] == gardens) 
branch  0 never executed
branch  1 never executed
        -:  456:        {
    #####:  457:          score = score + (fullDeckCount(player, 0, state) / 10);
call    0 never executed
        -:  458:        };
        -:  459:      }
        -:  460:
        -:  461:    //score from deck
    #####:  462:      for (i = 0; i < state -> discardCount[player]; i++) 
branch  0 never executed
branch  1 never executed
        -:  463:      {
    #####:  464:        if (state -> deck[player][i] == curse) 
branch  0 never executed
branch  1 never executed
        -:  465:        {
    #####:  466:          score = score - 1;
        -:  467:        };
    #####:  468:        if (state -> deck[player][i] == estate) 
branch  0 never executed
branch  1 never executed
        -:  469:        {
    #####:  470:          score = score + 1;
        -:  471:        };
    #####:  472:        if (state -> deck[player][i] == duchy) 
branch  0 never executed
branch  1 never executed
        -:  473:        {
    #####:  474:          score = score + 3;
        -:  475:        };
    #####:  476:        if (state -> deck[player][i] == province) 
branch  0 never executed
branch  1 never executed
        -:  477:        {
    #####:  478:          score = score + 6;
        -:  479:        };
    #####:  480:        if (state -> deck[player][i] == great_hall) 
branch  0 never executed
branch  1 never executed
        -:  481:        {
    #####:  482:          score = score + 1;
        -:  483:        };
    #####:  484:        if (state -> deck[player][i] == gardens) 
branch  0 never executed
branch  1 never executed
        -:  485:        {
    #####:  486:          score = score + (fullDeckCount(player, 0, state) / 10);
call    0 never executed
        -:  487:        };
        -:  488:      }
        -:  489:
    #####:  490:      return score;
        -:  491:    }
        -:  492:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  493:    int getWinners(int players[MAX_PLAYERS], struct gameState * state) 
        -:  494:    {
        -:  495:      int i;
        -:  496:      int j;
        -:  497:      int highScore;
        -:  498:      int currentPlayer;
        -:  499:
        -:  500:    //get score for each player
    #####:  501:      for (i = 0; i < MAX_PLAYERS; i++) 
branch  0 never executed
branch  1 never executed
        -:  502:      {
        -:  503:        //set unused player scores to -9999
    #####:  504:        if (i >= state -> numPlayers) 
branch  0 never executed
branch  1 never executed
        -:  505:        {
    #####:  506:          players[i] = -9999;
        -:  507:        } else {
    #####:  508:          players[i] = scoreFor(i, state);
call    0 never executed
        -:  509:        }
        -:  510:      }
        -:  511:
        -:  512:    //find highest score
    #####:  513:      j = 0;
    #####:  514:      for (i = 0; i < MAX_PLAYERS; i++) 
branch  0 never executed
branch  1 never executed
        -:  515:      {
    #####:  516:        if (players[i] > players[j]) 
branch  0 never executed
branch  1 never executed
        -:  517:        {
    #####:  518:          j = i;
        -:  519:        }
        -:  520:      }
    #####:  521:      highScore = players[j];
        -:  522:
        -:  523:    //add 1 to players who had less turns
    #####:  524:      currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  525:      for (i = 0; i < MAX_PLAYERS; i++) 
branch  0 never executed
branch  1 never executed
        -:  526:      {
    #####:  527:        if (players[i] == highScore && i > currentPlayer) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  528:        {
    #####:  529:          players[i]++;
        -:  530:        }
        -:  531:      }
        -:  532:
        -:  533:    //find new highest score
    #####:  534:      j = 0;
    #####:  535:      for (i = 0; i < MAX_PLAYERS; i++) 
branch  0 never executed
branch  1 never executed
        -:  536:      {
    #####:  537:        if (players[i] > players[j]) 
branch  0 never executed
branch  1 never executed
        -:  538:        {
    #####:  539:          j = i;
        -:  540:        }
        -:  541:      }
    #####:  542:      highScore = players[j];
        -:  543:
        -:  544:    //set winners in array to 1 and rest to 0
    #####:  545:      for (i = 0; i < MAX_PLAYERS; i++) 
branch  0 never executed
branch  1 never executed
        -:  546:      {
    #####:  547:        if (players[i] == highScore) 
branch  0 never executed
branch  1 never executed
        -:  548:        {
    #####:  549:          players[i] = 1;
        -:  550:        } else {
    #####:  551:          players[i] = 0;
        -:  552:        }
        -:  553:      }
        -:  554:
    #####:  555:      return 0;
        -:  556:    }
        -:  557:
function drawCard called 42 returned 100% blocks executed 100%
       42:  558:    int drawCard(int player, struct gameState * state) 
        -:  559:    {
        -:  560:      int count;
        -:  561:      int deckCounter;
       42:  562:    if (state -> deckCount[player] <= 0) { //Deck is empty
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
        -:  563:
        -:  564:        //Step 1 Shuffle the discard pile back into a deck
        -:  565:      int i;
        -:  566:        //Move discard to deck
       12:  567:      for (i = 0; i < state -> discardCount[player]; i++) 
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
        -:  568:      {
        6:  569:        state -> deck[player][i] = state -> discard[player][i];
        6:  570:        state -> discard[player][i] = -1;
        -:  571:      }
        -:  572:
        6:  573:      state -> deckCount[player] = state -> discardCount[player];
        6:  574:        state -> discardCount[player] = 0; //Reset discard
        -:  575:
        -:  576:        //Shufffle the deck
        6:  577:        shuffle(player, state); //Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  578:
        -:  579:        if (DEBUG) 
        -:  580:        { //Debug statements
        -:  581:          printf("Deck count now: %d\n", state -> deckCount[player]);
        -:  582:        }
        -:  583:
        6:  584:        state -> discardCount[player] = 0;
        -:  585:
        -:  586:        //Step 2 Draw Card
        6:  587:        count = state -> handCount[player]; //Get current player's hand count
        -:  588:
        -:  589:        if (DEBUG) 
        -:  590:        { //Debug statements
        -:  591:          printf("Current hand count: %d\n", count);
        -:  592:        }
        -:  593:
        6:  594:        deckCounter = state -> deckCount[player]; //Create a holder for the deck count
        -:  595:
        6:  596:        if (deckCounter == 0)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        3:  597:          return -1;
        -:  598:
        3:  599:        state -> hand[player][count] = state -> deck[player][deckCounter - 1]; //Add card to hand
        3:  600:        state -> deckCount[player]--;
        3:  601:        state -> handCount[player]++; //Increment hand count
        -:  602:      } 
        -:  603:      else 
        -:  604:      {
       36:  605:        int count = state -> handCount[player]; //Get current hand count for player
        -:  606:        int deckCounter;
        -:  607:        if (DEBUG) 
        -:  608:        { //Debug statements
        -:  609:          printf("Current hand count: %d\n", count);
        -:  610:        }
        -:  611:
       36:  612:        deckCounter = state -> deckCount[player]; //Create holder for the deck count
       36:  613:        state -> hand[player][count] = state -> deck[player][deckCounter - 1]; //Add card to the hand
       36:  614:        state -> deckCount[player]--;
       36:  615:        state -> handCount[player]++; //Increment hand count
        -:  616:      }
       39:  617:      return 0;
        -:  618:    }
        -:  619:
function getCost called 0 returned 0% blocks executed 0%
    #####:  620:    int getCost(int cardNumber) 
        -:  621:    {
    #####:  622:      switch (cardNumber) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  623:      {
        -:  624:        case curse:
    #####:  625:        return 0;
        -:  626:        case estate:
    #####:  627:        return 2;
        -:  628:        case duchy:
    #####:  629:        return 5;
        -:  630:        case province:
    #####:  631:        return 8;
        -:  632:        case copper:
    #####:  633:        return 0;
        -:  634:        case silver:
    #####:  635:        return 3;
        -:  636:        case gold:
    #####:  637:        return 6;
        -:  638:        case adventurer:
    #####:  639:        return 6;
        -:  640:        case council_room:
    #####:  641:        return 5;
        -:  642:        case feast:
    #####:  643:        return 4;
        -:  644:        case gardens:
    #####:  645:        return 4;
        -:  646:        case mine:
    #####:  647:        return 5;
        -:  648:        case remodel:
    #####:  649:        return 4;
        -:  650:        case smithy:
    #####:  651:        return 4;
        -:  652:        case village:
    #####:  653:        return 3;
        -:  654:        case baron:
    #####:  655:        return 4;
        -:  656:        case great_hall:
    #####:  657:        return 3;
        -:  658:        case minion:
    #####:  659:        return 5;
        -:  660:        case steward:
    #####:  661:        return 3;
        -:  662:        case tribute:
    #####:  663:        return 5;
        -:  664:        case ambassador:
    #####:  665:        return 3;
        -:  666:        case cutpurse:
    #####:  667:        return 4;
        -:  668:        case embargo:
    #####:  669:        return 2;
        -:  670:        case outpost:
    #####:  671:        return 5;
        -:  672:        case salvager:
    #####:  673:        return 4;
        -:  674:        case sea_hag:
    #####:  675:        return 4;
        -:  676:        case treasure_map:
    #####:  677:        return 4;
        -:  678:      }
        -:  679:
    #####:  680:      return -1;
        -:  681:    }
        -:  682:
        -:  683://A2 Refactor CLEAN CARD | NO BUGS
function great_hall_card called 0 returned 0% blocks executed 0%
    #####:  684:    int great_hall_card(int handPos, struct gameState * state) 
        -:  685:    {
    #####:  686:      int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  687:
    #####:  688:      drawCard(currentPlayer, state);
call    0 never executed
        -:  689:
        -:  690:    // provides another action turn
    #####:  691:      state -> numActions++;
        -:  692:
        -:  693:    // played card to discard pile
    #####:  694:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  695:      return 0;
        -:  696:    }
        -:  697:
        -:  698://A2 Refactor
function village_card called 0 returned 0% blocks executed 0%
    #####:  699:    int village_card(int handPos, struct gameState * state) 
        -:  700:    {
    #####:  701:      int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  702:
    #####:  703:      drawCard(currentPlayer, state);
call    0 never executed
        -:  704:
        -:  705:    //BUG: Should only provide 2 action turns
    #####:  706:      state -> numActions = state -> numActions + 4;
        -:  707:
        -:  708:    // played card to discard pile
    #####:  709:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  710:      return 0;
        -:  711:    }
        -:  712:
        -:  713://A2 Refactor
function council_room_card called 0 returned 0% blocks executed 0%
    #####:  714:    int council_room_card(int handPos, struct gameState * state) 
        -:  715:    {
        -:  716:      int i;
    #####:  717:      int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  718:
        -:  719:    // draw 4 cards
    #####:  720:      for (i = 0; i < 4; i++) {
branch  0 never executed
branch  1 never executed
    #####:  721:        drawCard(currentPlayer, state);
call    0 never executed
        -:  722:      }
        -:  723:
        -:  724:    //BUG: Card provides another buy turn 
        -:  725:    //state->numBuys++;      
        -:  726:
        -:  727:    // all other players draw a card
    #####:  728:      for (i = 0; i < state -> numPlayers; i++) 
branch  0 never executed
branch  1 never executed
        -:  729:      {
    #####:  730:        if (i != currentPlayer) 
branch  0 never executed
branch  1 never executed
        -:  731:        {
    #####:  732:          drawCard(i, state);
call    0 never executed
        -:  733:        }
        -:  734:      }
        -:  735:    // played card to discard pile
    #####:  736:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  737:      return 0;
        -:  738:    }
        -:  739:
        -:  740://A2 Refactor
function adventurer_card called 3 returned 100% blocks executed 81%
        3:  741:    int adventurer_card(struct gameState * state) 
        -:  742:    {
        3:  743:      int z = 0;
        -:  744:      int cardDrawn;
        3:  745:      int drawntreasure = 0;
        3:  746:      int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:  747:      int temphand[MAX_HAND];
        -:  748:
        9:  749:    while (drawntreasure < 2) 
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
        -:  750:    { // when the deck is empty, reshuffle the discard and make it the deck
        3:  751:      if (state -> deckCount[currentPlayer] < 1) 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  752:      {
    #####:  753:        shuffle(currentPlayer, state);
call    0 never executed
        -:  754:      }
        3:  755:      drawCard(currentPlayer, state);
call    0 returned 100%
        -:  756:        // defines the drawn card as the top card
        3:  757:      cardDrawn = state -> hand[currentPlayer][state -> handCount[currentPlayer] - 1];
        3:  758:      if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
        -:  759:        //drawntreasure++;
        -:  760:        //BUG: increments by 4. Should increment by 1
        3:  761:        drawntreasure += 4;
        -:  762:      else 
        -:  763:      {
    #####:  764:        temphand[z] = cardDrawn;
        -:  765:            // removes the most recently drawn (top) card
    #####:  766:        state -> handCount[currentPlayer]--;
    #####:  767:        z++;
        -:  768:      }
        -:  769:    }
        6:  770:    while (z - 1 >= 0) 
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
        -:  771:    {
        -:  772:        // discard all cards in play that have been drawn
    #####:  773:      state -> discard[currentPlayer][state -> discardCount[currentPlayer]++] = temphand[z - 1];
    #####:  774:      z = z - 1;
        -:  775:    }
        3:  776:    return 0;
        -:  777:  }
        -:  778:
        -:  779://A2 Refactor
function smithy_card called 6 returned 100% blocks executed 100%
        6:  780:  int smithy_card(int handPos, struct gameState * state) 
        -:  781:  {
        -:  782:    int i;
        6:  783:    int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:  784:    //BUG: Should only draw 3 cards  
       30:  785:    for (i = 0; i < 4; i++) 
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  786:    {
       24:  787:      drawCard(currentPlayer, state);
call    0 returned 100%
        -:  788:    }
        -:  789:    //discard card from hand
        6:  790:    discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        6:  791:    return 0;
        -:  792:  }
        -:  793:
function cardEffect called 9 returned 100% blocks executed 3%
        9:  794:  int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState * state, int handPos, int * bonus) {
        -:  795:    int i;
        -:  796:    int j;
        -:  797:    int k;
        -:  798:    int x;
        -:  799:    int index;
        9:  800:    int currentPlayer = whoseTurn(state);
call    0 returned 100%
        9:  801:    int nextPlayer = currentPlayer + 1;
        -:  802:
        9:  803:    int tributeRevealedCards[2] = 
        -:  804:    {
        -:  805:      -1, -1
        -:  806:    };
        -:  807:    int temphand[MAX_HAND]; // moved above the if statement
        -:  808:    //int drawntreasure=0; // commented out as part of A2 Refactor
        -:  809:    //int cardDrawn; // commented out as part of A2 Refactor
        -:  810:    //int z = 0;// this is the counter for the temp hand // commented out as part of A2 Refactor
        9:  811:    if (nextPlayer > (state -> numPlayers - 1)) 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  812:    {
    #####:  813:      nextPlayer = 0;
        -:  814:    }
        -:  815:
        -:  816:    //uses switch to select card and perform actions
        9:  817:    switch (card) 
branch  0 taken 33%
branch  1 taken 0%
branch  2 taken 67%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  818:    {
        -:  819:        // A2 Refactor  
        -:  820:      case adventurer:
        3:  821:      return adventurer_card(state);
call    0 returned 100%
        -:  822:
        -:  823:        // A2 Refactor    
        -:  824:      case council_room:
    #####:  825:      return council_room_card(handPos, state);
call    0 never executed
        -:  826:
        -:  827:        // A2 Refactor  
        -:  828:      case smithy:
        6:  829:      return smithy_card(handPos, state);
call    0 returned 100%
        -:  830:
        -:  831:        // A2 Refactor  
        -:  832:      case village:
    #####:  833:      return village_card(handPos, state);
call    0 never executed
        -:  834:
        -:  835:        // A2 Refactor
        -:  836:      case great_hall:
    #####:  837:      return great_hall_card(handPos, state);
call    0 never executed
        -:  838:
        -:  839:      case feast:
        -:  840:        //gain card with cost up to 5
        -:  841:        //Backup hand
    #####:  842:      for (i = 0; i <= state -> handCount[currentPlayer]; i++) 
branch  0 never executed
branch  1 never executed
        -:  843:      {
    #####:  844:            temphand[i] = state -> hand[currentPlayer][i]; //Backup card
    #####:  845:            state -> hand[currentPlayer][i] = -1; //Set to nothing
        -:  846:          }
        -:  847:        //Backup hand
        -:  848:
        -:  849:        //Update Coins for Buy
    #####:  850:          updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  851:        x = 1; //Condition to loop on
    #####:  852:        while (x == 1) 
branch  0 never executed
branch  1 never executed
        -:  853:        { //Buy one card
    #####:  854:          if (supplyCount(choice1, state) <= 0) 
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  855:          {
        -:  856:            if (DEBUG)
        -:  857:              printf("None of that card left, sorry!\n");
        -:  858:
        -:  859:            if (DEBUG) 
        -:  860:            {
        -:  861:              printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  862:            }
        -:  863:          } 
    #####:  864:          else if (state -> coins < getCost(choice1)) 
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  865:          {
    #####:  866:            printf("That card is too expensive!\n");
call    0 never executed
        -:  867:
        -:  868:            if (DEBUG) 
        -:  869:            {
        -:  870:              printf("Coins: %d < %d\n", state -> coins, getCost(choice1));
        -:  871:            }
        -:  872:          } 
        -:  873:          else 
        -:  874:          {
        -:  875:            if (DEBUG) 
        -:  876:            {
        -:  877:              printf("Deck Count: %d\n", state -> handCount[currentPlayer] + state -> deckCount[currentPlayer] + state -> discardCount[currentPlayer]);
        -:  878:            }
        -:  879:
    #####:  880:                gainCard(choice1, state, 0, currentPlayer); //Gain the card
call    0 never executed
    #####:  881:                x = 0; //No more buying cards
        -:  882:
        -:  883:                if (DEBUG) 
        -:  884:                {
        -:  885:                  printf("Deck Count: %d\n", state -> handCount[currentPlayer] + state -> deckCount[currentPlayer] + state -> discardCount[currentPlayer]);
        -:  886:                }
        -:  887:
        -:  888:              }
        -:  889:            }
        -:  890:
        -:  891:        //Reset Hand
    #####:  892:            for (i = 0; i <= state -> handCount[currentPlayer]; i++) 
branch  0 never executed
branch  1 never executed
        -:  893:            {
    #####:  894:              state -> hand[currentPlayer][i] = temphand[i];
    #####:  895:              temphand[i] = -1;
        -:  896:            }
        -:  897:        //Reset Hand
        -:  898:
    #####:  899:            return 0;
        -:  900:
        -:  901:            case gardens:
    #####:  902:            return -1;
        -:  903:
        -:  904:            case mine:
    #####:  905:        j = state -> hand[currentPlayer][choice1]; //store card we will trash
        -:  906:
    #####:  907:        if (state -> hand[currentPlayer][choice1] < copper || state -> hand[currentPlayer][choice1] > gold) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  908:        {
    #####:  909:          return -1;
        -:  910:        }
        -:  911:
    #####:  912:        if (choice2 > treasure_map || choice2 < curse) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  913:        {
    #####:  914:          return -1;
        -:  915:        }
        -:  916:
    #####:  917:        if ((getCost(state -> hand[currentPlayer][choice1]) + 3) > getCost(choice2)) 
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  918:        {
    #####:  919:          return -1;
        -:  920:        }
        -:  921:
    #####:  922:        gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  923:
        -:  924:        //discard card from hand
    #####:  925:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  926:
        -:  927:        //discard trashed card
    #####:  928:        for (i = 0; i < state -> handCount[currentPlayer]; i++) 
branch  0 never executed
branch  1 never executed
        -:  929:        {
    #####:  930:          if (state -> hand[currentPlayer][i] == j) 
branch  0 never executed
branch  1 never executed
        -:  931:          {
    #####:  932:            discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  933:            break;
        -:  934:          }
        -:  935:        }
        -:  936:
    #####:  937:        return 0;
        -:  938:
        -:  939:        case remodel:
    #####:  940:        j = state -> hand[currentPlayer][choice1]; //store card we will trash
        -:  941:
    #####:  942:        if ((getCost(state -> hand[currentPlayer][choice1]) + 2) > getCost(choice2)) 
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  943:        {
    #####:  944:          return -1;
        -:  945:        }
        -:  946:
    #####:  947:        gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  948:
        -:  949:        //discard card from hand
    #####:  950:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  951:
        -:  952:        //discard trashed card
    #####:  953:        for (i = 0; i < state -> handCount[currentPlayer]; i++) 
branch  0 never executed
branch  1 never executed
        -:  954:        {
    #####:  955:          if (state -> hand[currentPlayer][i] == j) 
branch  0 never executed
branch  1 never executed
        -:  956:          {
    #####:  957:            discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  958:            break;
        -:  959:          }
        -:  960:        }
    #####:  961:        return 0;
        -:  962:
        -:  963:        case baron:
    #####:  964:        state -> numBuys++; //Increase buys by 1!
    #####:  965:        if (choice1 > 0) 
branch  0 never executed
branch  1 never executed
        -:  966:        { //Boolean true or going to discard an estate
    #####:  967:            int p = 0; //Iterator for hand!
    #####:  968:            int card_not_discarded = 1; //Flag for discard set!
    #####:  969:            while (card_not_discarded) 
branch  0 never executed
branch  1 never executed
        -:  970:            {
    #####:  971:                if (state -> hand[currentPlayer][p] == estate) 
branch  0 never executed
branch  1 never executed
        -:  972:                { //Found an estate card!
    #####:  973:                    state -> coins += 4; //Add 4 coins to the amount of coins
    #####:  974:                    state -> discard[currentPlayer][state -> discardCount[currentPlayer]] = state -> hand[currentPlayer][p];
    #####:  975:                    state -> discardCount[currentPlayer]++;
    #####:  976:                    for (; p < state -> handCount[currentPlayer]; p++) 
branch  0 never executed
branch  1 never executed
        -:  977:                    {
    #####:  978:                      state -> hand[currentPlayer][p] = state -> hand[currentPlayer][p + 1];
        -:  979:                    }
    #####:  980:                    state -> hand[currentPlayer][state -> handCount[currentPlayer]] = -1;
    #####:  981:                    state -> handCount[currentPlayer]--;
    #####:  982:                    card_not_discarded = 0; //Exit the loop
        -:  983:                  } 
    #####:  984:                  else if (p > state -> handCount[currentPlayer]) 
branch  0 never executed
branch  1 never executed
        -:  985:                  {
        -:  986:                    if (DEBUG) 
        -:  987:                    {
        -:  988:                      printf("No estate cards in your hand, invalid choice\n");
        -:  989:                      printf("Must gain an estate if there are any\n");
        -:  990:                    }
    #####:  991:                    if (supplyCount(estate, state) > 0) 
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  992:                    {
    #####:  993:                      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  994:                        state -> supplyCount[estate]--; //Decrement estates
    #####:  995:                        if (supplyCount(estate, state) == 0) 
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  996:                        {
    #####:  997:                          isGameOver(state);
call    0 never executed
        -:  998:                        }
        -:  999:                      }
    #####: 1000:                    card_not_discarded = 0; //Exit the loop
        -: 1001:                  } 
        -: 1002:                  else 
        -: 1003:                  {
    #####: 1004:                    p++; //Next card
        -: 1005:                  }
        -: 1006:                }
        -: 1007:              } 
        -: 1008:              else 
        -: 1009:              {
    #####: 1010:                if (supplyCount(estate, state) > 0) 
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1011:                {
    #####: 1012:                gainCard(estate, state, 0, currentPlayer); //Gain an estate
call    0 never executed
    #####: 1013:                state -> supplyCount[estate]--; //Decrement Estates
    #####: 1014:                if (supplyCount(estate, state) == 0) 
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1015:                {
    #####: 1016:                  isGameOver(state);
call    0 never executed
        -: 1017:                }
        -: 1018:              }
        -: 1019:            }
    #####: 1020:            return 0;
        -: 1021:
        -: 1022:            case minion:
        -: 1023:        //+1 action
    #####: 1024:            state -> numActions++;
        -: 1025:
        -: 1026:        //discard card from hand
    #####: 1027:            discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1028:
    #####: 1029:        if (choice1) //+2 coins
branch  0 never executed
branch  1 never executed
        -: 1030:        {
    #####: 1031:          state -> coins = state -> coins + 2;
    #####: 1032:        } else if (choice2) //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -: 1033:        {
        -: 1034:            //discard hand
    #####: 1035:          while (numHandCards(state) > 0) 
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1036:          {
    #####: 1037:            discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1038:          }
        -: 1039:
        -: 1040:            //draw 4
    #####: 1041:          for (i = 0; i < 4; i++) 
branch  0 never executed
branch  1 never executed
        -: 1042:          {
    #####: 1043:            drawCard(currentPlayer, state);
call    0 never executed
        -: 1044:          }
        -: 1045:
        -: 1046:            //other players discard hand and redraw if hand size > 4
    #####: 1047:          for (i = 0; i < state -> numPlayers; i++) 
branch  0 never executed
branch  1 never executed
        -: 1048:          {
    #####: 1049:            if (i != currentPlayer) 
branch  0 never executed
branch  1 never executed
        -: 1050:            {
    #####: 1051:              if (state -> handCount[i] > 4) 
branch  0 never executed
branch  1 never executed
        -: 1052:              {
        -: 1053:                        //discard hand
    #####: 1054:                while (state -> handCount[i] > 0) 
branch  0 never executed
branch  1 never executed
        -: 1055:                {
    #####: 1056:                  discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1057:                }
        -: 1058:                        //draw 4
    #####: 1059:                for (j = 0; j < 4; j++) 
branch  0 never executed
branch  1 never executed
        -: 1060:                {
    #####: 1061:                  drawCard(i, state);
call    0 never executed
        -: 1062:                }
        -: 1063:              }
        -: 1064:            }
        -: 1065:          }
        -: 1066:        }
    #####: 1067:        return 0;
        -: 1068:
        -: 1069:        case steward:
    #####: 1070:        if (choice1 == 1) 
branch  0 never executed
branch  1 never executed
        -: 1071:        {
        -: 1072:          //+2 cards
    #####: 1073:          drawCard(currentPlayer, state);
call    0 never executed
    #####: 1074:          drawCard(currentPlayer, state);
call    0 never executed
        -: 1075:        } 
    #####: 1076:        else if (choice1 == 2) 
branch  0 never executed
branch  1 never executed
        -: 1077:        {
        -: 1078:          //+2 coins
    #####: 1079:          state -> coins = state -> coins + 2;
        -: 1080:        } 
        -: 1081:        else 
        -: 1082:        {
        -: 1083:          //trash 2 cards in hand
    #####: 1084:          discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1085:          discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1086:        }
        -: 1087:
        -: 1088:        //discard card from hand
    #####: 1089:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1090:        return 0;
        -: 1091:
        -: 1092:        case tribute:
    #####: 1093:        if ((state -> discardCount[nextPlayer] + state -> deckCount[nextPlayer]) <= 1) 
branch  0 never executed
branch  1 never executed
        -: 1094:        {
    #####: 1095:          if (state -> deckCount[nextPlayer] > 0) 
branch  0 never executed
branch  1 never executed
        -: 1096:          {
    #####: 1097:            tributeRevealedCards[0] = state -> deck[nextPlayer][state -> deckCount[nextPlayer] - 1];
    #####: 1098:            state -> deckCount[nextPlayer]--;
        -: 1099:          } 
    #####: 1100:          else if (state -> discardCount[nextPlayer] > 0) 
branch  0 never executed
branch  1 never executed
        -: 1101:          {
    #####: 1102:            tributeRevealedCards[0] = state -> discard[nextPlayer][state -> discardCount[nextPlayer] - 1];
    #####: 1103:            state -> discardCount[nextPlayer]--;
        -: 1104:          } 
        -: 1105:          else 
        -: 1106:          {
        -: 1107:                //No Card to Reveal
        -: 1108:            if (DEBUG) 
        -: 1109:            {
        -: 1110:              printf("No cards to reveal\n");
        -: 1111:            }
        -: 1112:          }
        -: 1113:        } 
        -: 1114:        else 
        -: 1115:        {
    #####: 1116:          if (state -> deckCount[nextPlayer] == 0) 
branch  0 never executed
branch  1 never executed
        -: 1117:          {
    #####: 1118:            for (i = 0; i < state -> discardCount[nextPlayer]; i++) 
branch  0 never executed
branch  1 never executed
        -: 1119:            {
    #####: 1120:                    state -> deck[nextPlayer][i] = state -> discard[nextPlayer][i]; //Move to deck
    #####: 1121:                    state -> deckCount[nextPlayer]++;
    #####: 1122:                    state -> discard[nextPlayer][i] = -1;
    #####: 1123:                    state -> discardCount[nextPlayer]--;
        -: 1124:                  }
        -: 1125:
    #####: 1126:                shuffle(nextPlayer, state); //Shuffle the deck
call    0 never executed
        -: 1127:              }
    #####: 1128:              tributeRevealedCards[0] = state -> deck[nextPlayer][state -> deckCount[nextPlayer] - 1];
    #####: 1129:              state -> deck[nextPlayer][state -> deckCount[nextPlayer]--] = -1;
    #####: 1130:              state -> deckCount[nextPlayer]--;
    #####: 1131:              tributeRevealedCards[1] = state -> deck[nextPlayer][state -> deckCount[nextPlayer] - 1];
    #####: 1132:              state -> deck[nextPlayer][state -> deckCount[nextPlayer]--] = -1;
    #####: 1133:              state -> deckCount[nextPlayer]--;
        -: 1134:            }
        -: 1135:
    #####: 1136:        if (tributeRevealedCards[0] == tributeRevealedCards[1]) 
branch  0 never executed
branch  1 never executed
        -: 1137:        { //If we have a duplicate card, just drop one 
    #####: 1138:          state -> playedCards[state -> playedCardCount] = tributeRevealedCards[1];
    #####: 1139:          state -> playedCardCount++;
    #####: 1140:          tributeRevealedCards[1] = -1;
        -: 1141:        }
        -: 1142:
    #####: 1143:        for (i = 0; i <= 2; i++) 
branch  0 never executed
branch  1 never executed
        -: 1144:        {
    #####: 1145:            if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1146:            { //Treasure cards
    #####: 1147:              state -> coins += 2;
        -: 1148:            } 
    #####: 1149:            else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
        -: 1150:            { //Victory Card Found
    #####: 1151:              drawCard(currentPlayer, state);
call    0 never executed
    #####: 1152:              drawCard(currentPlayer, state);
call    0 never executed
        -: 1153:            } 
        -: 1154:            else 
        -: 1155:            { //Action Card
    #####: 1156:              state -> numActions = state -> numActions + 2;
        -: 1157:            }
        -: 1158:          }
        -: 1159:
    #####: 1160:          return 0;
        -: 1161:
        -: 1162:          case ambassador:
    #####: 1163:        j = 0; //used to check if player has enough cards to discard
        -: 1164:
    #####: 1165:        if (choice2 > 2 || choice2 < 0) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1166:        {
    #####: 1167:          return -1;
        -: 1168:        }
        -: 1169:
    #####: 1170:        if (choice1 == handPos) 
branch  0 never executed
branch  1 never executed
        -: 1171:        {
    #####: 1172:          return -1;
        -: 1173:        }
        -: 1174:
    #####: 1175:        for (i = 0; i < state -> handCount[currentPlayer]; i++) 
branch  0 never executed
branch  1 never executed
        -: 1176:        {
    #####: 1177:          if (i != handPos && i == state -> hand[currentPlayer][choice1] && i != choice1) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1178:          {
    #####: 1179:            j++;
        -: 1180:          }
        -: 1181:        }
    #####: 1182:        if (j < choice2) 
branch  0 never executed
branch  1 never executed
        -: 1183:        {
    #####: 1184:          return -1;
        -: 1185:        }
        -: 1186:
        -: 1187:        if (DEBUG)
        -: 1188:          printf("Player %d reveals card number: %d\n", currentPlayer, state -> hand[currentPlayer][choice1]);
        -: 1189:
        -: 1190:        //increase supply count for choosen card by amount being discarded
    #####: 1191:        state -> supplyCount[state -> hand[currentPlayer][choice1]] += choice2;
        -: 1192:
        -: 1193:        //each other player gains a copy of revealed card
    #####: 1194:        for (i = 0; i < state -> numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1195:          if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####: 1196:            gainCard(state -> hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1197:          }
        -: 1198:        }
        -: 1199:
        -: 1200:        //discard played card from hand
    #####: 1201:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1202:
        -: 1203:        //trash copies of cards returned to supply
    #####: 1204:        for (j = 0; j < choice2; j++) {
branch  0 never executed
branch  1 never executed
    #####: 1205:          for (i = 0; i < state -> handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1206:            if (state -> hand[currentPlayer][i] == state -> hand[currentPlayer][choice1]) {
branch  0 never executed
branch  1 never executed
    #####: 1207:              discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1208:              break;
        -: 1209:            }
        -: 1210:          }
        -: 1211:        }
        -: 1212:
    #####: 1213:        return 0;
        -: 1214:
        -: 1215:        case cutpurse:
        -: 1216:
    #####: 1217:        updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1218:        for (i = 0; i < state -> numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1219:          if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####: 1220:            for (j = 0; j < state -> handCount[i]; j++) {
branch  0 never executed
branch  1 never executed
    #####: 1221:              if (state -> hand[i][j] == copper) {
branch  0 never executed
branch  1 never executed
    #####: 1222:                discardCard(j, i, state, 0);
call    0 never executed
    #####: 1223:                break;
        -: 1224:              }
    #####: 1225:              if (j == state -> handCount[i]) {
branch  0 never executed
branch  1 never executed
    #####: 1226:                for (k = 0; k < state -> handCount[i]; k++) {
branch  0 never executed
branch  1 never executed
        -: 1227:                  if (DEBUG)
        -: 1228:                    printf("Player %d reveals card number %d\n", i, state -> hand[i][k]);
        -: 1229:                }
    #####: 1230:                break;
        -: 1231:              }
        -: 1232:            }
        -: 1233:
        -: 1234:          }
        -: 1235:
        -: 1236:        }
        -: 1237:
        -: 1238:        //discard played card from hand
    #####: 1239:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1240:
    #####: 1241:        return 0;
        -: 1242:
        -: 1243:        case embargo:
        -: 1244:        //+2 Coins
    #####: 1245:        state -> coins = state -> coins + 2;
        -: 1246:
        -: 1247:        //see if selected pile is in play
    #####: 1248:        if (state -> supplyCount[choice1] == -1) {
branch  0 never executed
branch  1 never executed
    #####: 1249:          return -1;
        -: 1250:        }
        -: 1251:
        -: 1252:        //add embargo token to selected supply pile
    #####: 1253:        state -> embargoTokens[choice1]++;
        -: 1254:
        -: 1255:        //trash card
    #####: 1256:        discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1257:        return 0;
        -: 1258:
        -: 1259:        case outpost:
        -: 1260:        //set outpost flag
    #####: 1261:        state -> outpostPlayed++;
        -: 1262:
        -: 1263:        //discard card
    #####: 1264:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1265:        return 0;
        -: 1266:
        -: 1267:        case salvager:
        -: 1268:        //+1 buy
    #####: 1269:        state -> numBuys++;
        -: 1270:
    #####: 1271:        if (choice1) {
branch  0 never executed
branch  1 never executed
        -: 1272:            //gain coins equal to trashed card
    #####: 1273:          state -> coins = state -> coins + getCost(handCard(choice1, state));
call    0 never executed
call    1 never executed
        -: 1274:            //trash card
    #####: 1275:          discardCard(choice1, currentPlayer, state, 1);
call    0 never executed
        -: 1276:        }
        -: 1277:
        -: 1278:        //discard card
    #####: 1279:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1280:        return 0;
        -: 1281:
        -: 1282:        case sea_hag:
    #####: 1283:        for (i = 0; i < state -> numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1284:          if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####: 1285:            state -> discard[i][state -> discardCount[i]] = state -> deck[i][state -> deckCount[i]--];
    #####: 1286:            state -> deckCount[i]--;
    #####: 1287:            state -> discardCount[i]++;
    #####: 1288:                state -> deck[i][state -> deckCount[i]--] = curse; //Top card now a curse
        -: 1289:              }
        -: 1290:            }
    #####: 1291:            return 0;
        -: 1292:
        -: 1293:            case treasure_map:
        -: 1294:        //search hand for another treasure_map
    #####: 1295:            index = -1;
    #####: 1296:            for (i = 0; i < state -> handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1297:              if (state -> hand[currentPlayer][i] == treasure_map && i != handPos) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1298:                index = i;
    #####: 1299:                break;
        -: 1300:              }
        -: 1301:            }
    #####: 1302:            if (index > -1) {
branch  0 never executed
branch  1 never executed
        -: 1303:            //trash both treasure cards
    #####: 1304:              discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1305:              discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1306:
        -: 1307:            //gain 4 Gold cards
    #####: 1308:              for (i = 0; i < 4; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1309:                gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1310:              }
        -: 1311:
        -: 1312:            //return success
    #####: 1313:              return 1;
        -: 1314:            }
        -: 1315:
        -: 1316:        //no second treasure_map found in hand
    #####: 1317:            return -1;
        -: 1318:          }
        -: 1319:
    #####: 1320:          return -1;
        -: 1321:        }
        -: 1322:
function discardCard called 6 returned 100% blocks executed 78%
        6: 1323:        int discardCard(int handPos, int currentPlayer, struct gameState * state, int trashFlag) {
        -: 1324:
        -: 1325:    //if card is not trashed, added to Played pile 
        6: 1326:          if (trashFlag < 1) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1327:        //add card to played pile
        6: 1328:            state -> playedCards[state -> playedCardCount] = state -> hand[currentPlayer][handPos];
        6: 1329:            state -> playedCardCount++;
        -: 1330:          }
        -: 1331:
        -: 1332:    //set played card to -1
        6: 1333:          state -> hand[currentPlayer][handPos] = -1;
        -: 1334:
        -: 1335:    //remove card from player's hand
        6: 1336:    if (handPos == (state -> handCount[currentPlayer] - 1)) //last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1337:    {
        -: 1338:        //reduce number of cards in hand
    #####: 1339:      state -> handCount[currentPlayer]--;
        6: 1340:    } else if (state -> handCount[currentPlayer] == 1) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1341:    {
        -: 1342:        //reduce number of cards in hand
    #####: 1343:      state -> handCount[currentPlayer]--;
        -: 1344:    } else {
        -: 1345:        //replace discarded card with last card in hand
        6: 1346:      state -> hand[currentPlayer][handPos] = state -> hand[currentPlayer][(state -> handCount[currentPlayer] - 1)];
        -: 1347:        //set last card to -1
        6: 1348:      state -> hand[currentPlayer][state -> handCount[currentPlayer] - 1] = -1;
        -: 1349:        //reduce number of cards in hand
        6: 1350:      state -> handCount[currentPlayer]--;
        -: 1351:    }
        -: 1352:
        6: 1353:    return 0;
        -: 1354:  }
        -: 1355:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1356:  int gainCard(int supplyPos, struct gameState * state, int toFlag, int player) {
        -: 1357:    //Note: supplyPos is enum of choosen card
        -: 1358:
        -: 1359:    //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1360:    if (supplyCount(supplyPos, state) < 1) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1361:      return -1;
        -: 1362:    }
        -: 1363:
        -: 1364:    //added card for [whoseTurn] current player:
        -: 1365:    // toFlag = 0 : add to discard
        -: 1366:    // toFlag = 1 : add to deck
        -: 1367:    // toFlag = 2 : add to hand
        -: 1368:
    #####: 1369:    if (toFlag == 1) {
branch  0 never executed
branch  1 never executed
    #####: 1370:      state -> deck[player][state -> deckCount[player]] = supplyPos;
    #####: 1371:      state -> deckCount[player]++;
    #####: 1372:    } else if (toFlag == 2) {
branch  0 never executed
branch  1 never executed
    #####: 1373:      state -> hand[player][state -> handCount[player]] = supplyPos;
    #####: 1374:      state -> handCount[player]++;
        -: 1375:    } else {
    #####: 1376:      state -> discard[player][state -> discardCount[player]] = supplyPos;
    #####: 1377:      state -> discardCount[player]++;
        -: 1378:    }
        -: 1379:
        -: 1380:    //decrease number in supply pile
    #####: 1381:    state -> supplyCount[supplyPos]--;
        -: 1382:
    #####: 1383:    return 0;
        -: 1384:  }
        -: 1385:
function updateCoins called 3 returned 100% blocks executed 82%
        3: 1386:  int updateCoins(int player, struct gameState * state, int bonus) {
        -: 1387:    int i;
        -: 1388:
        -: 1389:    //reset coin count
        3: 1390:    state -> coins = 0;
        -: 1391:
        -: 1392:    //add coins for each Treasure card in player's hand
       18: 1393:    for (i = 0; i < state -> handCount[player]; i++) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       15: 1394:      if (state -> hand[player][i] == copper) {
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
       10: 1395:        state -> coins += 1;
        5: 1396:      } else if (state -> hand[player][i] == silver) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1397:        state -> coins += 2;
        5: 1398:      } else if (state -> hand[player][i] == gold) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1399:        state -> coins += 3;
        -: 1400:      }
        -: 1401:    }
        -: 1402:
        -: 1403:    //add bonus
        3: 1404:    state -> coins += bonus;
        -: 1405:
        3: 1406:    return 0;
        -: 1407:  }
        -: 1408:
        -: 1409://end of dominion.c
-------------------------Testing: Village-------------------------

Draw 1 card:
Num of Hand cards doesn't change (after removing the played card):	PASSED
Num of deck + discard cards decreases by 1:	PASSED
numActions +2:	ERROR: 4 is not equal to 2!

Test other state variables that shouldn't change:
supplyCount[0]:	PASSED
embargoTokens[0]:	PASSED
supplyCount[1]:	PASSED
embargoTokens[1]:	PASSED
supplyCount[2]:	PASSED
embargoTokens[2]:	PASSED
supplyCount[3]:	PASSED
embargoTokens[3]:	PASSED
supplyCount[4]:	PASSED
embargoTokens[4]:	PASSED
supplyCount[5]:	PASSED
embargoTokens[5]:	PASSED
supplyCount[6]:	PASSED
embargoTokens[6]:	PASSED
supplyCount[7]:	PASSED
embargoTokens[7]:	PASSED
supplyCount[8]:	PASSED
embargoTokens[8]:	PASSED
supplyCount[9]:	PASSED
embargoTokens[9]:	PASSED
supplyCount[10]:	PASSED
embargoTokens[10]:	PASSED
supplyCount[11]:	PASSED
embargoTokens[11]:	PASSED
supplyCount[12]:	PASSED
embargoTokens[12]:	PASSED
supplyCount[13]:	PASSED
embargoTokens[13]:	PASSED
supplyCount[14]:	PASSED
embargoTokens[14]:	PASSED
supplyCount[15]:	PASSED
embargoTokens[15]:	PASSED
supplyCount[16]:	PASSED
embargoTokens[16]:	PASSED
supplyCount[17]:	PASSED
embargoTokens[17]:	PASSED
supplyCount[18]:	PASSED
embargoTokens[18]:	PASSED
supplyCount[19]:	PASSED
embargoTokens[19]:	PASSED
supplyCount[20]:	PASSED
embargoTokens[20]:	PASSED
supplyCount[21]:	PASSED
embargoTokens[21]:	PASSED
supplyCount[22]:	PASSED
embargoTokens[22]:	PASSED
supplyCount[23]:	PASSED
embargoTokens[23]:	PASSED
supplyCount[24]:	PASSED
embargoTokens[24]:	PASSED
supplyCount[25]:	PASSED
embargoTokens[25]:	PASSED
supplyCount[26]:	PASSED
embargoTokens[26]:	PASSED
numBuys:	PASSED
Other player #1: 
handCount:	PASSED
deckCount:	PASSED
discardCount:	PASSED

Draw 1 card:
Num of Hand cards doesn't change (after removing the played card):	PASSED
Num of deck + discard cards decreases by 1:	PASSED
numActions +2:	ERROR: 4 is not equal to 2!

Test other state variables that shouldn't change:
supplyCount[0]:	PASSED
embargoTokens[0]:	PASSED
supplyCount[1]:	PASSED
embargoTokens[1]:	PASSED
supplyCount[2]:	PASSED
embargoTokens[2]:	PASSED
supplyCount[3]:	PASSED
embargoTokens[3]:	PASSED
supplyCount[4]:	PASSED
embargoTokens[4]:	PASSED
supplyCount[5]:	PASSED
embargoTokens[5]:	PASSED
supplyCount[6]:	PASSED
embargoTokens[6]:	PASSED
supplyCount[7]:	PASSED
embargoTokens[7]:	PASSED
supplyCount[8]:	PASSED
embargoTokens[8]:	PASSED
supplyCount[9]:	PASSED
embargoTokens[9]:	PASSED
supplyCount[10]:	PASSED
embargoTokens[10]:	PASSED
supplyCount[11]:	PASSED
embargoTokens[11]:	PASSED
supplyCount[12]:	PASSED
embargoTokens[12]:	PASSED
supplyCount[13]:	PASSED
embargoTokens[13]:	PASSED
supplyCount[14]:	PASSED
embargoTokens[14]:	PASSED
supplyCount[15]:	PASSED
embargoTokens[15]:	PASSED
supplyCount[16]:	PASSED
embargoTokens[16]:	PASSED
supplyCount[17]:	PASSED
embargoTokens[17]:	PASSED
supplyCount[18]:	PASSED
embargoTokens[18]:	PASSED
supplyCount[19]:	PASSED
embargoTokens[19]:	PASSED
supplyCount[20]:	PASSED
embargoTokens[20]:	PASSED
supplyCount[21]:	PASSED
embargoTokens[21]:	PASSED
supplyCount[22]:	PASSED
embargoTokens[22]:	PASSED
supplyCount[23]:	PASSED
embargoTokens[23]:	PASSED
supplyCount[24]:	PASSED
embargoTokens[24]:	PASSED
supplyCount[25]:	PASSED
embargoTokens[25]:	PASSED
supplyCount[26]:	PASSED
embargoTokens[26]:	PASSED
numBuys:	PASSED
Other player #1: 
handCount:	PASSED
deckCount:	PASSED
discardCount:	PASSED
Other player #2: 
handCount:	PASSED
deckCount:	PASSED
discardCount:	PASSED

Draw 1 card:
Num of Hand cards doesn't change (after removing the played card):	PASSED
Num of deck + discard cards decreases by 1:	PASSED
numActions +2:	ERROR: 4 is not equal to 2!

Test other state variables that shouldn't change:
supplyCount[0]:	PASSED
embargoTokens[0]:	PASSED
supplyCount[1]:	PASSED
embargoTokens[1]:	PASSED
supplyCount[2]:	PASSED
embargoTokens[2]:	PASSED
supplyCount[3]:	PASSED
embargoTokens[3]:	PASSED
supplyCount[4]:	PASSED
embargoTokens[4]:	PASSED
supplyCount[5]:	PASSED
embargoTokens[5]:	PASSED
supplyCount[6]:	PASSED
embargoTokens[6]:	PASSED
supplyCount[7]:	PASSED
embargoTokens[7]:	PASSED
supplyCount[8]:	PASSED
embargoTokens[8]:	PASSED
supplyCount[9]:	PASSED
embargoTokens[9]:	PASSED
supplyCount[10]:	PASSED
embargoTokens[10]:	PASSED
supplyCount[11]:	PASSED
embargoTokens[11]:	PASSED
supplyCount[12]:	PASSED
embargoTokens[12]:	PASSED
supplyCount[13]:	PASSED
embargoTokens[13]:	PASSED
supplyCount[14]:	PASSED
embargoTokens[14]:	PASSED
supplyCount[15]:	PASSED
embargoTokens[15]:	PASSED
supplyCount[16]:	PASSED
embargoTokens[16]:	PASSED
supplyCount[17]:	PASSED
embargoTokens[17]:	PASSED
supplyCount[18]:	PASSED
embargoTokens[18]:	PASSED
supplyCount[19]:	PASSED
embargoTokens[19]:	PASSED
supplyCount[20]:	PASSED
embargoTokens[20]:	PASSED
supplyCount[21]:	PASSED
embargoTokens[21]:	PASSED
supplyCount[22]:	PASSED
embargoTokens[22]:	PASSED
supplyCount[23]:	PASSED
embargoTokens[23]:	PASSED
supplyCount[24]:	PASSED
embargoTokens[24]:	PASSED
supplyCount[25]:	PASSED
embargoTokens[25]:	PASSED
supplyCount[26]:	PASSED
embargoTokens[26]:	PASSED
numBuys:	PASSED
Other player #1: 
handCount:	PASSED
deckCount:	PASSED
discardCount:	PASSED
Other player #2: 
handCount:	PASSED
deckCount:	PASSED
discardCount:	PASSED
Other player #3: 
handCount:	PASSED
deckCount:	PASSED
discardCount:	PASSED

Total Number of Failures: 3

Function 'updateCoins'
Lines executed:81.82% of 11
Branches executed:100.00% of 8
Taken at least once:75.00% of 8
No calls

Function 'gainCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 1

Function 'discardCard'
Lines executed:84.62% of 13
Branches executed:100.00% of 6
Taken at least once:50.00% of 6
No calls

Function 'cardEffect'
Lines executed:3.40% of 206
Branches executed:12.85% of 179
Taken at least once:1.12% of 179
Calls executed:3.45% of 58

Function 'smithy_card'
Lines executed:0.00% of 6
Branches executed:0.00% of 2
Taken at least once:0.00% of 2
Calls executed:0.00% of 3

Function 'adventurer_card'
Lines executed:0.00% of 18
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
Calls executed:0.00% of 3

Function 'council_room_card'
Lines executed:0.00% of 9
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 4

Function 'village_card'
Lines executed:100.00% of 6
No branches
Calls executed:100.00% of 3

Function 'great_hall_card'
Lines executed:0.00% of 6
No branches
Calls executed:0.00% of 3

Function 'getCost'
Lines executed:0.00% of 30
Branches executed:0.00% of 28
Taken at least once:0.00% of 28
No calls

Function 'drawCard'
Lines executed:36.36% of 22
Branches executed:33.33% of 6
Taken at least once:16.67% of 6
Calls executed:0.00% of 1

Function 'getWinners'
Lines executed:0.00% of 24
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
Calls executed:0.00% of 2

Function 'scoreFor'
Lines executed:0.00% of 42
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
Calls executed:0.00% of 3

Function 'isGameOver'
Lines executed:0.00% of 10
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'endTurn'
Lines executed:0.00% of 20
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'whoseTurn'
Lines executed:100.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 9
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'supplyCount'
Lines executed:0.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 3
No branches
Calls executed:0.00% of 1

Function 'numHandCards'
Lines executed:0.00% of 2
No branches
Calls executed:0.00% of 1

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 4

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
Calls executed:0.00% of 3

Function 'shuffle'
Lines executed:93.75% of 16
Branches executed:100.00% of 8
Taken at least once:87.50% of 8
Calls executed:100.00% of 2

Function 'initializeGame'
Lines executed:95.16% of 62
Branches executed:100.00% of 46
Taken at least once:91.30% of 46
Calls executed:100.00% of 5

Function 'kingdomCards'
Lines executed:0.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:0.00% of 3
No branches
No calls

Function 'compare'
Lines executed:83.33% of 6
Branches executed:100.00% of 4
Taken at least once:75.00% of 4
No calls

File 'dominion.c'
Lines executed:21.00% of 581
Branches executed:23.26% of 417
Taken at least once:15.35% of 417
Calls executed:12.00% of 100
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h> 
        -:    5:#include <math.h> 
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 135 returned 100% blocks executed 83%
      135:    8:int compare(const void * a,
        -:    9:  const void * b) {
      135:   10:  if ( * (int * ) a > * (int * ) b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   11:    return 1;
      135:   12:  if ( * (int * ) a < * (int * ) b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
       36:   13:    return -1;
       99:   14:  return 0;
        -:   15:}
        -:   16:
function newGame called 0 returned 0% blocks executed 0%
    #####:   17:struct gameState * newGame() {
    #####:   18:  struct gameState * g = malloc(sizeof(struct gameState));
    #####:   19:  return g;
        -:   20:}
        -:   21:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   22:int * kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   23:  int k8, int k9, int k10) {
    #####:   24:  int * k = malloc(10 * sizeof(int));
    #####:   25:  k[0] = k1;
    #####:   26:  k[1] = k2;
    #####:   27:  k[2] = k3;
    #####:   28:  k[3] = k4;
    #####:   29:  k[4] = k5;
    #####:   30:  k[5] = k6;
    #####:   31:  k[6] = k7;
    #####:   32:  k[7] = k8;
    #####:   33:  k[8] = k9;
    #####:   34:  k[9] = k10;
    #####:   35:  return k;
        -:   36:}
        -:   37:
function initializeGame called 3 returned 100% blocks executed 95%
        3:   38:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   39:  struct gameState * state) {
        -:   40:
        -:   41:  int i;
        -:   42:  int j;
        -:   43:  int it;
        -:   44:    //set up random number generator
        3:   45:  SelectStream(1);
call    0 returned 100%
        3:   46:  PutSeed((long) randomSeed);
call    0 returned 100%
        -:   47:
        -:   48:    //check number of players
        3:   49:  if (numPlayers > MAX_PLAYERS || numPlayers < 2) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:   50:    return -1;
        -:   51:  }
        -:   52:
        -:   53:    //set number of players
        3:   54:  state -> numPlayers = numPlayers;
        -:   55:
        -:   56:    //check selected kingdom cards are different
       33:   57:  for (i = 0; i < 10; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      330:   58:    for (j = 0; j < 10; j++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      300:   59:      if (j != i && kingdomCards[j] == kingdomCards[i]) {
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:   60:        return -1;
        -:   61:      }
        -:   62:    }
        -:   63:  }
        -:   64:
        -:   65:    //initialize supply
        -:   66:    ///////////////////////////////
        -:   67:
        -:   68:    //set number of Curse cards
        3:   69:  if (numPlayers == 2) {
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        1:   70:    state -> supplyCount[curse] = 10;
        2:   71:  } else if (numPlayers == 3) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        1:   72:    state -> supplyCount[curse] = 20;
        -:   73:  } else {
        1:   74:    state -> supplyCount[curse] = 30;
        -:   75:  }
        -:   76:
        -:   77:    //set number of Victory cards
        3:   78:  if (numPlayers == 2) {
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        1:   79:    state -> supplyCount[estate] = 8;
        1:   80:    state -> supplyCount[duchy] = 8;
        1:   81:    state -> supplyCount[province] = 8;
        -:   82:  } else {
        2:   83:    state -> supplyCount[estate] = 12;
        2:   84:    state -> supplyCount[duchy] = 12;
        2:   85:    state -> supplyCount[province] = 12;
        -:   86:  }
        -:   87:
        -:   88:    //set number of Treasure cards
        3:   89:  state -> supplyCount[copper] = 60 - (7 * numPlayers);
        3:   90:  state -> supplyCount[silver] = 40;
        3:   91:  state -> supplyCount[gold] = 30;
        -:   92:
        -:   93:    //set number of Kingdom cards
       63:   94:    for (i = adventurer; i <= treasure_map; i++) //loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:   95:    {
      495:   96:        for (j = 0; j < 10; j++) //loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:   97:        {
      465:   98:          if (kingdomCards[j] == i) {
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:   99:                //check if card is a 'Victory' Kingdom card
       30:  100:            if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens) {
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
       12:  101:              if (numPlayers == 2) {
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        2:  102:                state -> supplyCount[i] = 8;
        -:  103:              } else {
        4:  104:                state -> supplyCount[i] = 12;
        -:  105:              }
        -:  106:            } else {
       24:  107:              state -> supplyCount[i] = 10;
        -:  108:            }
       30:  109:            break;
        -:  110:            } else //card is not in the set choosen for the game
        -:  111:            {
      435:  112:              state -> supplyCount[i] = -1;
        -:  113:            }
        -:  114:          }
        -:  115:
        -:  116:        }
        -:  117:
        -:  118:    ////////////////////////
        -:  119:    //supply intilization complete
        -:  120:
        -:  121:    //set player decks
       12:  122:        for (i = 0; i < numPlayers; i++) {
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        9:  123:          state -> deckCount[i] = 0;
       36:  124:          for (j = 0; j < 3; j++) {
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
       27:  125:            state -> deck[i][j] = estate;
       27:  126:            state -> deckCount[i]++;
        -:  127:          }
       72:  128:          for (j = 3; j < 10; j++) {
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
       63:  129:            state -> deck[i][j] = copper;
       63:  130:            state -> deckCount[i]++;
        -:  131:          }
        -:  132:        }
        -:  133:
        -:  134:    //shuffle player decks
       12:  135:        for (i = 0; i < numPlayers; i++) {
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        9:  136:          if (shuffle(i, state) < 0) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  137:            return -1;
        -:  138:          }
        -:  139:        }
        -:  140:
        -:  141:    //draw player hands
       12:  142:        for (i = 0; i < numPlayers; i++) {
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  143:        //initialize hand size to zero
        9:  144:          state -> handCount[i] = 0;
        9:  145:          state -> discardCount[i] = 0;
        -:  146:        //draw 5 cards
        -:  147:        // for (j = 0; j < 5; j++)
        -:  148:        //  {
        -:  149:        //    drawCard(i, state);
        -:  150:        //  }
        -:  151:        }
        -:  152:
        -:  153:    //set embargo tokens to 0 for all supply piles
       84:  154:        for (i = 0; i <= treasure_map; i++) {
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
       81:  155:          state -> embargoTokens[i] = 0;
        -:  156:        }
        -:  157:
        -:  158:    //initialize first player's turn
        3:  159:        state -> outpostPlayed = 0;
        3:  160:        state -> phase = 0;
        3:  161:        state -> numActions = 1;
        3:  162:        state -> numBuys = 1;
        3:  163:        state -> playedCardCount = 0;
        3:  164:        state -> whoseTurn = 0;
        3:  165:        state -> handCount[state -> whoseTurn] = 0;
        -:  166:    //int it; move to top
        -:  167:
        -:  168:    //Moved draw cards to here, only drawing at the start of a turn
       18:  169:        for (it = 0; it < 5; it++) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       15:  170:          drawCard(state -> whoseTurn, state);
call    0 returned 100%
        -:  171:        }
        -:  172:
        3:  173:        updateCoins(state -> whoseTurn, state, 0);
call    0 returned 100%
        -:  174:
        3:  175:        return 0;
        -:  176:      }
        -:  177:
function shuffle called 9 returned 100% blocks executed 94%
        9:  178:      int shuffle(int player, struct gameState * state) {
        -:  179:
        -:  180:        int newDeck[MAX_DECK];
        9:  181:        int newDeckPos = 0;
        -:  182:        int card;
        -:  183:        int i;
        -:  184:
        9:  185:        if (state -> deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  186:          return -1;
        9:  187:        qsort((void * )(state -> deck[player]), state -> deckCount[player], sizeof(int), compare);
call    0 returned 100%
        -:  188:    /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  189:
      108:  190:        while (state -> deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       90:  191:          card = floor(Random() * state -> deckCount[player]);
call    0 returned 100%
       90:  192:          newDeck[newDeckPos] = state -> deck[player][card];
       90:  193:          newDeckPos++;
      282:  194:          for (i = card; i < state -> deckCount[player] - 1; i++) {
branch  0 taken 68%
branch  1 taken 32% (fallthrough)
      192:  195:            state -> deck[player][i] = state -> deck[player][i + 1];
        -:  196:          }
       90:  197:          state -> deckCount[player]--;
        -:  198:        }
       99:  199:        for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       90:  200:          state -> deck[player][i] = newDeck[i];
       90:  201:          state -> deckCount[player]++;
        -:  202:        }
        -:  203:
        9:  204:        return 0;
        -:  205:      }
        -:  206:
function playCard called 0 returned 0% blocks executed 0%
    #####:  207:      int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState * state) {
        -:  208:        int card;
    #####:  209:    int coin_bonus = 0; //tracks coins gain from actions
        -:  210:
        -:  211:    //check if it is the right phase
    #####:  212:    if (state -> phase != 0) {
branch  0 never executed
branch  1 never executed
    #####:  213:      return -1;
        -:  214:    }
        -:  215:
        -:  216:    //check if player has enough actions
    #####:  217:    if (state -> numActions < 1) {
branch  0 never executed
branch  1 never executed
    #####:  218:      return -1;
        -:  219:    }
        -:  220:
        -:  221:    //get card played
    #####:  222:    card = handCard(handPos, state);
call    0 never executed
        -:  223:
        -:  224:    //check if selected card is an action
    #####:  225:    if (card < adventurer || card > treasure_map) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  226:      return -1;
        -:  227:    }
        -:  228:
        -:  229:    //play card
    #####:  230:    if (cardEffect(card, choice1, choice2, choice3, state, handPos, & coin_bonus) < 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  231:      return -1;
        -:  232:    }
        -:  233:
        -:  234:    //reduce number of actions
    #####:  235:    state -> numActions--;
        -:  236:
        -:  237:    //update coins (Treasure cards may be added with card draws)
    #####:  238:    updateCoins(state -> whoseTurn, state, coin_bonus);
call    0 never executed
        -:  239:
    #####:  240:    return 0;
        -:  241:  }
        -:  242:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  243:  int buyCard(int supplyPos, struct gameState * state) {
        -:  244:    int who;
        -:  245:    if (DEBUG) {
        -:  246:      printf("Entering buyCard...\n");
        -:  247:    }
        -:  248:
        -:  249:    // I don't know what to do about the phase thing.
        -:  250:
    #####:  251:    who = state -> whoseTurn;
        -:  252:
    #####:  253:    if (state -> numBuys < 1) {
branch  0 never executed
branch  1 never executed
        -:  254:      if (DEBUG)
        -:  255:        printf("You do not have any buys left\n");
    #####:  256:      return -1;
    #####:  257:    } else if (supplyCount(supplyPos, state) < 1) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  258:      if (DEBUG)
        -:  259:        printf("There are not any of that type of card left\n");
    #####:  260:      return -1;
    #####:  261:    } else if (state -> coins < getCost(supplyPos)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  262:      if (DEBUG)
        -:  263:        printf("You do not have enough money to buy that. You have %d coins.\n", state -> coins);
    #####:  264:      return -1;
        -:  265:    } else {
    #####:  266:      state -> phase = 1;
        -:  267:        //state->supplyCount[supplyPos]--;
    #####:  268:        gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  269:
    #####:  270:        state -> coins = (state -> coins) - (getCost(supplyPos));
call    0 never executed
    #####:  271:        state -> numBuys--;
        -:  272:        if (DEBUG)
        -:  273:          printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state -> numBuys, state -> coins);
        -:  274:      }
        -:  275:
        -:  276:    //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  277:    //state->discardCount[who]++;
        -:  278:
    #####:  279:      return 0;
        -:  280:    }
        -:  281:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  282:    int numHandCards(struct gameState * state) 
        -:  283:    {
    #####:  284:      return state -> handCount[whoseTurn(state)];
call    0 never executed
        -:  285:    }
        -:  286:
function handCard called 0 returned 0% blocks executed 0%
    #####:  287:    int handCard(int handPos, struct gameState * state) 
        -:  288:    {
    #####:  289:      int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  290:      return state -> hand[currentPlayer][handPos];
        -:  291:    }
        -:  292:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  293:    int supplyCount(int card, struct gameState * state) 
        -:  294:    {
    #####:  295:      return state -> supplyCount[card];
        -:  296:    }
        -:  297:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  298:    int fullDeckCount(int player, int card, struct gameState * state) 
        -:  299:    {
        -:  300:      int i;
    #####:  301:      int count = 0;
        -:  302:
    #####:  303:      for (i = 0; i < state -> deckCount[player]; i++) 
branch  0 never executed
branch  1 never executed
        -:  304:      {
    #####:  305:        if (state -> deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  306:      }
        -:  307:
    #####:  308:      for (i = 0; i < state -> handCount[player]; i++) 
branch  0 never executed
branch  1 never executed
        -:  309:      {
    #####:  310:        if (state -> hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  311:      }
        -:  312:
    #####:  313:      for (i = 0; i < state -> discardCount[player]; i++) 
branch  0 never executed
branch  1 never executed
        -:  314:      {
    #####:  315:        if (state -> discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  316:      }
        -:  317:
    #####:  318:      return count;
        -:  319:    }
        -:  320:
function whoseTurn called 6 returned 100% blocks executed 100%
        6:  321:    int whoseTurn(struct gameState * state) 
        -:  322:    {
        6:  323:      return state -> whoseTurn;
        -:  324:    }
        -:  325:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  326:    int endTurn(struct gameState * state) 
        -:  327:    {
        -:  328:      int k;
        -:  329:      int i;
    #####:  330:      int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  331:
        -:  332:    //Discard hand
    #####:  333:      for (i = 0; i < state -> handCount[currentPlayer]; i++) 
branch  0 never executed
branch  1 never executed
        -:  334:      {
    #####:  335:        state -> discard[currentPlayer][state -> discardCount[currentPlayer]++] = state -> hand[currentPlayer][i]; //Discard
    #####:  336:        state -> hand[currentPlayer][i] = -1; //Set card to -1
        -:  337:      }
    #####:  338:    state -> handCount[currentPlayer] = 0; //Reset hand count
        -:  339:
        -:  340:    //Code for determining the player
    #####:  341:    if (currentPlayer < (state -> numPlayers - 1)) 
branch  0 never executed
branch  1 never executed
        -:  342:    {
    #####:  343:        state -> whoseTurn = currentPlayer + 1; //Still safe to increment
        -:  344:      } 
        -:  345:      else 
        -:  346:      {
    #####:  347:        state -> whoseTurn = 0; //Max player has been reached, loop back around to player 1
        -:  348:      }
        -:  349:
    #####:  350:      state -> outpostPlayed = 0;
    #####:  351:      state -> phase = 0;
    #####:  352:      state -> numActions = 1;
    #####:  353:      state -> coins = 0;
    #####:  354:      state -> numBuys = 1;
    #####:  355:      state -> playedCardCount = 0;
    #####:  356:      state -> handCount[state -> whoseTurn] = 0;
        -:  357:
        -:  358:    //int k; move to top
        -:  359:    //Next player draws hand
    #####:  360:      for (k = 0; k < 5; k++) 
branch  0 never executed
branch  1 never executed
        -:  361:      {
    #####:  362:        drawCard(state -> whoseTurn, state); //Draw a card
call    0 never executed
        -:  363:      }
        -:  364:
        -:  365:    //Update money
    #####:  366:      updateCoins(state -> whoseTurn, state, 0);
call    0 never executed
        -:  367:
    #####:  368:      return 0;
        -:  369:    }
        -:  370:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  371:    int isGameOver(struct gameState * state) 
        -:  372:    {
        -:  373:      int i;
        -:  374:      int j;
        -:  375:
        -:  376:    //if stack of Province cards is empty, the game ends
    #####:  377:      if (state -> supplyCount[province] == 0) 
branch  0 never executed
branch  1 never executed
        -:  378:      {
    #####:  379:        return 1;
        -:  380:      }
        -:  381:
        -:  382:    //if three supply pile are at 0, the game ends
    #####:  383:      j = 0;
    #####:  384:      for (i = 0; i < 25; i++) 
branch  0 never executed
branch  1 never executed
        -:  385:      {
    #####:  386:        if (state -> supplyCount[i] == 0) 
branch  0 never executed
branch  1 never executed
        -:  387:        {
    #####:  388:          j++;
        -:  389:        }
        -:  390:      }
    #####:  391:      if (j >= 3) 
branch  0 never executed
branch  1 never executed
        -:  392:      {
    #####:  393:        return 1;
        -:  394:      }
        -:  395:
    #####:  396:      return 0;
        -:  397:    }
        -:  398:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  399:    int scoreFor(int player, struct gameState * state) 
        -:  400:    {
        -:  401:      int i;
    #####:  402:      int score = 0;
        -:  403:    //score from hand
    #####:  404:      for (i = 0; i < state -> handCount[player]; i++) 
branch  0 never executed
branch  1 never executed
        -:  405:      {
    #####:  406:        if (state -> hand[player][i] == curse) 
branch  0 never executed
branch  1 never executed
        -:  407:        {
    #####:  408:          score = score - 1;
        -:  409:        };
    #####:  410:        if (state -> hand[player][i] == estate) 
branch  0 never executed
branch  1 never executed
        -:  411:        {
    #####:  412:          score = score + 1;
        -:  413:        };
    #####:  414:        if (state -> hand[player][i] == duchy) 
branch  0 never executed
branch  1 never executed
        -:  415:        {
    #####:  416:          score = score + 3;
        -:  417:        };
    #####:  418:        if (state -> hand[player][i] == province) 
branch  0 never executed
branch  1 never executed
        -:  419:        {
    #####:  420:          score = score + 6;
        -:  421:        };
    #####:  422:        if (state -> hand[player][i] == great_hall) 
branch  0 never executed
branch  1 never executed
        -:  423:        {
    #####:  424:          score = score + 1;
        -:  425:        };
    #####:  426:        if (state -> hand[player][i] == gardens) 
branch  0 never executed
branch  1 never executed
        -:  427:        {
    #####:  428:          score = score + (fullDeckCount(player, 0, state) / 10);
call    0 never executed
        -:  429:        };
        -:  430:      }
        -:  431:
        -:  432:    //score from discard
    #####:  433:      for (i = 0; i < state -> discardCount[player]; i++) 
branch  0 never executed
branch  1 never executed
        -:  434:      {
    #####:  435:        if (state -> discard[player][i] == curse) 
branch  0 never executed
branch  1 never executed
        -:  436:        {
    #####:  437:          score = score - 1;
        -:  438:        };
    #####:  439:        if (state -> discard[player][i] == estate) 
branch  0 never executed
branch  1 never executed
        -:  440:        {
    #####:  441:          score = score + 1;
        -:  442:        };
    #####:  443:        if (state -> discard[player][i] == duchy) 
branch  0 never executed
branch  1 never executed
        -:  444:        {
    #####:  445:          score = score + 3;
        -:  446:        };
    #####:  447:        if (state -> discard[player][i] == province) 
branch  0 never executed
branch  1 never executed
        -:  448:        {
    #####:  449:          score = score + 6;
        -:  450:        };
    #####:  451:        if (state -> discard[player][i] == great_hall) 
branch  0 never executed
branch  1 never executed
        -:  452:        {
    #####:  453:          score = score + 1;
        -:  454:        };
    #####:  455:        if (state -> discard[player][i] == gardens) 
branch  0 never executed
branch  1 never executed
        -:  456:        {
    #####:  457:          score = score + (fullDeckCount(player, 0, state) / 10);
call    0 never executed
        -:  458:        };
        -:  459:      }
        -:  460:
        -:  461:    //score from deck
    #####:  462:      for (i = 0; i < state -> discardCount[player]; i++) 
branch  0 never executed
branch  1 never executed
        -:  463:      {
    #####:  464:        if (state -> deck[player][i] == curse) 
branch  0 never executed
branch  1 never executed
        -:  465:        {
    #####:  466:          score = score - 1;
        -:  467:        };
    #####:  468:        if (state -> deck[player][i] == estate) 
branch  0 never executed
branch  1 never executed
        -:  469:        {
    #####:  470:          score = score + 1;
        -:  471:        };
    #####:  472:        if (state -> deck[player][i] == duchy) 
branch  0 never executed
branch  1 never executed
        -:  473:        {
    #####:  474:          score = score + 3;
        -:  475:        };
    #####:  476:        if (state -> deck[player][i] == province) 
branch  0 never executed
branch  1 never executed
        -:  477:        {
    #####:  478:          score = score + 6;
        -:  479:        };
    #####:  480:        if (state -> deck[player][i] == great_hall) 
branch  0 never executed
branch  1 never executed
        -:  481:        {
    #####:  482:          score = score + 1;
        -:  483:        };
    #####:  484:        if (state -> deck[player][i] == gardens) 
branch  0 never executed
branch  1 never executed
        -:  485:        {
    #####:  486:          score = score + (fullDeckCount(player, 0, state) / 10);
call    0 never executed
        -:  487:        };
        -:  488:      }
        -:  489:
    #####:  490:      return score;
        -:  491:    }
        -:  492:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  493:    int getWinners(int players[MAX_PLAYERS], struct gameState * state) 
        -:  494:    {
        -:  495:      int i;
        -:  496:      int j;
        -:  497:      int highScore;
        -:  498:      int currentPlayer;
        -:  499:
        -:  500:    //get score for each player
    #####:  501:      for (i = 0; i < MAX_PLAYERS; i++) 
branch  0 never executed
branch  1 never executed
        -:  502:      {
        -:  503:        //set unused player scores to -9999
    #####:  504:        if (i >= state -> numPlayers) 
branch  0 never executed
branch  1 never executed
        -:  505:        {
    #####:  506:          players[i] = -9999;
        -:  507:        } else {
    #####:  508:          players[i] = scoreFor(i, state);
call    0 never executed
        -:  509:        }
        -:  510:      }
        -:  511:
        -:  512:    //find highest score
    #####:  513:      j = 0;
    #####:  514:      for (i = 0; i < MAX_PLAYERS; i++) 
branch  0 never executed
branch  1 never executed
        -:  515:      {
    #####:  516:        if (players[i] > players[j]) 
branch  0 never executed
branch  1 never executed
        -:  517:        {
    #####:  518:          j = i;
        -:  519:        }
        -:  520:      }
    #####:  521:      highScore = players[j];
        -:  522:
        -:  523:    //add 1 to players who had less turns
    #####:  524:      currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  525:      for (i = 0; i < MAX_PLAYERS; i++) 
branch  0 never executed
branch  1 never executed
        -:  526:      {
    #####:  527:        if (players[i] == highScore && i > currentPlayer) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  528:        {
    #####:  529:          players[i]++;
        -:  530:        }
        -:  531:      }
        -:  532:
        -:  533:    //find new highest score
    #####:  534:      j = 0;
    #####:  535:      for (i = 0; i < MAX_PLAYERS; i++) 
branch  0 never executed
branch  1 never executed
        -:  536:      {
    #####:  537:        if (players[i] > players[j]) 
branch  0 never executed
branch  1 never executed
        -:  538:        {
    #####:  539:          j = i;
        -:  540:        }
        -:  541:      }
    #####:  542:      highScore = players[j];
        -:  543:
        -:  544:    //set winners in array to 1 and rest to 0
    #####:  545:      for (i = 0; i < MAX_PLAYERS; i++) 
branch  0 never executed
branch  1 never executed
        -:  546:      {
    #####:  547:        if (players[i] == highScore) 
branch  0 never executed
branch  1 never executed
        -:  548:        {
    #####:  549:          players[i] = 1;
        -:  550:        } else {
    #####:  551:          players[i] = 0;
        -:  552:        }
        -:  553:      }
        -:  554:
    #####:  555:      return 0;
        -:  556:    }
        -:  557:
function drawCard called 18 returned 100% blocks executed 38%
       18:  558:    int drawCard(int player, struct gameState * state) 
        -:  559:    {
        -:  560:      int count;
        -:  561:      int deckCounter;
       18:  562:    if (state -> deckCount[player] <= 0) { //Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  563:
        -:  564:        //Step 1 Shuffle the discard pile back into a deck
        -:  565:      int i;
        -:  566:        //Move discard to deck
    #####:  567:      for (i = 0; i < state -> discardCount[player]; i++) 
branch  0 never executed
branch  1 never executed
        -:  568:      {
    #####:  569:        state -> deck[player][i] = state -> discard[player][i];
    #####:  570:        state -> discard[player][i] = -1;
        -:  571:      }
        -:  572:
    #####:  573:      state -> deckCount[player] = state -> discardCount[player];
    #####:  574:        state -> discardCount[player] = 0; //Reset discard
        -:  575:
        -:  576:        //Shufffle the deck
    #####:  577:        shuffle(player, state); //Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  578:
        -:  579:        if (DEBUG) 
        -:  580:        { //Debug statements
        -:  581:          printf("Deck count now: %d\n", state -> deckCount[player]);
        -:  582:        }
        -:  583:
    #####:  584:        state -> discardCount[player] = 0;
        -:  585:
        -:  586:        //Step 2 Draw Card
    #####:  587:        count = state -> handCount[player]; //Get current player's hand count
        -:  588:
        -:  589:        if (DEBUG) 
        -:  590:        { //Debug statements
        -:  591:          printf("Current hand count: %d\n", count);
        -:  592:        }
        -:  593:
    #####:  594:        deckCounter = state -> deckCount[player]; //Create a holder for the deck count
        -:  595:
    #####:  596:        if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  597:          return -1;
        -:  598:
    #####:  599:        state -> hand[player][count] = state -> deck[player][deckCounter - 1]; //Add card to hand
    #####:  600:        state -> deckCount[player]--;
    #####:  601:        state -> handCount[player]++; //Increment hand count
        -:  602:      } 
        -:  603:      else 
        -:  604:      {
       18:  605:        int count = state -> handCount[player]; //Get current hand count for player
        -:  606:        int deckCounter;
        -:  607:        if (DEBUG) 
        -:  608:        { //Debug statements
        -:  609:          printf("Current hand count: %d\n", count);
        -:  610:        }
        -:  611:
       18:  612:        deckCounter = state -> deckCount[player]; //Create holder for the deck count
       18:  613:        state -> hand[player][count] = state -> deck[player][deckCounter - 1]; //Add card to the hand
       18:  614:        state -> deckCount[player]--;
       18:  615:        state -> handCount[player]++; //Increment hand count
        -:  616:      }
       18:  617:      return 0;
        -:  618:    }
        -:  619:
function getCost called 0 returned 0% blocks executed 0%
    #####:  620:    int getCost(int cardNumber) 
        -:  621:    {
    #####:  622:      switch (cardNumber) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  623:      {
        -:  624:        case curse:
    #####:  625:        return 0;
        -:  626:        case estate:
    #####:  627:        return 2;
        -:  628:        case duchy:
    #####:  629:        return 5;
        -:  630:        case province:
    #####:  631:        return 8;
        -:  632:        case copper:
    #####:  633:        return 0;
        -:  634:        case silver:
    #####:  635:        return 3;
        -:  636:        case gold:
    #####:  637:        return 6;
        -:  638:        case adventurer:
    #####:  639:        return 6;
        -:  640:        case council_room:
    #####:  641:        return 5;
        -:  642:        case feast:
    #####:  643:        return 4;
        -:  644:        case gardens:
    #####:  645:        return 4;
        -:  646:        case mine:
    #####:  647:        return 5;
        -:  648:        case remodel:
    #####:  649:        return 4;
        -:  650:        case smithy:
    #####:  651:        return 4;
        -:  652:        case village:
    #####:  653:        return 3;
        -:  654:        case baron:
    #####:  655:        return 4;
        -:  656:        case great_hall:
    #####:  657:        return 3;
        -:  658:        case minion:
    #####:  659:        return 5;
        -:  660:        case steward:
    #####:  661:        return 3;
        -:  662:        case tribute:
    #####:  663:        return 5;
        -:  664:        case ambassador:
    #####:  665:        return 3;
        -:  666:        case cutpurse:
    #####:  667:        return 4;
        -:  668:        case embargo:
    #####:  669:        return 2;
        -:  670:        case outpost:
    #####:  671:        return 5;
        -:  672:        case salvager:
    #####:  673:        return 4;
        -:  674:        case sea_hag:
    #####:  675:        return 4;
        -:  676:        case treasure_map:
    #####:  677:        return 4;
        -:  678:      }
        -:  679:
    #####:  680:      return -1;
        -:  681:    }
        -:  682:
        -:  683://A2 Refactor CLEAN CARD | NO BUGS
function great_hall_card called 0 returned 0% blocks executed 0%
    #####:  684:    int great_hall_card(int handPos, struct gameState * state) 
        -:  685:    {
    #####:  686:      int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  687:
    #####:  688:      drawCard(currentPlayer, state);
call    0 never executed
        -:  689:
        -:  690:    // provides another action turn
    #####:  691:      state -> numActions++;
        -:  692:
        -:  693:    // played card to discard pile
    #####:  694:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  695:      return 0;
        -:  696:    }
        -:  697:
        -:  698://A2 Refactor
function village_card called 3 returned 100% blocks executed 100%
        3:  699:    int village_card(int handPos, struct gameState * state) 
        -:  700:    {
        3:  701:      int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:  702:
        3:  703:      drawCard(currentPlayer, state);
call    0 returned 100%
        -:  704:
        -:  705:    //BUG: Should only provide 2 action turns
        3:  706:      state -> numActions = state -> numActions + 4;
        -:  707:
        -:  708:    // played card to discard pile
        3:  709:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        3:  710:      return 0;
        -:  711:    }
        -:  712:
        -:  713://A2 Refactor
function council_room_card called 0 returned 0% blocks executed 0%
    #####:  714:    int council_room_card(int handPos, struct gameState * state) 
        -:  715:    {
        -:  716:      int i;
    #####:  717:      int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  718:
        -:  719:    // draw 4 cards
    #####:  720:      for (i = 0; i < 4; i++) {
branch  0 never executed
branch  1 never executed
    #####:  721:        drawCard(currentPlayer, state);
call    0 never executed
        -:  722:      }
        -:  723:
        -:  724:    //BUG: Card provides another buy turn 
        -:  725:    //state->numBuys++;      
        -:  726:
        -:  727:    // all other players draw a card
    #####:  728:      for (i = 0; i < state -> numPlayers; i++) 
branch  0 never executed
branch  1 never executed
        -:  729:      {
    #####:  730:        if (i != currentPlayer) 
branch  0 never executed
branch  1 never executed
        -:  731:        {
    #####:  732:          drawCard(i, state);
call    0 never executed
        -:  733:        }
        -:  734:      }
        -:  735:    // played card to discard pile
    #####:  736:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  737:      return 0;
        -:  738:    }
        -:  739:
        -:  740://A2 Refactor
function adventurer_card called 0 returned 0% blocks executed 0%
    #####:  741:    int adventurer_card(struct gameState * state) 
        -:  742:    {
    #####:  743:      int z = 0;
        -:  744:      int cardDrawn;
    #####:  745:      int drawntreasure = 0;
    #####:  746:      int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  747:      int temphand[MAX_HAND];
        -:  748:
    #####:  749:    while (drawntreasure < 2) 
branch  0 never executed
branch  1 never executed
        -:  750:    { // when the deck is empty, reshuffle the discard and make it the deck
    #####:  751:      if (state -> deckCount[currentPlayer] < 1) 
branch  0 never executed
branch  1 never executed
        -:  752:      {
    #####:  753:        shuffle(currentPlayer, state);
call    0 never executed
        -:  754:      }
    #####:  755:      drawCard(currentPlayer, state);
call    0 never executed
        -:  756:        // defines the drawn card as the top card
    #####:  757:      cardDrawn = state -> hand[currentPlayer][state -> handCount[currentPlayer] - 1];
    #####:  758:      if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  759:        //drawntreasure++;
        -:  760:        //BUG: increments by 4. Should increment by 1
    #####:  761:        drawntreasure += 4;
        -:  762:      else 
        -:  763:      {
    #####:  764:        temphand[z] = cardDrawn;
        -:  765:            // removes the most recently drawn (top) card
    #####:  766:        state -> handCount[currentPlayer]--;
    #####:  767:        z++;
        -:  768:      }
        -:  769:    }
    #####:  770:    while (z - 1 >= 0) 
branch  0 never executed
branch  1 never executed
        -:  771:    {
        -:  772:        // discard all cards in play that have been drawn
    #####:  773:      state -> discard[currentPlayer][state -> discardCount[currentPlayer]++] = temphand[z - 1];
    #####:  774:      z = z - 1;
        -:  775:    }
    #####:  776:    return 0;
        -:  777:  }
        -:  778:
        -:  779://A2 Refactor
function smithy_card called 0 returned 0% blocks executed 0%
    #####:  780:  int smithy_card(int handPos, struct gameState * state) 
        -:  781:  {
        -:  782:    int i;
    #####:  783:    int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  784:    //BUG: Should only draw 3 cards  
    #####:  785:    for (i = 0; i < 4; i++) 
branch  0 never executed
branch  1 never executed
        -:  786:    {
    #####:  787:      drawCard(currentPlayer, state);
call    0 never executed
        -:  788:    }
        -:  789:    //discard card from hand
    #####:  790:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  791:    return 0;
        -:  792:  }
        -:  793:
function cardEffect called 3 returned 100% blocks executed 3%
        3:  794:  int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState * state, int handPos, int * bonus) {
        -:  795:    int i;
        -:  796:    int j;
        -:  797:    int k;
        -:  798:    int x;
        -:  799:    int index;
        3:  800:    int currentPlayer = whoseTurn(state);
call    0 returned 100%
        3:  801:    int nextPlayer = currentPlayer + 1;
        -:  802:
        3:  803:    int tributeRevealedCards[2] = 
        -:  804:    {
        -:  805:      -1, -1
        -:  806:    };
        -:  807:    int temphand[MAX_HAND]; // moved above the if statement
        -:  808:    //int drawntreasure=0; // commented out as part of A2 Refactor
        -:  809:    //int cardDrawn; // commented out as part of A2 Refactor
        -:  810:    //int z = 0;// this is the counter for the temp hand // commented out as part of A2 Refactor
        3:  811:    if (nextPlayer > (state -> numPlayers - 1)) 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  812:    {
    #####:  813:      nextPlayer = 0;
        -:  814:    }
        -:  815:
        -:  816:    //uses switch to select card and perform actions
        3:  817:    switch (card) 
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  818:    {
        -:  819:        // A2 Refactor  
        -:  820:      case adventurer:
    #####:  821:      return adventurer_card(state);
call    0 never executed
        -:  822:
        -:  823:        // A2 Refactor    
        -:  824:      case council_room:
    #####:  825:      return council_room_card(handPos, state);
call    0 never executed
        -:  826:
        -:  827:        // A2 Refactor  
        -:  828:      case smithy:
    #####:  829:      return smithy_card(handPos, state);
call    0 never executed
        -:  830:
        -:  831:        // A2 Refactor  
        -:  832:      case village:
        3:  833:      return village_card(handPos, state);
call    0 returned 100%
        -:  834:
        -:  835:        // A2 Refactor
        -:  836:      case great_hall:
    #####:  837:      return great_hall_card(handPos, state);
call    0 never executed
        -:  838:
        -:  839:      case feast:
        -:  840:        //gain card with cost up to 5
        -:  841:        //Backup hand
    #####:  842:      for (i = 0; i <= state -> handCount[currentPlayer]; i++) 
branch  0 never executed
branch  1 never executed
        -:  843:      {
    #####:  844:            temphand[i] = state -> hand[currentPlayer][i]; //Backup card
    #####:  845:            state -> hand[currentPlayer][i] = -1; //Set to nothing
        -:  846:          }
        -:  847:        //Backup hand
        -:  848:
        -:  849:        //Update Coins for Buy
    #####:  850:          updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  851:        x = 1; //Condition to loop on
    #####:  852:        while (x == 1) 
branch  0 never executed
branch  1 never executed
        -:  853:        { //Buy one card
    #####:  854:          if (supplyCount(choice1, state) <= 0) 
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  855:          {
        -:  856:            if (DEBUG)
        -:  857:              printf("None of that card left, sorry!\n");
        -:  858:
        -:  859:            if (DEBUG) 
        -:  860:            {
        -:  861:              printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  862:            }
        -:  863:          } 
    #####:  864:          else if (state -> coins < getCost(choice1)) 
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  865:          {
    #####:  866:            printf("That card is too expensive!\n");
call    0 never executed
        -:  867:
        -:  868:            if (DEBUG) 
        -:  869:            {
        -:  870:              printf("Coins: %d < %d\n", state -> coins, getCost(choice1));
        -:  871:            }
        -:  872:          } 
        -:  873:          else 
        -:  874:          {
        -:  875:            if (DEBUG) 
        -:  876:            {
        -:  877:              printf("Deck Count: %d\n", state -> handCount[currentPlayer] + state -> deckCount[currentPlayer] + state -> discardCount[currentPlayer]);
        -:  878:            }
        -:  879:
    #####:  880:                gainCard(choice1, state, 0, currentPlayer); //Gain the card
call    0 never executed
    #####:  881:                x = 0; //No more buying cards
        -:  882:
        -:  883:                if (DEBUG) 
        -:  884:                {
        -:  885:                  printf("Deck Count: %d\n", state -> handCount[currentPlayer] + state -> deckCount[currentPlayer] + state -> discardCount[currentPlayer]);
        -:  886:                }
        -:  887:
        -:  888:              }
        -:  889:            }
        -:  890:
        -:  891:        //Reset Hand
    #####:  892:            for (i = 0; i <= state -> handCount[currentPlayer]; i++) 
branch  0 never executed
branch  1 never executed
        -:  893:            {
    #####:  894:              state -> hand[currentPlayer][i] = temphand[i];
    #####:  895:              temphand[i] = -1;
        -:  896:            }
        -:  897:        //Reset Hand
        -:  898:
    #####:  899:            return 0;
        -:  900:
        -:  901:            case gardens:
    #####:  902:            return -1;
        -:  903:
        -:  904:            case mine:
    #####:  905:        j = state -> hand[currentPlayer][choice1]; //store card we will trash
        -:  906:
    #####:  907:        if (state -> hand[currentPlayer][choice1] < copper || state -> hand[currentPlayer][choice1] > gold) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  908:        {
    #####:  909:          return -1;
        -:  910:        }
        -:  911:
    #####:  912:        if (choice2 > treasure_map || choice2 < curse) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  913:        {
    #####:  914:          return -1;
        -:  915:        }
        -:  916:
    #####:  917:        if ((getCost(state -> hand[currentPlayer][choice1]) + 3) > getCost(choice2)) 
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  918:        {
    #####:  919:          return -1;
        -:  920:        }
        -:  921:
    #####:  922:        gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  923:
        -:  924:        //discard card from hand
    #####:  925:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  926:
        -:  927:        //discard trashed card
    #####:  928:        for (i = 0; i < state -> handCount[currentPlayer]; i++) 
branch  0 never executed
branch  1 never executed
        -:  929:        {
    #####:  930:          if (state -> hand[currentPlayer][i] == j) 
branch  0 never executed
branch  1 never executed
        -:  931:          {
    #####:  932:            discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  933:            break;
        -:  934:          }
        -:  935:        }
        -:  936:
    #####:  937:        return 0;
        -:  938:
        -:  939:        case remodel:
    #####:  940:        j = state -> hand[currentPlayer][choice1]; //store card we will trash
        -:  941:
    #####:  942:        if ((getCost(state -> hand[currentPlayer][choice1]) + 2) > getCost(choice2)) 
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  943:        {
    #####:  944:          return -1;
        -:  945:        }
        -:  946:
    #####:  947:        gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  948:
        -:  949:        //discard card from hand
    #####:  950:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  951:
        -:  952:        //discard trashed card
    #####:  953:        for (i = 0; i < state -> handCount[currentPlayer]; i++) 
branch  0 never executed
branch  1 never executed
        -:  954:        {
    #####:  955:          if (state -> hand[currentPlayer][i] == j) 
branch  0 never executed
branch  1 never executed
        -:  956:          {
    #####:  957:            discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  958:            break;
        -:  959:          }
        -:  960:        }
    #####:  961:        return 0;
        -:  962:
        -:  963:        case baron:
    #####:  964:        state -> numBuys++; //Increase buys by 1!
    #####:  965:        if (choice1 > 0) 
branch  0 never executed
branch  1 never executed
        -:  966:        { //Boolean true or going to discard an estate
    #####:  967:            int p = 0; //Iterator for hand!
    #####:  968:            int card_not_discarded = 1; //Flag for discard set!
    #####:  969:            while (card_not_discarded) 
branch  0 never executed
branch  1 never executed
        -:  970:            {
    #####:  971:                if (state -> hand[currentPlayer][p] == estate) 
branch  0 never executed
branch  1 never executed
        -:  972:                { //Found an estate card!
    #####:  973:                    state -> coins += 4; //Add 4 coins to the amount of coins
    #####:  974:                    state -> discard[currentPlayer][state -> discardCount[currentPlayer]] = state -> hand[currentPlayer][p];
    #####:  975:                    state -> discardCount[currentPlayer]++;
    #####:  976:                    for (; p < state -> handCount[currentPlayer]; p++) 
branch  0 never executed
branch  1 never executed
        -:  977:                    {
    #####:  978:                      state -> hand[currentPlayer][p] = state -> hand[currentPlayer][p + 1];
        -:  979:                    }
    #####:  980:                    state -> hand[currentPlayer][state -> handCount[currentPlayer]] = -1;
    #####:  981:                    state -> handCount[currentPlayer]--;
    #####:  982:                    card_not_discarded = 0; //Exit the loop
        -:  983:                  } 
    #####:  984:                  else if (p > state -> handCount[currentPlayer]) 
branch  0 never executed
branch  1 never executed
        -:  985:                  {
        -:  986:                    if (DEBUG) 
        -:  987:                    {
        -:  988:                      printf("No estate cards in your hand, invalid choice\n");
        -:  989:                      printf("Must gain an estate if there are any\n");
        -:  990:                    }
    #####:  991:                    if (supplyCount(estate, state) > 0) 
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  992:                    {
    #####:  993:                      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  994:                        state -> supplyCount[estate]--; //Decrement estates
    #####:  995:                        if (supplyCount(estate, state) == 0) 
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  996:                        {
    #####:  997:                          isGameOver(state);
call    0 never executed
        -:  998:                        }
        -:  999:                      }
    #####: 1000:                    card_not_discarded = 0; //Exit the loop
        -: 1001:                  } 
        -: 1002:                  else 
        -: 1003:                  {
    #####: 1004:                    p++; //Next card
        -: 1005:                  }
        -: 1006:                }
        -: 1007:              } 
        -: 1008:              else 
        -: 1009:              {
    #####: 1010:                if (supplyCount(estate, state) > 0) 
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1011:                {
    #####: 1012:                gainCard(estate, state, 0, currentPlayer); //Gain an estate
call    0 never executed
    #####: 1013:                state -> supplyCount[estate]--; //Decrement Estates
    #####: 1014:                if (supplyCount(estate, state) == 0) 
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1015:                {
    #####: 1016:                  isGameOver(state);
call    0 never executed
        -: 1017:                }
        -: 1018:              }
        -: 1019:            }
    #####: 1020:            return 0;
        -: 1021:
        -: 1022:            case minion:
        -: 1023:        //+1 action
    #####: 1024:            state -> numActions++;
        -: 1025:
        -: 1026:        //discard card from hand
    #####: 1027:            discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1028:
    #####: 1029:        if (choice1) //+2 coins
branch  0 never executed
branch  1 never executed
        -: 1030:        {
    #####: 1031:          state -> coins = state -> coins + 2;
    #####: 1032:        } else if (choice2) //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -: 1033:        {
        -: 1034:            //discard hand
    #####: 1035:          while (numHandCards(state) > 0) 
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1036:          {
    #####: 1037:            discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1038:          }
        -: 1039:
        -: 1040:            //draw 4
    #####: 1041:          for (i = 0; i < 4; i++) 
branch  0 never executed
branch  1 never executed
        -: 1042:          {
    #####: 1043:            drawCard(currentPlayer, state);
call    0 never executed
        -: 1044:          }
        -: 1045:
        -: 1046:            //other players discard hand and redraw if hand size > 4
    #####: 1047:          for (i = 0; i < state -> numPlayers; i++) 
branch  0 never executed
branch  1 never executed
        -: 1048:          {
    #####: 1049:            if (i != currentPlayer) 
branch  0 never executed
branch  1 never executed
        -: 1050:            {
    #####: 1051:              if (state -> handCount[i] > 4) 
branch  0 never executed
branch  1 never executed
        -: 1052:              {
        -: 1053:                        //discard hand
    #####: 1054:                while (state -> handCount[i] > 0) 
branch  0 never executed
branch  1 never executed
        -: 1055:                {
    #####: 1056:                  discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1057:                }
        -: 1058:                        //draw 4
    #####: 1059:                for (j = 0; j < 4; j++) 
branch  0 never executed
branch  1 never executed
        -: 1060:                {
    #####: 1061:                  drawCard(i, state);
call    0 never executed
        -: 1062:                }
        -: 1063:              }
        -: 1064:            }
        -: 1065:          }
        -: 1066:        }
    #####: 1067:        return 0;
        -: 1068:
        -: 1069:        case steward:
    #####: 1070:        if (choice1 == 1) 
branch  0 never executed
branch  1 never executed
        -: 1071:        {
        -: 1072:          //+2 cards
    #####: 1073:          drawCard(currentPlayer, state);
call    0 never executed
    #####: 1074:          drawCard(currentPlayer, state);
call    0 never executed
        -: 1075:        } 
    #####: 1076:        else if (choice1 == 2) 
branch  0 never executed
branch  1 never executed
        -: 1077:        {
        -: 1078:          //+2 coins
    #####: 1079:          state -> coins = state -> coins + 2;
        -: 1080:        } 
        -: 1081:        else 
        -: 1082:        {
        -: 1083:          //trash 2 cards in hand
    #####: 1084:          discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1085:          discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1086:        }
        -: 1087:
        -: 1088:        //discard card from hand
    #####: 1089:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1090:        return 0;
        -: 1091:
        -: 1092:        case tribute:
    #####: 1093:        if ((state -> discardCount[nextPlayer] + state -> deckCount[nextPlayer]) <= 1) 
branch  0 never executed
branch  1 never executed
        -: 1094:        {
    #####: 1095:          if (state -> deckCount[nextPlayer] > 0) 
branch  0 never executed
branch  1 never executed
        -: 1096:          {
    #####: 1097:            tributeRevealedCards[0] = state -> deck[nextPlayer][state -> deckCount[nextPlayer] - 1];
    #####: 1098:            state -> deckCount[nextPlayer]--;
        -: 1099:          } 
    #####: 1100:          else if (state -> discardCount[nextPlayer] > 0) 
branch  0 never executed
branch  1 never executed
        -: 1101:          {
    #####: 1102:            tributeRevealedCards[0] = state -> discard[nextPlayer][state -> discardCount[nextPlayer] - 1];
    #####: 1103:            state -> discardCount[nextPlayer]--;
        -: 1104:          } 
        -: 1105:          else 
        -: 1106:          {
        -: 1107:                //No Card to Reveal
        -: 1108:            if (DEBUG) 
        -: 1109:            {
        -: 1110:              printf("No cards to reveal\n");
        -: 1111:            }
        -: 1112:          }
        -: 1113:        } 
        -: 1114:        else 
        -: 1115:        {
    #####: 1116:          if (state -> deckCount[nextPlayer] == 0) 
branch  0 never executed
branch  1 never executed
        -: 1117:          {
    #####: 1118:            for (i = 0; i < state -> discardCount[nextPlayer]; i++) 
branch  0 never executed
branch  1 never executed
        -: 1119:            {
    #####: 1120:                    state -> deck[nextPlayer][i] = state -> discard[nextPlayer][i]; //Move to deck
    #####: 1121:                    state -> deckCount[nextPlayer]++;
    #####: 1122:                    state -> discard[nextPlayer][i] = -1;
    #####: 1123:                    state -> discardCount[nextPlayer]--;
        -: 1124:                  }
        -: 1125:
    #####: 1126:                shuffle(nextPlayer, state); //Shuffle the deck
call    0 never executed
        -: 1127:              }
    #####: 1128:              tributeRevealedCards[0] = state -> deck[nextPlayer][state -> deckCount[nextPlayer] - 1];
    #####: 1129:              state -> deck[nextPlayer][state -> deckCount[nextPlayer]--] = -1;
    #####: 1130:              state -> deckCount[nextPlayer]--;
    #####: 1131:              tributeRevealedCards[1] = state -> deck[nextPlayer][state -> deckCount[nextPlayer] - 1];
    #####: 1132:              state -> deck[nextPlayer][state -> deckCount[nextPlayer]--] = -1;
    #####: 1133:              state -> deckCount[nextPlayer]--;
        -: 1134:            }
        -: 1135:
    #####: 1136:        if (tributeRevealedCards[0] == tributeRevealedCards[1]) 
branch  0 never executed
branch  1 never executed
        -: 1137:        { //If we have a duplicate card, just drop one 
    #####: 1138:          state -> playedCards[state -> playedCardCount] = tributeRevealedCards[1];
    #####: 1139:          state -> playedCardCount++;
    #####: 1140:          tributeRevealedCards[1] = -1;
        -: 1141:        }
        -: 1142:
    #####: 1143:        for (i = 0; i <= 2; i++) 
branch  0 never executed
branch  1 never executed
        -: 1144:        {
    #####: 1145:            if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1146:            { //Treasure cards
    #####: 1147:              state -> coins += 2;
        -: 1148:            } 
    #####: 1149:            else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
        -: 1150:            { //Victory Card Found
    #####: 1151:              drawCard(currentPlayer, state);
call    0 never executed
    #####: 1152:              drawCard(currentPlayer, state);
call    0 never executed
        -: 1153:            } 
        -: 1154:            else 
        -: 1155:            { //Action Card
    #####: 1156:              state -> numActions = state -> numActions + 2;
        -: 1157:            }
        -: 1158:          }
        -: 1159:
    #####: 1160:          return 0;
        -: 1161:
        -: 1162:          case ambassador:
    #####: 1163:        j = 0; //used to check if player has enough cards to discard
        -: 1164:
    #####: 1165:        if (choice2 > 2 || choice2 < 0) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1166:        {
    #####: 1167:          return -1;
        -: 1168:        }
        -: 1169:
    #####: 1170:        if (choice1 == handPos) 
branch  0 never executed
branch  1 never executed
        -: 1171:        {
    #####: 1172:          return -1;
        -: 1173:        }
        -: 1174:
    #####: 1175:        for (i = 0; i < state -> handCount[currentPlayer]; i++) 
branch  0 never executed
branch  1 never executed
        -: 1176:        {
    #####: 1177:          if (i != handPos && i == state -> hand[currentPlayer][choice1] && i != choice1) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1178:          {
    #####: 1179:            j++;
        -: 1180:          }
        -: 1181:        }
    #####: 1182:        if (j < choice2) 
branch  0 never executed
branch  1 never executed
        -: 1183:        {
    #####: 1184:          return -1;
        -: 1185:        }
        -: 1186:
        -: 1187:        if (DEBUG)
        -: 1188:          printf("Player %d reveals card number: %d\n", currentPlayer, state -> hand[currentPlayer][choice1]);
        -: 1189:
        -: 1190:        //increase supply count for choosen card by amount being discarded
    #####: 1191:        state -> supplyCount[state -> hand[currentPlayer][choice1]] += choice2;
        -: 1192:
        -: 1193:        //each other player gains a copy of revealed card
    #####: 1194:        for (i = 0; i < state -> numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1195:          if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####: 1196:            gainCard(state -> hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1197:          }
        -: 1198:        }
        -: 1199:
        -: 1200:        //discard played card from hand
    #####: 1201:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1202:
        -: 1203:        //trash copies of cards returned to supply
    #####: 1204:        for (j = 0; j < choice2; j++) {
branch  0 never executed
branch  1 never executed
    #####: 1205:          for (i = 0; i < state -> handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1206:            if (state -> hand[currentPlayer][i] == state -> hand[currentPlayer][choice1]) {
branch  0 never executed
branch  1 never executed
    #####: 1207:              discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1208:              break;
        -: 1209:            }
        -: 1210:          }
        -: 1211:        }
        -: 1212:
    #####: 1213:        return 0;
        -: 1214:
        -: 1215:        case cutpurse:
        -: 1216:
    #####: 1217:        updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1218:        for (i = 0; i < state -> numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1219:          if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####: 1220:            for (j = 0; j < state -> handCount[i]; j++) {
branch  0 never executed
branch  1 never executed
    #####: 1221:              if (state -> hand[i][j] == copper) {
branch  0 never executed
branch  1 never executed
    #####: 1222:                discardCard(j, i, state, 0);
call    0 never executed
    #####: 1223:                break;
        -: 1224:              }
    #####: 1225:              if (j == state -> handCount[i]) {
branch  0 never executed
branch  1 never executed
    #####: 1226:                for (k = 0; k < state -> handCount[i]; k++) {
branch  0 never executed
branch  1 never executed
        -: 1227:                  if (DEBUG)
        -: 1228:                    printf("Player %d reveals card number %d\n", i, state -> hand[i][k]);
        -: 1229:                }
    #####: 1230:                break;
        -: 1231:              }
        -: 1232:            }
        -: 1233:
        -: 1234:          }
        -: 1235:
        -: 1236:        }
        -: 1237:
        -: 1238:        //discard played card from hand
    #####: 1239:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1240:
    #####: 1241:        return 0;
        -: 1242:
        -: 1243:        case embargo:
        -: 1244:        //+2 Coins
    #####: 1245:        state -> coins = state -> coins + 2;
        -: 1246:
        -: 1247:        //see if selected pile is in play
    #####: 1248:        if (state -> supplyCount[choice1] == -1) {
branch  0 never executed
branch  1 never executed
    #####: 1249:          return -1;
        -: 1250:        }
        -: 1251:
        -: 1252:        //add embargo token to selected supply pile
    #####: 1253:        state -> embargoTokens[choice1]++;
        -: 1254:
        -: 1255:        //trash card
    #####: 1256:        discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1257:        return 0;
        -: 1258:
        -: 1259:        case outpost:
        -: 1260:        //set outpost flag
    #####: 1261:        state -> outpostPlayed++;
        -: 1262:
        -: 1263:        //discard card
    #####: 1264:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1265:        return 0;
        -: 1266:
        -: 1267:        case salvager:
        -: 1268:        //+1 buy
    #####: 1269:        state -> numBuys++;
        -: 1270:
    #####: 1271:        if (choice1) {
branch  0 never executed
branch  1 never executed
        -: 1272:            //gain coins equal to trashed card
    #####: 1273:          state -> coins = state -> coins + getCost(handCard(choice1, state));
call    0 never executed
call    1 never executed
        -: 1274:            //trash card
    #####: 1275:          discardCard(choice1, currentPlayer, state, 1);
call    0 never executed
        -: 1276:        }
        -: 1277:
        -: 1278:        //discard card
    #####: 1279:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1280:        return 0;
        -: 1281:
        -: 1282:        case sea_hag:
    #####: 1283:        for (i = 0; i < state -> numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1284:          if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####: 1285:            state -> discard[i][state -> discardCount[i]] = state -> deck[i][state -> deckCount[i]--];
    #####: 1286:            state -> deckCount[i]--;
    #####: 1287:            state -> discardCount[i]++;
    #####: 1288:                state -> deck[i][state -> deckCount[i]--] = curse; //Top card now a curse
        -: 1289:              }
        -: 1290:            }
    #####: 1291:            return 0;
        -: 1292:
        -: 1293:            case treasure_map:
        -: 1294:        //search hand for another treasure_map
    #####: 1295:            index = -1;
    #####: 1296:            for (i = 0; i < state -> handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1297:              if (state -> hand[currentPlayer][i] == treasure_map && i != handPos) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1298:                index = i;
    #####: 1299:                break;
        -: 1300:              }
        -: 1301:            }
    #####: 1302:            if (index > -1) {
branch  0 never executed
branch  1 never executed
        -: 1303:            //trash both treasure cards
    #####: 1304:              discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1305:              discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1306:
        -: 1307:            //gain 4 Gold cards
    #####: 1308:              for (i = 0; i < 4; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1309:                gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1310:              }
        -: 1311:
        -: 1312:            //return success
    #####: 1313:              return 1;
        -: 1314:            }
        -: 1315:
        -: 1316:        //no second treasure_map found in hand
    #####: 1317:            return -1;
        -: 1318:          }
        -: 1319:
    #####: 1320:          return -1;
        -: 1321:        }
        -: 1322:
function discardCard called 3 returned 100% blocks executed 78%
        3: 1323:        int discardCard(int handPos, int currentPlayer, struct gameState * state, int trashFlag) {
        -: 1324:
        -: 1325:    //if card is not trashed, added to Played pile 
        3: 1326:          if (trashFlag < 1) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1327:        //add card to played pile
        3: 1328:            state -> playedCards[state -> playedCardCount] = state -> hand[currentPlayer][handPos];
        3: 1329:            state -> playedCardCount++;
        -: 1330:          }
        -: 1331:
        -: 1332:    //set played card to -1
        3: 1333:          state -> hand[currentPlayer][handPos] = -1;
        -: 1334:
        -: 1335:    //remove card from player's hand
        3: 1336:    if (handPos == (state -> handCount[currentPlayer] - 1)) //last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1337:    {
        -: 1338:        //reduce number of cards in hand
    #####: 1339:      state -> handCount[currentPlayer]--;
        3: 1340:    } else if (state -> handCount[currentPlayer] == 1) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1341:    {
        -: 1342:        //reduce number of cards in hand
    #####: 1343:      state -> handCount[currentPlayer]--;
        -: 1344:    } else {
        -: 1345:        //replace discarded card with last card in hand
        3: 1346:      state -> hand[currentPlayer][handPos] = state -> hand[currentPlayer][(state -> handCount[currentPlayer] - 1)];
        -: 1347:        //set last card to -1
        3: 1348:      state -> hand[currentPlayer][state -> handCount[currentPlayer] - 1] = -1;
        -: 1349:        //reduce number of cards in hand
        3: 1350:      state -> handCount[currentPlayer]--;
        -: 1351:    }
        -: 1352:
        3: 1353:    return 0;
        -: 1354:  }
        -: 1355:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1356:  int gainCard(int supplyPos, struct gameState * state, int toFlag, int player) {
        -: 1357:    //Note: supplyPos is enum of choosen card
        -: 1358:
        -: 1359:    //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1360:    if (supplyCount(supplyPos, state) < 1) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1361:      return -1;
        -: 1362:    }
        -: 1363:
        -: 1364:    //added card for [whoseTurn] current player:
        -: 1365:    // toFlag = 0 : add to discard
        -: 1366:    // toFlag = 1 : add to deck
        -: 1367:    // toFlag = 2 : add to hand
        -: 1368:
    #####: 1369:    if (toFlag == 1) {
branch  0 never executed
branch  1 never executed
    #####: 1370:      state -> deck[player][state -> deckCount[player]] = supplyPos;
    #####: 1371:      state -> deckCount[player]++;
    #####: 1372:    } else if (toFlag == 2) {
branch  0 never executed
branch  1 never executed
    #####: 1373:      state -> hand[player][state -> handCount[player]] = supplyPos;
    #####: 1374:      state -> handCount[player]++;
        -: 1375:    } else {
    #####: 1376:      state -> discard[player][state -> discardCount[player]] = supplyPos;
    #####: 1377:      state -> discardCount[player]++;
        -: 1378:    }
        -: 1379:
        -: 1380:    //decrease number in supply pile
    #####: 1381:    state -> supplyCount[supplyPos]--;
        -: 1382:
    #####: 1383:    return 0;
        -: 1384:  }
        -: 1385:
function updateCoins called 3 returned 100% blocks executed 82%
        3: 1386:  int updateCoins(int player, struct gameState * state, int bonus) {
        -: 1387:    int i;
        -: 1388:
        -: 1389:    //reset coin count
        3: 1390:    state -> coins = 0;
        -: 1391:
        -: 1392:    //add coins for each Treasure card in player's hand
       18: 1393:    for (i = 0; i < state -> handCount[player]; i++) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       15: 1394:      if (state -> hand[player][i] == copper) {
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
       10: 1395:        state -> coins += 1;
        5: 1396:      } else if (state -> hand[player][i] == silver) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1397:        state -> coins += 2;
        5: 1398:      } else if (state -> hand[player][i] == gold) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1399:        state -> coins += 3;
        -: 1400:      }
        -: 1401:    }
        -: 1402:
        -: 1403:    //add bonus
        3: 1404:    state -> coins += bonus;
        -: 1405:
        3: 1406:    return 0;
        -: 1407:  }
        -: 1408:
        -: 1409://end of dominion.c
-------------------------Testing: Gardens-------------------------

Function status check:	ERROR: -1 is not equal to 0!

Num of Hand cards decreases by 1 (after removing the played card):	ERROR: 0 is not equal to 1!

Score for player 0 increases by 1:	ERROR: 0 is not equal to 1!

Test other state variables that shouldn't change:
supplyCount[0]:	PASSED
embargoTokens[0]:	PASSED
supplyCount[1]:	PASSED
embargoTokens[1]:	PASSED
supplyCount[2]:	PASSED
embargoTokens[2]:	PASSED
supplyCount[3]:	PASSED
embargoTokens[3]:	PASSED
supplyCount[4]:	PASSED
embargoTokens[4]:	PASSED
supplyCount[5]:	PASSED
embargoTokens[5]:	PASSED
supplyCount[6]:	PASSED
embargoTokens[6]:	PASSED
supplyCount[7]:	PASSED
embargoTokens[7]:	PASSED
supplyCount[8]:	PASSED
embargoTokens[8]:	PASSED
supplyCount[9]:	PASSED
embargoTokens[9]:	PASSED
supplyCount[10]:	PASSED
embargoTokens[10]:	PASSED
supplyCount[11]:	PASSED
embargoTokens[11]:	PASSED
supplyCount[12]:	PASSED
embargoTokens[12]:	PASSED
supplyCount[13]:	PASSED
embargoTokens[13]:	PASSED
supplyCount[14]:	PASSED
embargoTokens[14]:	PASSED
supplyCount[15]:	PASSED
embargoTokens[15]:	PASSED
supplyCount[16]:	PASSED
embargoTokens[16]:	PASSED
supplyCount[17]:	PASSED
embargoTokens[17]:	PASSED
supplyCount[18]:	PASSED
embargoTokens[18]:	PASSED
supplyCount[19]:	PASSED
embargoTokens[19]:	PASSED
supplyCount[20]:	PASSED
embargoTokens[20]:	PASSED
supplyCount[21]:	PASSED
embargoTokens[21]:	PASSED
supplyCount[22]:	PASSED
embargoTokens[22]:	PASSED
supplyCount[23]:	PASSED
embargoTokens[23]:	PASSED
supplyCount[24]:	PASSED
embargoTokens[24]:	PASSED
supplyCount[25]:	PASSED
embargoTokens[25]:	PASSED
supplyCount[26]:	PASSED
embargoTokens[26]:	PASSED
numActions:	PASSED
numBuys:	PASSED
Other player #1: 
handCount:	PASSED
deckCount:	PASSED
discardCount:	PASSED

Function status check:	ERROR: -1 is not equal to 0!

Num of Hand cards decreases by 1 (after removing the played card):	ERROR: 0 is not equal to 1!

Score for player 0 increases by 1:	ERROR: 0 is not equal to 1!

Test other state variables that shouldn't change:
supplyCount[0]:	PASSED
embargoTokens[0]:	PASSED
supplyCount[1]:	PASSED
embargoTokens[1]:	PASSED
supplyCount[2]:	PASSED
embargoTokens[2]:	PASSED
supplyCount[3]:	PASSED
embargoTokens[3]:	PASSED
supplyCount[4]:	PASSED
embargoTokens[4]:	PASSED
supplyCount[5]:	PASSED
embargoTokens[5]:	PASSED
supplyCount[6]:	PASSED
embargoTokens[6]:	PASSED
supplyCount[7]:	PASSED
embargoTokens[7]:	PASSED
supplyCount[8]:	PASSED
embargoTokens[8]:	PASSED
supplyCount[9]:	PASSED
embargoTokens[9]:	PASSED
supplyCount[10]:	PASSED
embargoTokens[10]:	PASSED
supplyCount[11]:	PASSED
embargoTokens[11]:	PASSED
supplyCount[12]:	PASSED
embargoTokens[12]:	PASSED
supplyCount[13]:	PASSED
embargoTokens[13]:	PASSED
supplyCount[14]:	PASSED
embargoTokens[14]:	PASSED
supplyCount[15]:	PASSED
embargoTokens[15]:	PASSED
supplyCount[16]:	PASSED
embargoTokens[16]:	PASSED
supplyCount[17]:	PASSED
embargoTokens[17]:	PASSED
supplyCount[18]:	PASSED
embargoTokens[18]:	PASSED
supplyCount[19]:	PASSED
embargoTokens[19]:	PASSED
supplyCount[20]:	PASSED
embargoTokens[20]:	PASSED
supplyCount[21]:	PASSED
embargoTokens[21]:	PASSED
supplyCount[22]:	PASSED
embargoTokens[22]:	PASSED
supplyCount[23]:	PASSED
embargoTokens[23]:	PASSED
supplyCount[24]:	PASSED
embargoTokens[24]:	PASSED
supplyCount[25]:	PASSED
embargoTokens[25]:	PASSED
supplyCount[26]:	PASSED
embargoTokens[26]:	PASSED
numActions:	PASSED
numBuys:	PASSED
Other player #1: 
handCount:	PASSED
deckCount:	PASSED
discardCount:	PASSED
Other player #2: 
handCount:	PASSED
deckCount:	PASSED
discardCount:	PASSED

Function status check:	ERROR: -1 is not equal to 0!

Num of Hand cards decreases by 1 (after removing the played card):	ERROR: 0 is not equal to 1!

Score for player 0 increases by 1:	ERROR: 0 is not equal to 1!

Test other state variables that shouldn't change:
supplyCount[0]:	PASSED
embargoTokens[0]:	PASSED
supplyCount[1]:	PASSED
embargoTokens[1]:	PASSED
supplyCount[2]:	PASSED
embargoTokens[2]:	PASSED
supplyCount[3]:	PASSED
embargoTokens[3]:	PASSED
supplyCount[4]:	PASSED
embargoTokens[4]:	PASSED
supplyCount[5]:	PASSED
embargoTokens[5]:	PASSED
supplyCount[6]:	PASSED
embargoTokens[6]:	PASSED
supplyCount[7]:	PASSED
embargoTokens[7]:	PASSED
supplyCount[8]:	PASSED
embargoTokens[8]:	PASSED
supplyCount[9]:	PASSED
embargoTokens[9]:	PASSED
supplyCount[10]:	PASSED
embargoTokens[10]:	PASSED
supplyCount[11]:	PASSED
embargoTokens[11]:	PASSED
supplyCount[12]:	PASSED
embargoTokens[12]:	PASSED
supplyCount[13]:	PASSED
embargoTokens[13]:	PASSED
supplyCount[14]:	PASSED
embargoTokens[14]:	PASSED
supplyCount[15]:	PASSED
embargoTokens[15]:	PASSED
supplyCount[16]:	PASSED
embargoTokens[16]:	PASSED
supplyCount[17]:	PASSED
embargoTokens[17]:	PASSED
supplyCount[18]:	PASSED
embargoTokens[18]:	PASSED
supplyCount[19]:	PASSED
embargoTokens[19]:	PASSED
supplyCount[20]:	PASSED
embargoTokens[20]:	PASSED
supplyCount[21]:	PASSED
embargoTokens[21]:	PASSED
supplyCount[22]:	PASSED
embargoTokens[22]:	PASSED
supplyCount[23]:	PASSED
embargoTokens[23]:	PASSED
supplyCount[24]:	PASSED
embargoTokens[24]:	PASSED
supplyCount[25]:	PASSED
embargoTokens[25]:	PASSED
supplyCount[26]:	PASSED
embargoTokens[26]:	PASSED
numActions:	PASSED
numBuys:	PASSED
Other player #1: 
handCount:	PASSED
deckCount:	PASSED
discardCount:	PASSED
Other player #2: 
handCount:	PASSED
deckCount:	PASSED
discardCount:	PASSED
Other player #3: 
handCount:	PASSED
deckCount:	PASSED
discardCount:	PASSED

Total Number of Failures: 9

Function 'updateCoins'
Lines executed:81.82% of 11
Branches executed:100.00% of 8
Taken at least once:75.00% of 8
No calls

Function 'gainCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 1

Function 'discardCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'cardEffect'
Lines executed:3.40% of 206
Branches executed:12.85% of 179
Taken at least once:1.12% of 179
Calls executed:1.72% of 58

Function 'smithy_card'
Lines executed:0.00% of 6
Branches executed:0.00% of 2
Taken at least once:0.00% of 2
Calls executed:0.00% of 3

Function 'adventurer_card'
Lines executed:0.00% of 18
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
Calls executed:0.00% of 3

Function 'council_room_card'
Lines executed:0.00% of 9
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 4

Function 'village_card'
Lines executed:0.00% of 6
No branches
Calls executed:0.00% of 3

Function 'great_hall_card'
Lines executed:0.00% of 6
No branches
Calls executed:0.00% of 3

Function 'getCost'
Lines executed:0.00% of 30
Branches executed:0.00% of 28
Taken at least once:0.00% of 28
No calls

Function 'drawCard'
Lines executed:36.36% of 22
Branches executed:33.33% of 6
Taken at least once:16.67% of 6
Calls executed:0.00% of 1

Function 'getWinners'
Lines executed:0.00% of 24
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
Calls executed:0.00% of 2

Function 'scoreFor'
Lines executed:33.33% of 42
Branches executed:42.86% of 42
Taken at least once:28.57% of 42
Calls executed:33.33% of 3

Function 'isGameOver'
Lines executed:0.00% of 10
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'endTurn'
Lines executed:0.00% of 20
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'whoseTurn'
Lines executed:100.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:88.89% of 9
Branches executed:83.33% of 12
Taken at least once:58.33% of 12
No calls

Function 'supplyCount'
Lines executed:0.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 3
No branches
Calls executed:0.00% of 1

Function 'numHandCards'
Lines executed:0.00% of 2
No branches
Calls executed:0.00% of 1

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 4

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
Calls executed:0.00% of 3

Function 'shuffle'
Lines executed:93.75% of 16
Branches executed:100.00% of 8
Taken at least once:87.50% of 8
Calls executed:100.00% of 2

Function 'initializeGame'
Lines executed:95.16% of 62
Branches executed:100.00% of 46
Taken at least once:91.30% of 46
Calls executed:100.00% of 5

Function 'kingdomCards'
Lines executed:0.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:0.00% of 3
No branches
No calls

Function 'compare'
Lines executed:83.33% of 6
Branches executed:100.00% of 4
Taken at least once:75.00% of 4
No calls

File 'dominion.c'
Lines executed:21.86% of 581
Branches executed:28.54% of 417
Taken at least once:19.18% of 417
Calls executed:9.00% of 100
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h> 
        -:    5:#include <math.h> 
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 135 returned 100% blocks executed 83%
      135:    8:int compare(const void * a,
        -:    9:  const void * b) {
      135:   10:  if ( * (int * ) a > * (int * ) b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   11:    return 1;
      135:   12:  if ( * (int * ) a < * (int * ) b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
       36:   13:    return -1;
       99:   14:  return 0;
        -:   15:}
        -:   16:
function newGame called 0 returned 0% blocks executed 0%
    #####:   17:struct gameState * newGame() {
    #####:   18:  struct gameState * g = malloc(sizeof(struct gameState));
    #####:   19:  return g;
        -:   20:}
        -:   21:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   22:int * kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   23:  int k8, int k9, int k10) {
    #####:   24:  int * k = malloc(10 * sizeof(int));
    #####:   25:  k[0] = k1;
    #####:   26:  k[1] = k2;
    #####:   27:  k[2] = k3;
    #####:   28:  k[3] = k4;
    #####:   29:  k[4] = k5;
    #####:   30:  k[5] = k6;
    #####:   31:  k[6] = k7;
    #####:   32:  k[7] = k8;
    #####:   33:  k[8] = k9;
    #####:   34:  k[9] = k10;
    #####:   35:  return k;
        -:   36:}
        -:   37:
function initializeGame called 3 returned 100% blocks executed 95%
        3:   38:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   39:  struct gameState * state) {
        -:   40:
        -:   41:  int i;
        -:   42:  int j;
        -:   43:  int it;
        -:   44:    //set up random number generator
        3:   45:  SelectStream(1);
call    0 returned 100%
        3:   46:  PutSeed((long) randomSeed);
call    0 returned 100%
        -:   47:
        -:   48:    //check number of players
        3:   49:  if (numPlayers > MAX_PLAYERS || numPlayers < 2) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:   50:    return -1;
        -:   51:  }
        -:   52:
        -:   53:    //set number of players
        3:   54:  state -> numPlayers = numPlayers;
        -:   55:
        -:   56:    //check selected kingdom cards are different
       33:   57:  for (i = 0; i < 10; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      330:   58:    for (j = 0; j < 10; j++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      300:   59:      if (j != i && kingdomCards[j] == kingdomCards[i]) {
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:   60:        return -1;
        -:   61:      }
        -:   62:    }
        -:   63:  }
        -:   64:
        -:   65:    //initialize supply
        -:   66:    ///////////////////////////////
        -:   67:
        -:   68:    //set number of Curse cards
        3:   69:  if (numPlayers == 2) {
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        1:   70:    state -> supplyCount[curse] = 10;
        2:   71:  } else if (numPlayers == 3) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        1:   72:    state -> supplyCount[curse] = 20;
        -:   73:  } else {
        1:   74:    state -> supplyCount[curse] = 30;
        -:   75:  }
        -:   76:
        -:   77:    //set number of Victory cards
        3:   78:  if (numPlayers == 2) {
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        1:   79:    state -> supplyCount[estate] = 8;
        1:   80:    state -> supplyCount[duchy] = 8;
        1:   81:    state -> supplyCount[province] = 8;
        -:   82:  } else {
        2:   83:    state -> supplyCount[estate] = 12;
        2:   84:    state -> supplyCount[duchy] = 12;
        2:   85:    state -> supplyCount[province] = 12;
        -:   86:  }
        -:   87:
        -:   88:    //set number of Treasure cards
        3:   89:  state -> supplyCount[copper] = 60 - (7 * numPlayers);
        3:   90:  state -> supplyCount[silver] = 40;
        3:   91:  state -> supplyCount[gold] = 30;
        -:   92:
        -:   93:    //set number of Kingdom cards
       63:   94:    for (i = adventurer; i <= treasure_map; i++) //loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:   95:    {
      495:   96:        for (j = 0; j < 10; j++) //loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:   97:        {
      465:   98:          if (kingdomCards[j] == i) {
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:   99:                //check if card is a 'Victory' Kingdom card
       30:  100:            if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens) {
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
       12:  101:              if (numPlayers == 2) {
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        2:  102:                state -> supplyCount[i] = 8;
        -:  103:              } else {
        4:  104:                state -> supplyCount[i] = 12;
        -:  105:              }
        -:  106:            } else {
       24:  107:              state -> supplyCount[i] = 10;
        -:  108:            }
       30:  109:            break;
        -:  110:            } else //card is not in the set choosen for the game
        -:  111:            {
      435:  112:              state -> supplyCount[i] = -1;
        -:  113:            }
        -:  114:          }
        -:  115:
        -:  116:        }
        -:  117:
        -:  118:    ////////////////////////
        -:  119:    //supply intilization complete
        -:  120:
        -:  121:    //set player decks
       12:  122:        for (i = 0; i < numPlayers; i++) {
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        9:  123:          state -> deckCount[i] = 0;
       36:  124:          for (j = 0; j < 3; j++) {
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
       27:  125:            state -> deck[i][j] = estate;
       27:  126:            state -> deckCount[i]++;
        -:  127:          }
       72:  128:          for (j = 3; j < 10; j++) {
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
       63:  129:            state -> deck[i][j] = copper;
       63:  130:            state -> deckCount[i]++;
        -:  131:          }
        -:  132:        }
        -:  133:
        -:  134:    //shuffle player decks
       12:  135:        for (i = 0; i < numPlayers; i++) {
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        9:  136:          if (shuffle(i, state) < 0) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  137:            return -1;
        -:  138:          }
        -:  139:        }
        -:  140:
        -:  141:    //draw player hands
       12:  142:        for (i = 0; i < numPlayers; i++) {
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  143:        //initialize hand size to zero
        9:  144:          state -> handCount[i] = 0;
        9:  145:          state -> discardCount[i] = 0;
        -:  146:        //draw 5 cards
        -:  147:        // for (j = 0; j < 5; j++)
        -:  148:        //  {
        -:  149:        //    drawCard(i, state);
        -:  150:        //  }
        -:  151:        }
        -:  152:
        -:  153:    //set embargo tokens to 0 for all supply piles
       84:  154:        for (i = 0; i <= treasure_map; i++) {
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
       81:  155:          state -> embargoTokens[i] = 0;
        -:  156:        }
        -:  157:
        -:  158:    //initialize first player's turn
        3:  159:        state -> outpostPlayed = 0;
        3:  160:        state -> phase = 0;
        3:  161:        state -> numActions = 1;
        3:  162:        state -> numBuys = 1;
        3:  163:        state -> playedCardCount = 0;
        3:  164:        state -> whoseTurn = 0;
        3:  165:        state -> handCount[state -> whoseTurn] = 0;
        -:  166:    //int it; move to top
        -:  167:
        -:  168:    //Moved draw cards to here, only drawing at the start of a turn
       18:  169:        for (it = 0; it < 5; it++) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       15:  170:          drawCard(state -> whoseTurn, state);
call    0 returned 100%
        -:  171:        }
        -:  172:
        3:  173:        updateCoins(state -> whoseTurn, state, 0);
call    0 returned 100%
        -:  174:
        3:  175:        return 0;
        -:  176:      }
        -:  177:
function shuffle called 9 returned 100% blocks executed 94%
        9:  178:      int shuffle(int player, struct gameState * state) {
        -:  179:
        -:  180:        int newDeck[MAX_DECK];
        9:  181:        int newDeckPos = 0;
        -:  182:        int card;
        -:  183:        int i;
        -:  184:
        9:  185:        if (state -> deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  186:          return -1;
        9:  187:        qsort((void * )(state -> deck[player]), state -> deckCount[player], sizeof(int), compare);
call    0 returned 100%
        -:  188:    /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  189:
      108:  190:        while (state -> deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       90:  191:          card = floor(Random() * state -> deckCount[player]);
call    0 returned 100%
       90:  192:          newDeck[newDeckPos] = state -> deck[player][card];
       90:  193:          newDeckPos++;
      282:  194:          for (i = card; i < state -> deckCount[player] - 1; i++) {
branch  0 taken 68%
branch  1 taken 32% (fallthrough)
      192:  195:            state -> deck[player][i] = state -> deck[player][i + 1];
        -:  196:          }
       90:  197:          state -> deckCount[player]--;
        -:  198:        }
       99:  199:        for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       90:  200:          state -> deck[player][i] = newDeck[i];
       90:  201:          state -> deckCount[player]++;
        -:  202:        }
        -:  203:
        9:  204:        return 0;
        -:  205:      }
        -:  206:
function playCard called 0 returned 0% blocks executed 0%
    #####:  207:      int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState * state) {
        -:  208:        int card;
    #####:  209:    int coin_bonus = 0; //tracks coins gain from actions
        -:  210:
        -:  211:    //check if it is the right phase
    #####:  212:    if (state -> phase != 0) {
branch  0 never executed
branch  1 never executed
    #####:  213:      return -1;
        -:  214:    }
        -:  215:
        -:  216:    //check if player has enough actions
    #####:  217:    if (state -> numActions < 1) {
branch  0 never executed
branch  1 never executed
    #####:  218:      return -1;
        -:  219:    }
        -:  220:
        -:  221:    //get card played
    #####:  222:    card = handCard(handPos, state);
call    0 never executed
        -:  223:
        -:  224:    //check if selected card is an action
    #####:  225:    if (card < adventurer || card > treasure_map) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  226:      return -1;
        -:  227:    }
        -:  228:
        -:  229:    //play card
    #####:  230:    if (cardEffect(card, choice1, choice2, choice3, state, handPos, & coin_bonus) < 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  231:      return -1;
        -:  232:    }
        -:  233:
        -:  234:    //reduce number of actions
    #####:  235:    state -> numActions--;
        -:  236:
        -:  237:    //update coins (Treasure cards may be added with card draws)
    #####:  238:    updateCoins(state -> whoseTurn, state, coin_bonus);
call    0 never executed
        -:  239:
    #####:  240:    return 0;
        -:  241:  }
        -:  242:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  243:  int buyCard(int supplyPos, struct gameState * state) {
        -:  244:    int who;
        -:  245:    if (DEBUG) {
        -:  246:      printf("Entering buyCard...\n");
        -:  247:    }
        -:  248:
        -:  249:    // I don't know what to do about the phase thing.
        -:  250:
    #####:  251:    who = state -> whoseTurn;
        -:  252:
    #####:  253:    if (state -> numBuys < 1) {
branch  0 never executed
branch  1 never executed
        -:  254:      if (DEBUG)
        -:  255:        printf("You do not have any buys left\n");
    #####:  256:      return -1;
    #####:  257:    } else if (supplyCount(supplyPos, state) < 1) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  258:      if (DEBUG)
        -:  259:        printf("There are not any of that type of card left\n");
    #####:  260:      return -1;
    #####:  261:    } else if (state -> coins < getCost(supplyPos)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  262:      if (DEBUG)
        -:  263:        printf("You do not have enough money to buy that. You have %d coins.\n", state -> coins);
    #####:  264:      return -1;
        -:  265:    } else {
    #####:  266:      state -> phase = 1;
        -:  267:        //state->supplyCount[supplyPos]--;
    #####:  268:        gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  269:
    #####:  270:        state -> coins = (state -> coins) - (getCost(supplyPos));
call    0 never executed
    #####:  271:        state -> numBuys--;
        -:  272:        if (DEBUG)
        -:  273:          printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state -> numBuys, state -> coins);
        -:  274:      }
        -:  275:
        -:  276:    //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  277:    //state->discardCount[who]++;
        -:  278:
    #####:  279:      return 0;
        -:  280:    }
        -:  281:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  282:    int numHandCards(struct gameState * state) 
        -:  283:    {
    #####:  284:      return state -> handCount[whoseTurn(state)];
call    0 never executed
        -:  285:    }
        -:  286:
function handCard called 0 returned 0% blocks executed 0%
    #####:  287:    int handCard(int handPos, struct gameState * state) 
        -:  288:    {
    #####:  289:      int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  290:      return state -> hand[currentPlayer][handPos];
        -:  291:    }
        -:  292:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  293:    int supplyCount(int card, struct gameState * state) 
        -:  294:    {
    #####:  295:      return state -> supplyCount[card];
        -:  296:    }
        -:  297:
function fullDeckCount called 6 returned 100% blocks executed 71%
        6:  298:    int fullDeckCount(int player, int card, struct gameState * state) 
        -:  299:    {
        -:  300:      int i;
        6:  301:      int count = 0;
        -:  302:
       36:  303:      for (i = 0; i < state -> deckCount[player]; i++) 
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:  304:      {
       30:  305:        if (state -> deck[player][i] == card) count++;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  306:      }
        -:  307:
       36:  308:      for (i = 0; i < state -> handCount[player]; i++) 
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:  309:      {
       30:  310:        if (state -> hand[player][i] == card) count++;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  311:      }
        -:  312:
        6:  313:      for (i = 0; i < state -> discardCount[player]; i++) 
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
        -:  314:      {
    #####:  315:        if (state -> discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  316:      }
        -:  317:
        6:  318:      return count;
        -:  319:    }
        -:  320:
function whoseTurn called 3 returned 100% blocks executed 100%
        3:  321:    int whoseTurn(struct gameState * state) 
        -:  322:    {
        3:  323:      return state -> whoseTurn;
        -:  324:    }
        -:  325:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  326:    int endTurn(struct gameState * state) 
        -:  327:    {
        -:  328:      int k;
        -:  329:      int i;
    #####:  330:      int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  331:
        -:  332:    //Discard hand
    #####:  333:      for (i = 0; i < state -> handCount[currentPlayer]; i++) 
branch  0 never executed
branch  1 never executed
        -:  334:      {
    #####:  335:        state -> discard[currentPlayer][state -> discardCount[currentPlayer]++] = state -> hand[currentPlayer][i]; //Discard
    #####:  336:        state -> hand[currentPlayer][i] = -1; //Set card to -1
        -:  337:      }
    #####:  338:    state -> handCount[currentPlayer] = 0; //Reset hand count
        -:  339:
        -:  340:    //Code for determining the player
    #####:  341:    if (currentPlayer < (state -> numPlayers - 1)) 
branch  0 never executed
branch  1 never executed
        -:  342:    {
    #####:  343:        state -> whoseTurn = currentPlayer + 1; //Still safe to increment
        -:  344:      } 
        -:  345:      else 
        -:  346:      {
    #####:  347:        state -> whoseTurn = 0; //Max player has been reached, loop back around to player 1
        -:  348:      }
        -:  349:
    #####:  350:      state -> outpostPlayed = 0;
    #####:  351:      state -> phase = 0;
    #####:  352:      state -> numActions = 1;
    #####:  353:      state -> coins = 0;
    #####:  354:      state -> numBuys = 1;
    #####:  355:      state -> playedCardCount = 0;
    #####:  356:      state -> handCount[state -> whoseTurn] = 0;
        -:  357:
        -:  358:    //int k; move to top
        -:  359:    //Next player draws hand
    #####:  360:      for (k = 0; k < 5; k++) 
branch  0 never executed
branch  1 never executed
        -:  361:      {
    #####:  362:        drawCard(state -> whoseTurn, state); //Draw a card
call    0 never executed
        -:  363:      }
        -:  364:
        -:  365:    //Update money
    #####:  366:      updateCoins(state -> whoseTurn, state, 0);
call    0 never executed
        -:  367:
    #####:  368:      return 0;
        -:  369:    }
        -:  370:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  371:    int isGameOver(struct gameState * state) 
        -:  372:    {
        -:  373:      int i;
        -:  374:      int j;
        -:  375:
        -:  376:    //if stack of Province cards is empty, the game ends
    #####:  377:      if (state -> supplyCount[province] == 0) 
branch  0 never executed
branch  1 never executed
        -:  378:      {
    #####:  379:        return 1;
        -:  380:      }
        -:  381:
        -:  382:    //if three supply pile are at 0, the game ends
    #####:  383:      j = 0;
    #####:  384:      for (i = 0; i < 25; i++) 
branch  0 never executed
branch  1 never executed
        -:  385:      {
    #####:  386:        if (state -> supplyCount[i] == 0) 
branch  0 never executed
branch  1 never executed
        -:  387:        {
    #####:  388:          j++;
        -:  389:        }
        -:  390:      }
    #####:  391:      if (j >= 3) 
branch  0 never executed
branch  1 never executed
        -:  392:      {
    #####:  393:        return 1;
        -:  394:      }
        -:  395:
    #####:  396:      return 0;
        -:  397:    }
        -:  398:
function scoreFor called 6 returned 100% blocks executed 36%
        6:  399:    int scoreFor(int player, struct gameState * state) 
        -:  400:    {
        -:  401:      int i;
        6:  402:      int score = 0;
        -:  403:    //score from hand
       36:  404:      for (i = 0; i < state -> handCount[player]; i++) 
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:  405:      {
       30:  406:        if (state -> hand[player][i] == curse) 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  407:        {
    #####:  408:          score = score - 1;
        -:  409:        };
       30:  410:        if (state -> hand[player][i] == estate) 
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:  411:        {
       10:  412:          score = score + 1;
        -:  413:        };
       30:  414:        if (state -> hand[player][i] == duchy) 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  415:        {
    #####:  416:          score = score + 3;
        -:  417:        };
       30:  418:        if (state -> hand[player][i] == province) 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  419:        {
    #####:  420:          score = score + 6;
        -:  421:        };
       30:  422:        if (state -> hand[player][i] == great_hall) 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  423:        {
    #####:  424:          score = score + 1;
        -:  425:        };
       30:  426:        if (state -> hand[player][i] == gardens) 
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        -:  427:        {
        6:  428:          score = score + (fullDeckCount(player, 0, state) / 10);
call    0 returned 100%
        -:  429:        };
        -:  430:      }
        -:  431:
        -:  432:    //score from discard
        6:  433:      for (i = 0; i < state -> discardCount[player]; i++) 
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
        -:  434:      {
    #####:  435:        if (state -> discard[player][i] == curse) 
branch  0 never executed
branch  1 never executed
        -:  436:        {
    #####:  437:          score = score - 1;
        -:  438:        };
    #####:  439:        if (state -> discard[player][i] == estate) 
branch  0 never executed
branch  1 never executed
        -:  440:        {
    #####:  441:          score = score + 1;
        -:  442:        };
    #####:  443:        if (state -> discard[player][i] == duchy) 
branch  0 never executed
branch  1 never executed
        -:  444:        {
    #####:  445:          score = score + 3;
        -:  446:        };
    #####:  447:        if (state -> discard[player][i] == province) 
branch  0 never executed
branch  1 never executed
        -:  448:        {
    #####:  449:          score = score + 6;
        -:  450:        };
    #####:  451:        if (state -> discard[player][i] == great_hall) 
branch  0 never executed
branch  1 never executed
        -:  452:        {
    #####:  453:          score = score + 1;
        -:  454:        };
    #####:  455:        if (state -> discard[player][i] == gardens) 
branch  0 never executed
branch  1 never executed
        -:  456:        {
    #####:  457:          score = score + (fullDeckCount(player, 0, state) / 10);
call    0 never executed
        -:  458:        };
        -:  459:      }
        -:  460:
        -:  461:    //score from deck
        6:  462:      for (i = 0; i < state -> discardCount[player]; i++) 
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
        -:  463:      {
    #####:  464:        if (state -> deck[player][i] == curse) 
branch  0 never executed
branch  1 never executed
        -:  465:        {
    #####:  466:          score = score - 1;
        -:  467:        };
    #####:  468:        if (state -> deck[player][i] == estate) 
branch  0 never executed
branch  1 never executed
        -:  469:        {
    #####:  470:          score = score + 1;
        -:  471:        };
    #####:  472:        if (state -> deck[player][i] == duchy) 
branch  0 never executed
branch  1 never executed
        -:  473:        {
    #####:  474:          score = score + 3;
        -:  475:        };
    #####:  476:        if (state -> deck[player][i] == province) 
branch  0 never executed
branch  1 never executed
        -:  477:        {
    #####:  478:          score = score + 6;
        -:  479:        };
    #####:  480:        if (state -> deck[player][i] == great_hall) 
branch  0 never executed
branch  1 never executed
        -:  481:        {
    #####:  482:          score = score + 1;
        -:  483:        };
    #####:  484:        if (state -> deck[player][i] == gardens) 
branch  0 never executed
branch  1 never executed
        -:  485:        {
    #####:  486:          score = score + (fullDeckCount(player, 0, state) / 10);
call    0 never executed
        -:  487:        };
        -:  488:      }
        -:  489:
        6:  490:      return score;
        -:  491:    }
        -:  492:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  493:    int getWinners(int players[MAX_PLAYERS], struct gameState * state) 
        -:  494:    {
        -:  495:      int i;
        -:  496:      int j;
        -:  497:      int highScore;
        -:  498:      int currentPlayer;
        -:  499:
        -:  500:    //get score for each player
    #####:  501:      for (i = 0; i < MAX_PLAYERS; i++) 
branch  0 never executed
branch  1 never executed
        -:  502:      {
        -:  503:        //set unused player scores to -9999
    #####:  504:        if (i >= state -> numPlayers) 
branch  0 never executed
branch  1 never executed
        -:  505:        {
    #####:  506:          players[i] = -9999;
        -:  507:        } else {
    #####:  508:          players[i] = scoreFor(i, state);
call    0 never executed
        -:  509:        }
        -:  510:      }
        -:  511:
        -:  512:    //find highest score
    #####:  513:      j = 0;
    #####:  514:      for (i = 0; i < MAX_PLAYERS; i++) 
branch  0 never executed
branch  1 never executed
        -:  515:      {
    #####:  516:        if (players[i] > players[j]) 
branch  0 never executed
branch  1 never executed
        -:  517:        {
    #####:  518:          j = i;
        -:  519:        }
        -:  520:      }
    #####:  521:      highScore = players[j];
        -:  522:
        -:  523:    //add 1 to players who had less turns
    #####:  524:      currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  525:      for (i = 0; i < MAX_PLAYERS; i++) 
branch  0 never executed
branch  1 never executed
        -:  526:      {
    #####:  527:        if (players[i] == highScore && i > currentPlayer) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  528:        {
    #####:  529:          players[i]++;
        -:  530:        }
        -:  531:      }
        -:  532:
        -:  533:    //find new highest score
    #####:  534:      j = 0;
    #####:  535:      for (i = 0; i < MAX_PLAYERS; i++) 
branch  0 never executed
branch  1 never executed
        -:  536:      {
    #####:  537:        if (players[i] > players[j]) 
branch  0 never executed
branch  1 never executed
        -:  538:        {
    #####:  539:          j = i;
        -:  540:        }
        -:  541:      }
    #####:  542:      highScore = players[j];
        -:  543:
        -:  544:    //set winners in array to 1 and rest to 0
    #####:  545:      for (i = 0; i < MAX_PLAYERS; i++) 
branch  0 never executed
branch  1 never executed
        -:  546:      {
    #####:  547:        if (players[i] == highScore) 
branch  0 never executed
branch  1 never executed
        -:  548:        {
    #####:  549:          players[i] = 1;
        -:  550:        } else {
    #####:  551:          players[i] = 0;
        -:  552:        }
        -:  553:      }
        -:  554:
    #####:  555:      return 0;
        -:  556:    }
        -:  557:
function drawCard called 15 returned 100% blocks executed 38%
       15:  558:    int drawCard(int player, struct gameState * state) 
        -:  559:    {
        -:  560:      int count;
        -:  561:      int deckCounter;
       15:  562:    if (state -> deckCount[player] <= 0) { //Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  563:
        -:  564:        //Step 1 Shuffle the discard pile back into a deck
        -:  565:      int i;
        -:  566:        //Move discard to deck
    #####:  567:      for (i = 0; i < state -> discardCount[player]; i++) 
branch  0 never executed
branch  1 never executed
        -:  568:      {
    #####:  569:        state -> deck[player][i] = state -> discard[player][i];
    #####:  570:        state -> discard[player][i] = -1;
        -:  571:      }
        -:  572:
    #####:  573:      state -> deckCount[player] = state -> discardCount[player];
    #####:  574:        state -> discardCount[player] = 0; //Reset discard
        -:  575:
        -:  576:        //Shufffle the deck
    #####:  577:        shuffle(player, state); //Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  578:
        -:  579:        if (DEBUG) 
        -:  580:        { //Debug statements
        -:  581:          printf("Deck count now: %d\n", state -> deckCount[player]);
        -:  582:        }
        -:  583:
    #####:  584:        state -> discardCount[player] = 0;
        -:  585:
        -:  586:        //Step 2 Draw Card
    #####:  587:        count = state -> handCount[player]; //Get current player's hand count
        -:  588:
        -:  589:        if (DEBUG) 
        -:  590:        { //Debug statements
        -:  591:          printf("Current hand count: %d\n", count);
        -:  592:        }
        -:  593:
    #####:  594:        deckCounter = state -> deckCount[player]; //Create a holder for the deck count
        -:  595:
    #####:  596:        if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  597:          return -1;
        -:  598:
    #####:  599:        state -> hand[player][count] = state -> deck[player][deckCounter - 1]; //Add card to hand
    #####:  600:        state -> deckCount[player]--;
    #####:  601:        state -> handCount[player]++; //Increment hand count
        -:  602:      } 
        -:  603:      else 
        -:  604:      {
       15:  605:        int count = state -> handCount[player]; //Get current hand count for player
        -:  606:        int deckCounter;
        -:  607:        if (DEBUG) 
        -:  608:        { //Debug statements
        -:  609:          printf("Current hand count: %d\n", count);
        -:  610:        }
        -:  611:
       15:  612:        deckCounter = state -> deckCount[player]; //Create holder for the deck count
       15:  613:        state -> hand[player][count] = state -> deck[player][deckCounter - 1]; //Add card to the hand
       15:  614:        state -> deckCount[player]--;
       15:  615:        state -> handCount[player]++; //Increment hand count
        -:  616:      }
       15:  617:      return 0;
        -:  618:    }
        -:  619:
function getCost called 0 returned 0% blocks executed 0%
    #####:  620:    int getCost(int cardNumber) 
        -:  621:    {
    #####:  622:      switch (cardNumber) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  623:      {
        -:  624:        case curse:
    #####:  625:        return 0;
        -:  626:        case estate:
    #####:  627:        return 2;
        -:  628:        case duchy:
    #####:  629:        return 5;
        -:  630:        case province:
    #####:  631:        return 8;
        -:  632:        case copper:
    #####:  633:        return 0;
        -:  634:        case silver:
    #####:  635:        return 3;
        -:  636:        case gold:
    #####:  637:        return 6;
        -:  638:        case adventurer:
    #####:  639:        return 6;
        -:  640:        case council_room:
    #####:  641:        return 5;
        -:  642:        case feast:
    #####:  643:        return 4;
        -:  644:        case gardens:
    #####:  645:        return 4;
        -:  646:        case mine:
    #####:  647:        return 5;
        -:  648:        case remodel:
    #####:  649:        return 4;
        -:  650:        case smithy:
    #####:  651:        return 4;
        -:  652:        case village:
    #####:  653:        return 3;
        -:  654:        case baron:
    #####:  655:        return 4;
        -:  656:        case great_hall:
    #####:  657:        return 3;
        -:  658:        case minion:
    #####:  659:        return 5;
        -:  660:        case steward:
    #####:  661:        return 3;
        -:  662:        case tribute:
    #####:  663:        return 5;
        -:  664:        case ambassador:
    #####:  665:        return 3;
        -:  666:        case cutpurse:
    #####:  667:        return 4;
        -:  668:        case embargo:
    #####:  669:        return 2;
        -:  670:        case outpost:
    #####:  671:        return 5;
        -:  672:        case salvager:
    #####:  673:        return 4;
        -:  674:        case sea_hag:
    #####:  675:        return 4;
        -:  676:        case treasure_map:
    #####:  677:        return 4;
        -:  678:      }
        -:  679:
    #####:  680:      return -1;
        -:  681:    }
        -:  682:
        -:  683://A2 Refactor CLEAN CARD | NO BUGS
function great_hall_card called 0 returned 0% blocks executed 0%
    #####:  684:    int great_hall_card(int handPos, struct gameState * state) 
        -:  685:    {
    #####:  686:      int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  687:
    #####:  688:      drawCard(currentPlayer, state);
call    0 never executed
        -:  689:
        -:  690:    // provides another action turn
    #####:  691:      state -> numActions++;
        -:  692:
        -:  693:    // played card to discard pile
    #####:  694:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  695:      return 0;
        -:  696:    }
        -:  697:
        -:  698://A2 Refactor
function village_card called 0 returned 0% blocks executed 0%
    #####:  699:    int village_card(int handPos, struct gameState * state) 
        -:  700:    {
    #####:  701:      int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  702:
    #####:  703:      drawCard(currentPlayer, state);
call    0 never executed
        -:  704:
        -:  705:    //BUG: Should only provide 2 action turns
    #####:  706:      state -> numActions = state -> numActions + 4;
        -:  707:
        -:  708:    // played card to discard pile
    #####:  709:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  710:      return 0;
        -:  711:    }
        -:  712:
        -:  713://A2 Refactor
function council_room_card called 0 returned 0% blocks executed 0%
    #####:  714:    int council_room_card(int handPos, struct gameState * state) 
        -:  715:    {
        -:  716:      int i;
    #####:  717:      int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  718:
        -:  719:    // draw 4 cards
    #####:  720:      for (i = 0; i < 4; i++) {
branch  0 never executed
branch  1 never executed
    #####:  721:        drawCard(currentPlayer, state);
call    0 never executed
        -:  722:      }
        -:  723:
        -:  724:    //BUG: Card provides another buy turn 
        -:  725:    //state->numBuys++;      
        -:  726:
        -:  727:    // all other players draw a card
    #####:  728:      for (i = 0; i < state -> numPlayers; i++) 
branch  0 never executed
branch  1 never executed
        -:  729:      {
    #####:  730:        if (i != currentPlayer) 
branch  0 never executed
branch  1 never executed
        -:  731:        {
    #####:  732:          drawCard(i, state);
call    0 never executed
        -:  733:        }
        -:  734:      }
        -:  735:    // played card to discard pile
    #####:  736:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  737:      return 0;
        -:  738:    }
        -:  739:
        -:  740://A2 Refactor
function adventurer_card called 0 returned 0% blocks executed 0%
    #####:  741:    int adventurer_card(struct gameState * state) 
        -:  742:    {
    #####:  743:      int z = 0;
        -:  744:      int cardDrawn;
    #####:  745:      int drawntreasure = 0;
    #####:  746:      int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  747:      int temphand[MAX_HAND];
        -:  748:
    #####:  749:    while (drawntreasure < 2) 
branch  0 never executed
branch  1 never executed
        -:  750:    { // when the deck is empty, reshuffle the discard and make it the deck
    #####:  751:      if (state -> deckCount[currentPlayer] < 1) 
branch  0 never executed
branch  1 never executed
        -:  752:      {
    #####:  753:        shuffle(currentPlayer, state);
call    0 never executed
        -:  754:      }
    #####:  755:      drawCard(currentPlayer, state);
call    0 never executed
        -:  756:        // defines the drawn card as the top card
    #####:  757:      cardDrawn = state -> hand[currentPlayer][state -> handCount[currentPlayer] - 1];
    #####:  758:      if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  759:        //drawntreasure++;
        -:  760:        //BUG: increments by 4. Should increment by 1
    #####:  761:        drawntreasure += 4;
        -:  762:      else 
        -:  763:      {
    #####:  764:        temphand[z] = cardDrawn;
        -:  765:            // removes the most recently drawn (top) card
    #####:  766:        state -> handCount[currentPlayer]--;
    #####:  767:        z++;
        -:  768:      }
        -:  769:    }
    #####:  770:    while (z - 1 >= 0) 
branch  0 never executed
branch  1 never executed
        -:  771:    {
        -:  772:        // discard all cards in play that have been drawn
    #####:  773:      state -> discard[currentPlayer][state -> discardCount[currentPlayer]++] = temphand[z - 1];
    #####:  774:      z = z - 1;
        -:  775:    }
    #####:  776:    return 0;
        -:  777:  }
        -:  778:
        -:  779://A2 Refactor
function smithy_card called 0 returned 0% blocks executed 0%
    #####:  780:  int smithy_card(int handPos, struct gameState * state) 
        -:  781:  {
        -:  782:    int i;
    #####:  783:    int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  784:    //BUG: Should only draw 3 cards  
    #####:  785:    for (i = 0; i < 4; i++) 
branch  0 never executed
branch  1 never executed
        -:  786:    {
    #####:  787:      drawCard(currentPlayer, state);
call    0 never executed
        -:  788:    }
        -:  789:    //discard card from hand
    #####:  790:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  791:    return 0;
        -:  792:  }
        -:  793:
function cardEffect called 3 returned 100% blocks executed 3%
        3:  794:  int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState * state, int handPos, int * bonus) {
        -:  795:    int i;
        -:  796:    int j;
        -:  797:    int k;
        -:  798:    int x;
        -:  799:    int index;
        3:  800:    int currentPlayer = whoseTurn(state);
call    0 returned 100%
        3:  801:    int nextPlayer = currentPlayer + 1;
        -:  802:
        3:  803:    int tributeRevealedCards[2] = 
        -:  804:    {
        -:  805:      -1, -1
        -:  806:    };
        -:  807:    int temphand[MAX_HAND]; // moved above the if statement
        -:  808:    //int drawntreasure=0; // commented out as part of A2 Refactor
        -:  809:    //int cardDrawn; // commented out as part of A2 Refactor
        -:  810:    //int z = 0;// this is the counter for the temp hand // commented out as part of A2 Refactor
        3:  811:    if (nextPlayer > (state -> numPlayers - 1)) 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  812:    {
    #####:  813:      nextPlayer = 0;
        -:  814:    }
        -:  815:
        -:  816:    //uses switch to select card and perform actions
        3:  817:    switch (card) 
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 100%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  818:    {
        -:  819:        // A2 Refactor  
        -:  820:      case adventurer:
    #####:  821:      return adventurer_card(state);
call    0 never executed
        -:  822:
        -:  823:        // A2 Refactor    
        -:  824:      case council_room:
    #####:  825:      return council_room_card(handPos, state);
call    0 never executed
        -:  826:
        -:  827:        // A2 Refactor  
        -:  828:      case smithy:
    #####:  829:      return smithy_card(handPos, state);
call    0 never executed
        -:  830:
        -:  831:        // A2 Refactor  
        -:  832:      case village:
    #####:  833:      return village_card(handPos, state);
call    0 never executed
        -:  834:
        -:  835:        // A2 Refactor
        -:  836:      case great_hall:
    #####:  837:      return great_hall_card(handPos, state);
call    0 never executed
        -:  838:
        -:  839:      case feast:
        -:  840:        //gain card with cost up to 5
        -:  841:        //Backup hand
    #####:  842:      for (i = 0; i <= state -> handCount[currentPlayer]; i++) 
branch  0 never executed
branch  1 never executed
        -:  843:      {
    #####:  844:            temphand[i] = state -> hand[currentPlayer][i]; //Backup card
    #####:  845:            state -> hand[currentPlayer][i] = -1; //Set to nothing
        -:  846:          }
        -:  847:        //Backup hand
        -:  848:
        -:  849:        //Update Coins for Buy
    #####:  850:          updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  851:        x = 1; //Condition to loop on
    #####:  852:        while (x == 1) 
branch  0 never executed
branch  1 never executed
        -:  853:        { //Buy one card
    #####:  854:          if (supplyCount(choice1, state) <= 0) 
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  855:          {
        -:  856:            if (DEBUG)
        -:  857:              printf("None of that card left, sorry!\n");
        -:  858:
        -:  859:            if (DEBUG) 
        -:  860:            {
        -:  861:              printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  862:            }
        -:  863:          } 
    #####:  864:          else if (state -> coins < getCost(choice1)) 
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  865:          {
    #####:  866:            printf("That card is too expensive!\n");
call    0 never executed
        -:  867:
        -:  868:            if (DEBUG) 
        -:  869:            {
        -:  870:              printf("Coins: %d < %d\n", state -> coins, getCost(choice1));
        -:  871:            }
        -:  872:          } 
        -:  873:          else 
        -:  874:          {
        -:  875:            if (DEBUG) 
        -:  876:            {
        -:  877:              printf("Deck Count: %d\n", state -> handCount[currentPlayer] + state -> deckCount[currentPlayer] + state -> discardCount[currentPlayer]);
        -:  878:            }
        -:  879:
    #####:  880:                gainCard(choice1, state, 0, currentPlayer); //Gain the card
call    0 never executed
    #####:  881:                x = 0; //No more buying cards
        -:  882:
        -:  883:                if (DEBUG) 
        -:  884:                {
        -:  885:                  printf("Deck Count: %d\n", state -> handCount[currentPlayer] + state -> deckCount[currentPlayer] + state -> discardCount[currentPlayer]);
        -:  886:                }
        -:  887:
        -:  888:              }
        -:  889:            }
        -:  890:
        -:  891:        //Reset Hand
    #####:  892:            for (i = 0; i <= state -> handCount[currentPlayer]; i++) 
branch  0 never executed
branch  1 never executed
        -:  893:            {
    #####:  894:              state -> hand[currentPlayer][i] = temphand[i];
    #####:  895:              temphand[i] = -1;
        -:  896:            }
        -:  897:        //Reset Hand
        -:  898:
    #####:  899:            return 0;
        -:  900:
        -:  901:            case gardens:
        3:  902:            return -1;
        -:  903:
        -:  904:            case mine:
    #####:  905:        j = state -> hand[currentPlayer][choice1]; //store card we will trash
        -:  906:
    #####:  907:        if (state -> hand[currentPlayer][choice1] < copper || state -> hand[currentPlayer][choice1] > gold) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  908:        {
    #####:  909:          return -1;
        -:  910:        }
        -:  911:
    #####:  912:        if (choice2 > treasure_map || choice2 < curse) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  913:        {
    #####:  914:          return -1;
        -:  915:        }
        -:  916:
    #####:  917:        if ((getCost(state -> hand[currentPlayer][choice1]) + 3) > getCost(choice2)) 
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  918:        {
    #####:  919:          return -1;
        -:  920:        }
        -:  921:
    #####:  922:        gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  923:
        -:  924:        //discard card from hand
    #####:  925:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  926:
        -:  927:        //discard trashed card
    #####:  928:        for (i = 0; i < state -> handCount[currentPlayer]; i++) 
branch  0 never executed
branch  1 never executed
        -:  929:        {
    #####:  930:          if (state -> hand[currentPlayer][i] == j) 
branch  0 never executed
branch  1 never executed
        -:  931:          {
    #####:  932:            discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  933:            break;
        -:  934:          }
        -:  935:        }
        -:  936:
    #####:  937:        return 0;
        -:  938:
        -:  939:        case remodel:
    #####:  940:        j = state -> hand[currentPlayer][choice1]; //store card we will trash
        -:  941:
    #####:  942:        if ((getCost(state -> hand[currentPlayer][choice1]) + 2) > getCost(choice2)) 
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  943:        {
    #####:  944:          return -1;
        -:  945:        }
        -:  946:
    #####:  947:        gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  948:
        -:  949:        //discard card from hand
    #####:  950:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  951:
        -:  952:        //discard trashed card
    #####:  953:        for (i = 0; i < state -> handCount[currentPlayer]; i++) 
branch  0 never executed
branch  1 never executed
        -:  954:        {
    #####:  955:          if (state -> hand[currentPlayer][i] == j) 
branch  0 never executed
branch  1 never executed
        -:  956:          {
    #####:  957:            discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  958:            break;
        -:  959:          }
        -:  960:        }
    #####:  961:        return 0;
        -:  962:
        -:  963:        case baron:
    #####:  964:        state -> numBuys++; //Increase buys by 1!
    #####:  965:        if (choice1 > 0) 
branch  0 never executed
branch  1 never executed
        -:  966:        { //Boolean true or going to discard an estate
    #####:  967:            int p = 0; //Iterator for hand!
    #####:  968:            int card_not_discarded = 1; //Flag for discard set!
    #####:  969:            while (card_not_discarded) 
branch  0 never executed
branch  1 never executed
        -:  970:            {
    #####:  971:                if (state -> hand[currentPlayer][p] == estate) 
branch  0 never executed
branch  1 never executed
        -:  972:                { //Found an estate card!
    #####:  973:                    state -> coins += 4; //Add 4 coins to the amount of coins
    #####:  974:                    state -> discard[currentPlayer][state -> discardCount[currentPlayer]] = state -> hand[currentPlayer][p];
    #####:  975:                    state -> discardCount[currentPlayer]++;
    #####:  976:                    for (; p < state -> handCount[currentPlayer]; p++) 
branch  0 never executed
branch  1 never executed
        -:  977:                    {
    #####:  978:                      state -> hand[currentPlayer][p] = state -> hand[currentPlayer][p + 1];
        -:  979:                    }
    #####:  980:                    state -> hand[currentPlayer][state -> handCount[currentPlayer]] = -1;
    #####:  981:                    state -> handCount[currentPlayer]--;
    #####:  982:                    card_not_discarded = 0; //Exit the loop
        -:  983:                  } 
    #####:  984:                  else if (p > state -> handCount[currentPlayer]) 
branch  0 never executed
branch  1 never executed
        -:  985:                  {
        -:  986:                    if (DEBUG) 
        -:  987:                    {
        -:  988:                      printf("No estate cards in your hand, invalid choice\n");
        -:  989:                      printf("Must gain an estate if there are any\n");
        -:  990:                    }
    #####:  991:                    if (supplyCount(estate, state) > 0) 
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  992:                    {
    #####:  993:                      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  994:                        state -> supplyCount[estate]--; //Decrement estates
    #####:  995:                        if (supplyCount(estate, state) == 0) 
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  996:                        {
    #####:  997:                          isGameOver(state);
call    0 never executed
        -:  998:                        }
        -:  999:                      }
    #####: 1000:                    card_not_discarded = 0; //Exit the loop
        -: 1001:                  } 
        -: 1002:                  else 
        -: 1003:                  {
    #####: 1004:                    p++; //Next card
        -: 1005:                  }
        -: 1006:                }
        -: 1007:              } 
        -: 1008:              else 
        -: 1009:              {
    #####: 1010:                if (supplyCount(estate, state) > 0) 
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1011:                {
    #####: 1012:                gainCard(estate, state, 0, currentPlayer); //Gain an estate
call    0 never executed
    #####: 1013:                state -> supplyCount[estate]--; //Decrement Estates
    #####: 1014:                if (supplyCount(estate, state) == 0) 
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1015:                {
    #####: 1016:                  isGameOver(state);
call    0 never executed
        -: 1017:                }
        -: 1018:              }
        -: 1019:            }
    #####: 1020:            return 0;
        -: 1021:
        -: 1022:            case minion:
        -: 1023:        //+1 action
    #####: 1024:            state -> numActions++;
        -: 1025:
        -: 1026:        //discard card from hand
    #####: 1027:            discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1028:
    #####: 1029:        if (choice1) //+2 coins
branch  0 never executed
branch  1 never executed
        -: 1030:        {
    #####: 1031:          state -> coins = state -> coins + 2;
    #####: 1032:        } else if (choice2) //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -: 1033:        {
        -: 1034:            //discard hand
    #####: 1035:          while (numHandCards(state) > 0) 
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1036:          {
    #####: 1037:            discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1038:          }
        -: 1039:
        -: 1040:            //draw 4
    #####: 1041:          for (i = 0; i < 4; i++) 
branch  0 never executed
branch  1 never executed
        -: 1042:          {
    #####: 1043:            drawCard(currentPlayer, state);
call    0 never executed
        -: 1044:          }
        -: 1045:
        -: 1046:            //other players discard hand and redraw if hand size > 4
    #####: 1047:          for (i = 0; i < state -> numPlayers; i++) 
branch  0 never executed
branch  1 never executed
        -: 1048:          {
    #####: 1049:            if (i != currentPlayer) 
branch  0 never executed
branch  1 never executed
        -: 1050:            {
    #####: 1051:              if (state -> handCount[i] > 4) 
branch  0 never executed
branch  1 never executed
        -: 1052:              {
        -: 1053:                        //discard hand
    #####: 1054:                while (state -> handCount[i] > 0) 
branch  0 never executed
branch  1 never executed
        -: 1055:                {
    #####: 1056:                  discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1057:                }
        -: 1058:                        //draw 4
    #####: 1059:                for (j = 0; j < 4; j++) 
branch  0 never executed
branch  1 never executed
        -: 1060:                {
    #####: 1061:                  drawCard(i, state);
call    0 never executed
        -: 1062:                }
        -: 1063:              }
        -: 1064:            }
        -: 1065:          }
        -: 1066:        }
    #####: 1067:        return 0;
        -: 1068:
        -: 1069:        case steward:
    #####: 1070:        if (choice1 == 1) 
branch  0 never executed
branch  1 never executed
        -: 1071:        {
        -: 1072:          //+2 cards
    #####: 1073:          drawCard(currentPlayer, state);
call    0 never executed
    #####: 1074:          drawCard(currentPlayer, state);
call    0 never executed
        -: 1075:        } 
    #####: 1076:        else if (choice1 == 2) 
branch  0 never executed
branch  1 never executed
        -: 1077:        {
        -: 1078:          //+2 coins
    #####: 1079:          state -> coins = state -> coins + 2;
        -: 1080:        } 
        -: 1081:        else 
        -: 1082:        {
        -: 1083:          //trash 2 cards in hand
    #####: 1084:          discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1085:          discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1086:        }
        -: 1087:
        -: 1088:        //discard card from hand
    #####: 1089:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1090:        return 0;
        -: 1091:
        -: 1092:        case tribute:
    #####: 1093:        if ((state -> discardCount[nextPlayer] + state -> deckCount[nextPlayer]) <= 1) 
branch  0 never executed
branch  1 never executed
        -: 1094:        {
    #####: 1095:          if (state -> deckCount[nextPlayer] > 0) 
branch  0 never executed
branch  1 never executed
        -: 1096:          {
    #####: 1097:            tributeRevealedCards[0] = state -> deck[nextPlayer][state -> deckCount[nextPlayer] - 1];
    #####: 1098:            state -> deckCount[nextPlayer]--;
        -: 1099:          } 
    #####: 1100:          else if (state -> discardCount[nextPlayer] > 0) 
branch  0 never executed
branch  1 never executed
        -: 1101:          {
    #####: 1102:            tributeRevealedCards[0] = state -> discard[nextPlayer][state -> discardCount[nextPlayer] - 1];
    #####: 1103:            state -> discardCount[nextPlayer]--;
        -: 1104:          } 
        -: 1105:          else 
        -: 1106:          {
        -: 1107:                //No Card to Reveal
        -: 1108:            if (DEBUG) 
        -: 1109:            {
        -: 1110:              printf("No cards to reveal\n");
        -: 1111:            }
        -: 1112:          }
        -: 1113:        } 
        -: 1114:        else 
        -: 1115:        {
    #####: 1116:          if (state -> deckCount[nextPlayer] == 0) 
branch  0 never executed
branch  1 never executed
        -: 1117:          {
    #####: 1118:            for (i = 0; i < state -> discardCount[nextPlayer]; i++) 
branch  0 never executed
branch  1 never executed
        -: 1119:            {
    #####: 1120:                    state -> deck[nextPlayer][i] = state -> discard[nextPlayer][i]; //Move to deck
    #####: 1121:                    state -> deckCount[nextPlayer]++;
    #####: 1122:                    state -> discard[nextPlayer][i] = -1;
    #####: 1123:                    state -> discardCount[nextPlayer]--;
        -: 1124:                  }
        -: 1125:
    #####: 1126:                shuffle(nextPlayer, state); //Shuffle the deck
call    0 never executed
        -: 1127:              }
    #####: 1128:              tributeRevealedCards[0] = state -> deck[nextPlayer][state -> deckCount[nextPlayer] - 1];
    #####: 1129:              state -> deck[nextPlayer][state -> deckCount[nextPlayer]--] = -1;
    #####: 1130:              state -> deckCount[nextPlayer]--;
    #####: 1131:              tributeRevealedCards[1] = state -> deck[nextPlayer][state -> deckCount[nextPlayer] - 1];
    #####: 1132:              state -> deck[nextPlayer][state -> deckCount[nextPlayer]--] = -1;
    #####: 1133:              state -> deckCount[nextPlayer]--;
        -: 1134:            }
        -: 1135:
    #####: 1136:        if (tributeRevealedCards[0] == tributeRevealedCards[1]) 
branch  0 never executed
branch  1 never executed
        -: 1137:        { //If we have a duplicate card, just drop one 
    #####: 1138:          state -> playedCards[state -> playedCardCount] = tributeRevealedCards[1];
    #####: 1139:          state -> playedCardCount++;
    #####: 1140:          tributeRevealedCards[1] = -1;
        -: 1141:        }
        -: 1142:
    #####: 1143:        for (i = 0; i <= 2; i++) 
branch  0 never executed
branch  1 never executed
        -: 1144:        {
    #####: 1145:            if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1146:            { //Treasure cards
    #####: 1147:              state -> coins += 2;
        -: 1148:            } 
    #####: 1149:            else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
        -: 1150:            { //Victory Card Found
    #####: 1151:              drawCard(currentPlayer, state);
call    0 never executed
    #####: 1152:              drawCard(currentPlayer, state);
call    0 never executed
        -: 1153:            } 
        -: 1154:            else 
        -: 1155:            { //Action Card
    #####: 1156:              state -> numActions = state -> numActions + 2;
        -: 1157:            }
        -: 1158:          }
        -: 1159:
    #####: 1160:          return 0;
        -: 1161:
        -: 1162:          case ambassador:
    #####: 1163:        j = 0; //used to check if player has enough cards to discard
        -: 1164:
    #####: 1165:        if (choice2 > 2 || choice2 < 0) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1166:        {
    #####: 1167:          return -1;
        -: 1168:        }
        -: 1169:
    #####: 1170:        if (choice1 == handPos) 
branch  0 never executed
branch  1 never executed
        -: 1171:        {
    #####: 1172:          return -1;
        -: 1173:        }
        -: 1174:
    #####: 1175:        for (i = 0; i < state -> handCount[currentPlayer]; i++) 
branch  0 never executed
branch  1 never executed
        -: 1176:        {
    #####: 1177:          if (i != handPos && i == state -> hand[currentPlayer][choice1] && i != choice1) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1178:          {
    #####: 1179:            j++;
        -: 1180:          }
        -: 1181:        }
    #####: 1182:        if (j < choice2) 
branch  0 never executed
branch  1 never executed
        -: 1183:        {
    #####: 1184:          return -1;
        -: 1185:        }
        -: 1186:
        -: 1187:        if (DEBUG)
        -: 1188:          printf("Player %d reveals card number: %d\n", currentPlayer, state -> hand[currentPlayer][choice1]);
        -: 1189:
        -: 1190:        //increase supply count for choosen card by amount being discarded
    #####: 1191:        state -> supplyCount[state -> hand[currentPlayer][choice1]] += choice2;
        -: 1192:
        -: 1193:        //each other player gains a copy of revealed card
    #####: 1194:        for (i = 0; i < state -> numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1195:          if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####: 1196:            gainCard(state -> hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1197:          }
        -: 1198:        }
        -: 1199:
        -: 1200:        //discard played card from hand
    #####: 1201:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1202:
        -: 1203:        //trash copies of cards returned to supply
    #####: 1204:        for (j = 0; j < choice2; j++) {
branch  0 never executed
branch  1 never executed
    #####: 1205:          for (i = 0; i < state -> handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1206:            if (state -> hand[currentPlayer][i] == state -> hand[currentPlayer][choice1]) {
branch  0 never executed
branch  1 never executed
    #####: 1207:              discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1208:              break;
        -: 1209:            }
        -: 1210:          }
        -: 1211:        }
        -: 1212:
    #####: 1213:        return 0;
        -: 1214:
        -: 1215:        case cutpurse:
        -: 1216:
    #####: 1217:        updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1218:        for (i = 0; i < state -> numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1219:          if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####: 1220:            for (j = 0; j < state -> handCount[i]; j++) {
branch  0 never executed
branch  1 never executed
    #####: 1221:              if (state -> hand[i][j] == copper) {
branch  0 never executed
branch  1 never executed
    #####: 1222:                discardCard(j, i, state, 0);
call    0 never executed
    #####: 1223:                break;
        -: 1224:              }
    #####: 1225:              if (j == state -> handCount[i]) {
branch  0 never executed
branch  1 never executed
    #####: 1226:                for (k = 0; k < state -> handCount[i]; k++) {
branch  0 never executed
branch  1 never executed
        -: 1227:                  if (DEBUG)
        -: 1228:                    printf("Player %d reveals card number %d\n", i, state -> hand[i][k]);
        -: 1229:                }
    #####: 1230:                break;
        -: 1231:              }
        -: 1232:            }
        -: 1233:
        -: 1234:          }
        -: 1235:
        -: 1236:        }
        -: 1237:
        -: 1238:        //discard played card from hand
    #####: 1239:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1240:
    #####: 1241:        return 0;
        -: 1242:
        -: 1243:        case embargo:
        -: 1244:        //+2 Coins
    #####: 1245:        state -> coins = state -> coins + 2;
        -: 1246:
        -: 1247:        //see if selected pile is in play
    #####: 1248:        if (state -> supplyCount[choice1] == -1) {
branch  0 never executed
branch  1 never executed
    #####: 1249:          return -1;
        -: 1250:        }
        -: 1251:
        -: 1252:        //add embargo token to selected supply pile
    #####: 1253:        state -> embargoTokens[choice1]++;
        -: 1254:
        -: 1255:        //trash card
    #####: 1256:        discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1257:        return 0;
        -: 1258:
        -: 1259:        case outpost:
        -: 1260:        //set outpost flag
    #####: 1261:        state -> outpostPlayed++;
        -: 1262:
        -: 1263:        //discard card
    #####: 1264:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1265:        return 0;
        -: 1266:
        -: 1267:        case salvager:
        -: 1268:        //+1 buy
    #####: 1269:        state -> numBuys++;
        -: 1270:
    #####: 1271:        if (choice1) {
branch  0 never executed
branch  1 never executed
        -: 1272:            //gain coins equal to trashed card
    #####: 1273:          state -> coins = state -> coins + getCost(handCard(choice1, state));
call    0 never executed
call    1 never executed
        -: 1274:            //trash card
    #####: 1275:          discardCard(choice1, currentPlayer, state, 1);
call    0 never executed
        -: 1276:        }
        -: 1277:
        -: 1278:        //discard card
    #####: 1279:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1280:        return 0;
        -: 1281:
        -: 1282:        case sea_hag:
    #####: 1283:        for (i = 0; i < state -> numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1284:          if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####: 1285:            state -> discard[i][state -> discardCount[i]] = state -> deck[i][state -> deckCount[i]--];
    #####: 1286:            state -> deckCount[i]--;
    #####: 1287:            state -> discardCount[i]++;
    #####: 1288:                state -> deck[i][state -> deckCount[i]--] = curse; //Top card now a curse
        -: 1289:              }
        -: 1290:            }
    #####: 1291:            return 0;
        -: 1292:
        -: 1293:            case treasure_map:
        -: 1294:        //search hand for another treasure_map
    #####: 1295:            index = -1;
    #####: 1296:            for (i = 0; i < state -> handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1297:              if (state -> hand[currentPlayer][i] == treasure_map && i != handPos) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1298:                index = i;
    #####: 1299:                break;
        -: 1300:              }
        -: 1301:            }
    #####: 1302:            if (index > -1) {
branch  0 never executed
branch  1 never executed
        -: 1303:            //trash both treasure cards
    #####: 1304:              discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1305:              discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1306:
        -: 1307:            //gain 4 Gold cards
    #####: 1308:              for (i = 0; i < 4; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1309:                gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1310:              }
        -: 1311:
        -: 1312:            //return success
    #####: 1313:              return 1;
        -: 1314:            }
        -: 1315:
        -: 1316:        //no second treasure_map found in hand
    #####: 1317:            return -1;
        -: 1318:          }
        -: 1319:
    #####: 1320:          return -1;
        -: 1321:        }
        -: 1322:
function discardCard called 0 returned 0% blocks executed 0%
    #####: 1323:        int discardCard(int handPos, int currentPlayer, struct gameState * state, int trashFlag) {
        -: 1324:
        -: 1325:    //if card is not trashed, added to Played pile 
    #####: 1326:          if (trashFlag < 1) {
branch  0 never executed
branch  1 never executed
        -: 1327:        //add card to played pile
    #####: 1328:            state -> playedCards[state -> playedCardCount] = state -> hand[currentPlayer][handPos];
    #####: 1329:            state -> playedCardCount++;
        -: 1330:          }
        -: 1331:
        -: 1332:    //set played card to -1
    #####: 1333:          state -> hand[currentPlayer][handPos] = -1;
        -: 1334:
        -: 1335:    //remove card from player's hand
    #####: 1336:    if (handPos == (state -> handCount[currentPlayer] - 1)) //last card in hand array is played
branch  0 never executed
branch  1 never executed
        -: 1337:    {
        -: 1338:        //reduce number of cards in hand
    #####: 1339:      state -> handCount[currentPlayer]--;
    #####: 1340:    } else if (state -> handCount[currentPlayer] == 1) //only one card in hand
branch  0 never executed
branch  1 never executed
        -: 1341:    {
        -: 1342:        //reduce number of cards in hand
    #####: 1343:      state -> handCount[currentPlayer]--;
        -: 1344:    } else {
        -: 1345:        //replace discarded card with last card in hand
    #####: 1346:      state -> hand[currentPlayer][handPos] = state -> hand[currentPlayer][(state -> handCount[currentPlayer] - 1)];
        -: 1347:        //set last card to -1
    #####: 1348:      state -> hand[currentPlayer][state -> handCount[currentPlayer] - 1] = -1;
        -: 1349:        //reduce number of cards in hand
    #####: 1350:      state -> handCount[currentPlayer]--;
        -: 1351:    }
        -: 1352:
    #####: 1353:    return 0;
        -: 1354:  }
        -: 1355:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1356:  int gainCard(int supplyPos, struct gameState * state, int toFlag, int player) {
        -: 1357:    //Note: supplyPos is enum of choosen card
        -: 1358:
        -: 1359:    //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1360:    if (supplyCount(supplyPos, state) < 1) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1361:      return -1;
        -: 1362:    }
        -: 1363:
        -: 1364:    //added card for [whoseTurn] current player:
        -: 1365:    // toFlag = 0 : add to discard
        -: 1366:    // toFlag = 1 : add to deck
        -: 1367:    // toFlag = 2 : add to hand
        -: 1368:
    #####: 1369:    if (toFlag == 1) {
branch  0 never executed
branch  1 never executed
    #####: 1370:      state -> deck[player][state -> deckCount[player]] = supplyPos;
    #####: 1371:      state -> deckCount[player]++;
    #####: 1372:    } else if (toFlag == 2) {
branch  0 never executed
branch  1 never executed
    #####: 1373:      state -> hand[player][state -> handCount[player]] = supplyPos;
    #####: 1374:      state -> handCount[player]++;
        -: 1375:    } else {
    #####: 1376:      state -> discard[player][state -> discardCount[player]] = supplyPos;
    #####: 1377:      state -> discardCount[player]++;
        -: 1378:    }
        -: 1379:
        -: 1380:    //decrease number in supply pile
    #####: 1381:    state -> supplyCount[supplyPos]--;
        -: 1382:
    #####: 1383:    return 0;
        -: 1384:  }
        -: 1385:
function updateCoins called 3 returned 100% blocks executed 82%
        3: 1386:  int updateCoins(int player, struct gameState * state, int bonus) {
        -: 1387:    int i;
        -: 1388:
        -: 1389:    //reset coin count
        3: 1390:    state -> coins = 0;
        -: 1391:
        -: 1392:    //add coins for each Treasure card in player's hand
       18: 1393:    for (i = 0; i < state -> handCount[player]; i++) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       15: 1394:      if (state -> hand[player][i] == copper) {
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
       10: 1395:        state -> coins += 1;
        5: 1396:      } else if (state -> hand[player][i] == silver) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1397:        state -> coins += 2;
        5: 1398:      } else if (state -> hand[player][i] == gold) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1399:        state -> coins += 3;
        -: 1400:      }
        -: 1401:    }
        -: 1402:
        -: 1403:    //add bonus
        3: 1404:    state -> coins += bonus;
        -: 1405:
        3: 1406:    return 0;
        -: 1407:  }
        -: 1408:
        -: 1409://end of dominion.c
